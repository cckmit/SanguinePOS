/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.POSTransaction.view;

import com.POSGlobal.controller.clsBillSettlementDtl;
import com.POSGlobal.controller.clsGlobalVarClass;
import com.POSGlobal.controller.clsSMSSender;
import com.POSGlobal.controller.clsSettelementOptions;
import com.POSGlobal.controller.clsUtility;
import com.POSGlobal.controller.clsUtility2;
import com.POSGlobal.view.frmAlfaNumericKeyBoard;
import com.POSGlobal.view.frmOkCancelPopUp;
import com.POSGlobal.view.frmOkPopUp;
import static com.POSTransaction.view.frmBillSettlement.customerCodeForCredit;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class frmMultiBillSettle extends javax.swing.JFrame
{

    private clsUtility objUtility;
    String arrColumns[] = null;
    boolean[] canEdit = null;
    Class[] columnClass = null;
    private String selectedSingleSettlementCode = null;
    private String selectedSingleSettlementName = null;
    private boolean billPrintOnSelectedSingleSettlement = false;
    private Map<String, String> mapTableNameWithCode;
    private Map<String, String> mapSettlementNameWithCode;
    private Vector vComplReasonCode, vComplReasonName;

    private final DecimalFormat gDecimalFormat = clsGlobalVarClass.funGetGlobalDecimalFormatter();

    public frmMultiBillSettle()
    {

	initComponents();

	objUtility = new clsUtility();
	lblUserCode.setText(clsGlobalVarClass.gUserCode);
	lblPosName.setText(clsGlobalVarClass.gPOSName);
	lblDate.setText(clsGlobalVarClass.gPOSDateToDisplay);
	lblModuleName.setText(clsGlobalVarClass.gSelectedModule);

	mapTableNameWithCode = new HashMap<String, String>();
	mapSettlementNameWithCode = new HashMap<String, String>();
	vComplReasonCode = new Vector();
	vComplReasonName = new Vector();

	cmbBilledTables.addItemListener(new TableItemChangeListener());

	cmbSettlementMode.addItemListener(new SettlementModeChangeListener());

	/**
	 * fill billed tables
	 */
	funFillTableCombo();

	/**
	 * fill settlements
	 */
	funFillSettlementModeCombo();

	/**
	 * fill unsettle bills
	 */
	funFillUnsettledBills();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        panelHeader = new javax.swing.JPanel();
        lblProductName = new javax.swing.JLabel();
        lblModuleName = new javax.swing.JLabel();
        lblformName = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblPosName = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblUserCode = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblHOSign = new javax.swing.JLabel();
        panelMainForm = new JPanel() {  
            public void paintComponent(Graphics g) {  
                Image img = Toolkit.getDefaultToolkit().getImage(  
                    getClass().getResource("/com/POSTransaction/images/imgBackgroundImage.png"));  
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);  
            }  
        };  ;
        panelFormBody = new javax.swing.JPanel();
        btnClose = new javax.swing.JButton();
        btnSettle = new javax.swing.JButton();
        scrollPaneUnSettledBills = new javax.swing.JScrollPane();
        tblUnSettledBills = new javax.swing.JTable();
        lblNoOfBills = new javax.swing.JLabel();
        lblnoOfBillsValue = new javax.swing.JLabel();
        lblTotalAmount = new javax.swing.JLabel();
        lblTotalAmountValue = new javax.swing.JLabel();
        chkSelectAll = new javax.swing.JCheckBox();
        lblTable = new javax.swing.JLabel();
        cmbBilledTables = new javax.swing.JComboBox();
        lblSettlementMode = new javax.swing.JLabel();
        cmbSettlementMode = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosed(java.awt.event.WindowEvent evt)
            {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        panelHeader.setBackground(new java.awt.Color(69, 164, 238));
        panelHeader.setLayout(new javax.swing.BoxLayout(panelHeader, javax.swing.BoxLayout.LINE_AXIS));

        lblProductName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProductName.setForeground(new java.awt.Color(255, 255, 255));
        lblProductName.setText("SPOS -");
        lblProductName.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                lblProductNameMouseClicked(evt);
            }
        });
        panelHeader.add(lblProductName);

        lblModuleName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblModuleName.setForeground(new java.awt.Color(255, 255, 255));
        panelHeader.add(lblModuleName);

        lblformName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblformName.setForeground(new java.awt.Color(255, 255, 255));
        lblformName.setText("- Multi Bill Settle");
        lblformName.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                lblformNameMouseClicked(evt);
            }
        });
        panelHeader.add(lblformName);
        panelHeader.add(filler4);
        panelHeader.add(filler5);

        lblPosName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPosName.setForeground(new java.awt.Color(255, 255, 255));
        lblPosName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPosName.setMaximumSize(new java.awt.Dimension(321, 30));
        lblPosName.setMinimumSize(new java.awt.Dimension(321, 30));
        lblPosName.setPreferredSize(new java.awt.Dimension(321, 30));
        lblPosName.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                lblPosNameMouseClicked(evt);
            }
        });
        panelHeader.add(lblPosName);
        panelHeader.add(filler6);

        lblUserCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUserCode.setForeground(new java.awt.Color(255, 255, 255));
        lblUserCode.setMaximumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setMinimumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setPreferredSize(new java.awt.Dimension(90, 30));
        lblUserCode.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                lblUserCodeMouseClicked(evt);
            }
        });
        panelHeader.add(lblUserCode);

        lblDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setMaximumSize(new java.awt.Dimension(192, 30));
        lblDate.setMinimumSize(new java.awt.Dimension(192, 30));
        lblDate.setPreferredSize(new java.awt.Dimension(192, 30));
        lblDate.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                lblDateMouseClicked(evt);
            }
        });
        panelHeader.add(lblDate);

        lblHOSign.setMaximumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setMinimumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setPreferredSize(new java.awt.Dimension(34, 30));
        lblHOSign.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                lblHOSignMouseClicked(evt);
            }
        });
        panelHeader.add(lblHOSign);

        getContentPane().add(panelHeader, java.awt.BorderLayout.PAGE_START);

        panelMainForm.setMinimumSize(new java.awt.Dimension(800, 570));
        panelMainForm.setOpaque(false);
        panelMainForm.setLayout(new java.awt.GridBagLayout());

        panelFormBody.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelFormBody.setMinimumSize(new java.awt.Dimension(800, 570));
        panelFormBody.setOpaque(false);
        panelFormBody.setPreferredSize(new java.awt.Dimension(800, 570));

        btnClose.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnClose.setForeground(new java.awt.Color(255, 255, 255));
        btnClose.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSTransaction/images/imgCommonBtn1.png"))); // NOI18N
        btnClose.setText("CLOSE");
        btnClose.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClose.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSTransaction/images/imgCommonBtn2.png"))); // NOI18N
        btnClose.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnCloseMouseClicked(evt);
            }
        });

        btnSettle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSettle.setForeground(new java.awt.Color(255, 255, 255));
        btnSettle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSTransaction/images/imgCommonBtn1.png"))); // NOI18N
        btnSettle.setText("SETTLE");
        btnSettle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSettle.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSTransaction/images/imgCommonBtn2.png"))); // NOI18N
        btnSettle.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnSettleMouseClicked(evt);
            }
        });

        tblUnSettledBills.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {},
                {},
                {},
                {}
            },
            new String []
            {

            }
        ));
        tblUnSettledBills.getTableHeader().setReorderingAllowed(false);
        tblUnSettledBills.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tblUnSettledBillsMouseClicked(evt);
            }
        });
        scrollPaneUnSettledBills.setViewportView(tblUnSettledBills);

        lblNoOfBills.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblNoOfBills.setForeground(new java.awt.Color(0, 51, 255));
        lblNoOfBills.setText("No. Of Bills:");

        lblnoOfBillsValue.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblnoOfBillsValue.setForeground(new java.awt.Color(0, 51, 255));
        lblnoOfBillsValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblnoOfBillsValue.setText("0");

        lblTotalAmount.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblTotalAmount.setForeground(new java.awt.Color(0, 51, 255));
        lblTotalAmount.setText("Total Amount:");

        lblTotalAmountValue.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblTotalAmountValue.setForeground(new java.awt.Color(0, 51, 255));
        lblTotalAmountValue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalAmountValue.setText("0.00");

        chkSelectAll.setText("Select All ");
        chkSelectAll.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        chkSelectAll.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkSelectAllActionPerformed(evt);
            }
        });

        lblTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblTable.setText("Table");

        lblSettlementMode.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSettlementMode.setText("Settlement Mode");

        javax.swing.GroupLayout panelFormBodyLayout = new javax.swing.GroupLayout(panelFormBody);
        panelFormBody.setLayout(panelFormBodyLayout);
        panelFormBodyLayout.setHorizontalGroup(
            panelFormBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneUnSettledBills)
            .addGroup(panelFormBodyLayout.createSequentialGroup()
                .addGroup(panelFormBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFormBodyLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblNoOfBills)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblnoOfBillsValue, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107)
                        .addComponent(lblTotalAmount)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTotalAmountValue, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                        .addComponent(btnSettle, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelFormBodyLayout.createSequentialGroup()
                        .addComponent(lblTable, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbBilledTables, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblSettlementMode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbSettlementMode, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkSelectAll)))
                .addContainerGap())
        );
        panelFormBodyLayout.setVerticalGroup(
            panelFormBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFormBodyLayout.createSequentialGroup()
                .addGroup(panelFormBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFormBodyLayout.createSequentialGroup()
                        .addGap(0, 26, Short.MAX_VALUE)
                        .addComponent(chkSelectAll)
                        .addGap(4, 4, 4))
                    .addGroup(panelFormBodyLayout.createSequentialGroup()
                        .addGroup(panelFormBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmbBilledTables, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                            .addComponent(lblTable, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSettlementMode, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSettlementMode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(scrollPaneUnSettledBills, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFormBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFormBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblNoOfBills, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblnoOfBillsValue, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblTotalAmount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFormBodyLayout.createSequentialGroup()
                        .addGap(0, 5, Short.MAX_VALUE)
                        .addGroup(panelFormBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSettle, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblTotalAmountValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelMainForm.add(panelFormBody, new java.awt.GridBagConstraints());

        getContentPane().add(panelMainForm, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCloseMouseClicked
	// TODO add your handling code here:
	dispose();
	clsGlobalVarClass.hmActiveForms.remove("Multi Bill Settle");
    }//GEN-LAST:event_btnCloseMouseClicked

    private void btnSettleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSettleMouseClicked

	try
	{

	    if (mapSettlementNameWithCode.size() == 0)
	    {
		new frmOkPopUp(this, "No Settlement Available.", "Message", 2).setVisible(true);
		return;
	    }

	    if (tblUnSettledBills.getRowCount() > 0 && isBillSelected())
	    {
		boolean isBillSelected = false;
		ArrayList listOfSelectedBills = new ArrayList();
		int lastColumn = tblUnSettledBills.getColumnCount() - 1;

		for (int row = 0; row < tblUnSettledBills.getRowCount(); row++)
		{
		    if (Boolean.valueOf(tblUnSettledBills.getValueAt(row, lastColumn).toString()))
		    {
			isBillSelected = true;
			listOfSelectedBills.add(tblUnSettledBills.getValueAt(row, 0).toString());
		    }
		}

		frmOkCancelPopUp okOb2 = new frmOkCancelPopUp(null, "Do you want to Settle Bills.");
		okOb2.setVisible(true);
		int res2 = okOb2.getResult();
		if (res2 == 1)
		{

		    String settlementMode = cmbSettlementMode.getSelectedItem().toString();
		    String settlementCode = mapSettlementNameWithCode.get(settlementMode);

		    String sql = "select a.strSettelmentCode,a.strSettelmentDesc,a.strSettelmentType "
			    + "from tblsettelmenthd a where a.strSettelmentCode='" + settlementCode + "'";
		    ResultSet rsSettlementType = clsGlobalVarClass.dbMysql.executeResultSet(sql);
		    if (rsSettlementType.next())
		    {
			String settlementType = rsSettlementType.getString(3);//settlement type

			if (settlementType.equalsIgnoreCase("Cash"))
			{
			    funSettleBills(settlementMode, settlementType);
			}
			else if (settlementType.equalsIgnoreCase("Complementary"))
			{
			    funSettleBills(settlementMode, settlementType);
			}
			else
			{
			    frmMultiBillPartSettlement objMultiBillPartSettlement = new frmMultiBillPartSettlement(this, listOfSelectedBills);
			    clsGlobalVarClass.hmActiveForms.put("Multi Bill Part Settle", "Multi Bill Part Settle");
			    objMultiBillPartSettlement.setVisible(true);
			}
		    }
		    else
		    {

			frmMultiBillPartSettlement objMultiBillPartSettlement = new frmMultiBillPartSettlement(this, listOfSelectedBills);
			clsGlobalVarClass.hmActiveForms.put("Multi Bill Part Settle", "Multi Bill Part Settle");
			objMultiBillPartSettlement.setVisible(true);
		    }
		    chkSelectAll.setSelected(false);
		    funFillUnsettledBills();
		    funTblRowClicked();
		    rsSettlementType.close();
		}
	    }
	    else
	    {
		new frmOkPopUp(this, "Please Select Bill", "Message", 2).setVisible(true);
		return;
	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }//GEN-LAST:event_btnSettleMouseClicked

    private void lblProductNameMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lblProductNameMouseClicked
    {//GEN-HEADEREND:event_lblProductNameMouseClicked

    }//GEN-LAST:event_lblProductNameMouseClicked

    private void lblformNameMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lblformNameMouseClicked
    {//GEN-HEADEREND:event_lblformNameMouseClicked

    }//GEN-LAST:event_lblformNameMouseClicked

    private void lblPosNameMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lblPosNameMouseClicked
    {//GEN-HEADEREND:event_lblPosNameMouseClicked

    }//GEN-LAST:event_lblPosNameMouseClicked

    private void lblUserCodeMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lblUserCodeMouseClicked
    {//GEN-HEADEREND:event_lblUserCodeMouseClicked

    }//GEN-LAST:event_lblUserCodeMouseClicked

    private void lblDateMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lblDateMouseClicked
    {//GEN-HEADEREND:event_lblDateMouseClicked

    }//GEN-LAST:event_lblDateMouseClicked

    private void lblHOSignMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_lblHOSignMouseClicked
    {//GEN-HEADEREND:event_lblHOSignMouseClicked

    }//GEN-LAST:event_lblHOSignMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosed
    {//GEN-HEADEREND:event_formWindowClosed
	clsGlobalVarClass.hmActiveForms.remove("Multi Bill Settle");
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
	clsGlobalVarClass.hmActiveForms.remove("Multi Bill Settle");
    }//GEN-LAST:event_formWindowClosing

    private void tblUnSettledBillsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblUnSettledBillsMouseClicked
    {//GEN-HEADEREND:event_tblUnSettledBillsMouseClicked
	if (tblUnSettledBills.getRowCount() > 0)
	{
	    funTblRowClicked();
	}
    }//GEN-LAST:event_tblUnSettledBillsMouseClicked

    private void chkSelectAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chkSelectAllActionPerformed
    {//GEN-HEADEREND:event_chkSelectAllActionPerformed

	funSelectAllBills(chkSelectAll.isSelected());

    }//GEN-LAST:event_chkSelectAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnSettle;
    private javax.swing.JCheckBox chkSelectAll;
    private javax.swing.JComboBox cmbBilledTables;
    private javax.swing.JComboBox cmbSettlementMode;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblHOSign;
    private javax.swing.JLabel lblModuleName;
    private javax.swing.JLabel lblNoOfBills;
    private javax.swing.JLabel lblPosName;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblSettlementMode;
    private javax.swing.JLabel lblTable;
    private javax.swing.JLabel lblTotalAmount;
    private javax.swing.JLabel lblTotalAmountValue;
    private javax.swing.JLabel lblUserCode;
    private javax.swing.JLabel lblformName;
    private javax.swing.JLabel lblnoOfBillsValue;
    private javax.swing.JPanel panelFormBody;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelMainForm;
    private javax.swing.JScrollPane scrollPaneUnSettledBills;
    private javax.swing.JTable tblUnSettledBills;
    // End of variables declaration//GEN-END:variables

    public void funFillUnsettledBills()
    {
	try
	{
//            String arrColumns[] = null;
//            boolean[] canEdit = null;

	    if (clsGlobalVarClass.gShowBillsType.equalsIgnoreCase("Table Detail Wise"))
	    {
		if (clsGlobalVarClass.gCMSIntegrationYN)
		{
		    arrColumns = new String[]
		    {
			"Bill No", "Table", "Waiter", "Member", "Time", "Amount", "Select"
		    };
		    canEdit = new boolean[]
		    {
			false, false, false, false, false, false, true
		    };
		    columnClass = new Class[]
		    {
			java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
		    };
		}
		else
		{
		    arrColumns = new String[]
		    {
			"Bill No", "Table", "Waiter", "Customer", "Time", "Amount", "Select"
		    };
		    canEdit = new boolean[]
		    {
			false, false, false, false, false, false, true
		    };
		    columnClass = new Class[]
		    {
			java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
		    };
		}
	    }
	    else
	    {
		if (clsGlobalVarClass.gCMSIntegrationYN)
		{
		    arrColumns = new String[]
		    {
			"Bill No", "Table", "Member", "Area", "Delivery Boy", "Time", "Amount", "Select"
		    };
		    canEdit = new boolean[]
		    {
			false, false, false, false, false, false, false, true
		    };
		    columnClass = new Class[]
		    {
			java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
		    };
		}
		else
		{
		    arrColumns = new String[]
		    {
			"Bill No", "Table", "Customer", "Area", "Delivery Boy", "Time", "Amount", "Select"
		    };
		    canEdit = new boolean[]
		    {
			false, false, false, false, false, false, false, true
		    };
		    columnClass = new Class[]
		    {
			java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
		    };
		}
	    }

	    DefaultTableModel dmUnSettledBills = new javax.swing.table.DefaultTableModel(
		    new Object[][]
		    {

		    },
		    arrColumns
	    )
	    {

		public boolean isCellEditable(int rowIndex, int columnIndex)
		{
		    return canEdit[columnIndex];
		}

		public Class getColumnClass(int columnIndex)
		{
		    return columnClass[columnIndex];
		}
	    };

	    String sql = "";
	    String tableName = cmbBilledTables.getSelectedItem().toString();
	    if (clsGlobalVarClass.gShowBillsType.equalsIgnoreCase("Table Detail Wise"))
	    {
		sql = "select a.strBillNo,ifnull(b.strTableNo,''),ifnull(b.strTableName,''),ifnull(c.strWaiterNo,'') "
			+ " ,ifnull(c.strWShortName,''),ifnull(d.strCustomerCode,''),ifnull(d.strCustomerName,''),a.dblGrandTotal "
			+ " ,DATE_FORMAT(a.dteBillDate,\"%h:%i\")  "
			+ " from tblbillhd a left outer join tbltablemaster b on a.strTableNo=b.strTableNo "
			+ " left outer join tblwaitermaster c on a.strWaiterNo=c.strWaiterNo "
			+ " left outer join tblcustomermaster d on a.strCustomerCode=d.strCustomerCode "
			+ " where a.strBillNo not in (select strBillNo from tblbillsettlementdtl) "
			+ " and date(a.dteBillDate)='" + clsGlobalVarClass.getOnlyPOSDateForTransaction() + "' "
			+ " and a.strPOSCode='" + clsGlobalVarClass.gPOSCode + "' ";
		if (!tableName.equalsIgnoreCase("All"))
		{
		    String tableCode = mapTableNameWithCode.get(tableName);
		    sql = sql + " and a.strTableNo='" + tableCode + "' ";
		}
	    }
	    else//Delivery Detail Wise
	    {
		sql = "SELECT a.strBillNo,IFNULL(d.strCustomerName,''),ifnull(e.strBuildingName,''),ifnull(f.strDPName,'')"
			+ " ,a.dblGrandTotal,ifnull(g.strTableNo,''),ifnull(g.strTableName,''),DATE_FORMAT(a.dteBillDate,\"%h:%i\") "
			+ " FROM tblbillhd a "
			+ " left outer join tblhomedeldtl b on a.strBillNo=b.strBillNo "
			+ " LEFT OUTER JOIN tblcustomermaster d ON a.strCustomerCode=d.strCustomerCode "
			+ " left outer join tblbuildingmaster e on d.strBuldingCode=e.strBuildingCode "
			+ " left outer join tbldeliverypersonmaster  f on  f.strDPCode=b.strDPCode "
			+ " left outer join tbltablemaster g on a.strTableNo=g.strTableNo "
			+ " WHERE a.strBillNo NOT IN (SELECT strBillNo FROM tblbillsettlementdtl) "
			+ " AND DATE(a.dteBillDate)='" + clsGlobalVarClass.getOnlyPOSDateForTransaction() + "' "
			+ " AND a.strPOSCode='" + clsGlobalVarClass.gPOSCode + "' ";
		if (!tableName.equalsIgnoreCase("All"))
		{
		    String tableCode = mapTableNameWithCode.get(tableName);
		    sql = sql + " and a.strTableNo='" + tableCode + "' ";
		}
		sql = sql + " group by a.strBillNo";
	    }
	    ResultSet rsPendingBills = clsGlobalVarClass.dbMysql.executeResultSet(sql);

	    while (rsPendingBills.next())
	    {
		if (clsGlobalVarClass.gShowBillsType.equalsIgnoreCase("Table Detail Wise"))
		{
		    Object[] ob =
		    {
			rsPendingBills.getString(1), rsPendingBills.getString(3), rsPendingBills.getString(5), rsPendingBills.getString(7), rsPendingBills.getString(9), gDecimalFormat.format(rsPendingBills.getDouble(8)), false
		    };
		    dmUnSettledBills.addRow(ob);
		}
		else//Delivery Detail Wise
		{
		    Object[] ob =
		    {
			rsPendingBills.getString(1), rsPendingBills.getString(7), rsPendingBills.getString(2), rsPendingBills.getString(3), rsPendingBills.getString(4), rsPendingBills.getString(8), gDecimalFormat.format(rsPendingBills.getDouble(5)), false
		    };
		    dmUnSettledBills.addRow(ob);
		}
	    }
	    rsPendingBills.close();

	    tblUnSettledBills.setModel(dmUnSettledBills);
	    tblUnSettledBills.setRowHeight(25);

	    int columnCount = tblUnSettledBills.getColumnCount();
	    for (int c = 0; c < columnCount; c++)
	    {
		tblUnSettledBills.getColumnModel().getColumn(c).setPreferredWidth(100);
	    }

	    this.revalidate();
	    this.repaint();
	}
	catch (Exception e)
	{
	    objUtility.funWriteErrorLog(e);
	    e.printStackTrace();
	}
    }

    private void funTblRowClicked()
    {
	try
	{
	    int intNoOfBills = 0;
	    double dblTotalAmount = 0.00;
	    int lastColumn = tblUnSettledBills.getColumnCount() - 1;

	    for (int row = 0; row < tblUnSettledBills.getRowCount(); row++)
	    {
		if (Boolean.valueOf(tblUnSettledBills.getValueAt(row, lastColumn).toString()))
		{
		    intNoOfBills++;
		    dblTotalAmount += Double.parseDouble(tblUnSettledBills.getValueAt(row, lastColumn - 1).toString());
		}
		else
		{
		    chkSelectAll.setSelected(false);
		}
	    }

	    lblnoOfBillsValue.setText(String.valueOf(intNoOfBills));
	    lblTotalAmountValue.setText(String.valueOf(Math.rint(dblTotalAmount)));
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }

    private void funSettleBills(String settlementMode, String settlementType)
    {
	try
	{
	    int lastColumn = tblUnSettledBills.getColumnCount() - 1;
	    boolean isBillSelected = false;

	    for (int row = 0; row < tblUnSettledBills.getRowCount(); row++)
	    {
		if (Boolean.valueOf(tblUnSettledBills.getValueAt(row, lastColumn).toString()))
		{
		    isBillSelected = true;
		    break;
		}
	    }

	    if (isBillSelected)
	    {

		String complementaryReasonCode = "", complementaryRemarks = "";
		if (settlementType.equalsIgnoreCase("Complementary"))
		{
		    try
		    {
			String sql = "select a.strReasonCode,a.strReasonName,a.strComplementary "
				+ "from tblreasonmaster a where a.strComplementary='Y' ";
			ResultSet rsCompleReasons=clsGlobalVarClass.dbMysql.executeResultSet(sql);
			while(rsCompleReasons.next())
			{
			    vComplReasonCode.add(rsCompleReasons.getString(1));
			    vComplReasonName.add(rsCompleReasons.getString(2));
			}
			rsCompleReasons.close();

			if (vComplReasonCode.size() == 0)
			{
			    JOptionPane.showMessageDialog(this, "Please create complementary reasons.");
			    return;
			}
			else
			{
			    Object[] arrObjReasonCode = vComplReasonCode.toArray();
			    Object[] arrObjReasonName = vComplReasonName.toArray();
			    String selectedReason = (String) JOptionPane.showInputDialog(this, "Please Select Reason?", "Reason", JOptionPane.QUESTION_MESSAGE, null, arrObjReasonName, arrObjReasonName[0]);
			    if (null == selectedReason)
			    {
				JOptionPane.showMessageDialog(this, "Please Select Reason");
				return;
			    }
			    else
			    {
				for (int cntReason = 0; cntReason < vComplReasonCode.size(); cntReason++)
				{
				    if (vComplReasonName.elementAt(cntReason).toString().equals(selectedReason))
				    {
					complementaryReasonCode = vComplReasonCode.elementAt(cntReason).toString();
					break;
				    }
				}
			    }
			}

			if (clsGlobalVarClass.gTouchScreenMode)
			{
			    new frmAlfaNumericKeyBoard(this, true, complementaryRemarks, "1", "Enter Remark").setVisible(true);
			    complementaryRemarks = clsGlobalVarClass.gKeyboardValue;
			}
			else
			{
			    String data = JOptionPane.showInputDialog(null, "Enter Remark");
			    complementaryRemarks = data;
			}
		    }
		    catch (Exception e)
		    {
			objUtility.funWriteErrorLog(e);
			JOptionPane.showMessageDialog(this, e.getMessage(), "Error Code: BS-59", JOptionPane.ERROR_MESSAGE);
			//e.printStackTrace();
		    }
		}

		for (int row = 0; row < tblUnSettledBills.getRowCount(); row++)
		{
		    if (Boolean.valueOf(tblUnSettledBills.getValueAt(row, lastColumn).toString()))
		    {
			String billNo = tblUnSettledBills.getValueAt(row, 0).toString();
			double dblSettleAmt = Double.parseDouble(tblUnSettledBills.getValueAt(row, lastColumn - 1).toString());

			String tableNo = "", tableName = "";
			if (tblUnSettledBills.getValueAt(row, 1) != null || !tblUnSettledBills.getValueAt(row, 1).toString().isEmpty())
			{
			    tableName = tblUnSettledBills.getValueAt(row, 1).toString();
			    tableNo = funGetTableNo(tableName);
			}
			funSettleBill(billNo, tableNo, tableName, dblSettleAmt, settlementMode, settlementType,complementaryReasonCode,complementaryRemarks);
		    }
		}
	    }
	    else
	    {
		new frmOkPopUp(this, "Please Select Bill", "Message", 2).setVisible(true);
		return;
	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }

    private void funSettleBill(String billNo, String tableNo, String tableName, double dblSettleAmt, String settlementMode, String settlementType,String compleReasonCode,String compleRemarks)
    {
	try
	{

	    String posDate = objUtility.funGetPOSDateForTransaction();

	    List<clsBillSettlementDtl> listObjBillSettlementDtl = new ArrayList<clsBillSettlementDtl>();

	    clsBillSettlementDtl objBillSettlementDtl = new clsBillSettlementDtl();
	    objBillSettlementDtl.setStrBillNo(billNo);
	    objBillSettlementDtl.setStrSettlementCode(selectedSingleSettlementCode);
	    objBillSettlementDtl.setDblSettlementAmt(dblSettleAmt);
	    objBillSettlementDtl.setDblPaidAmt(dblSettleAmt);
	    objBillSettlementDtl.setStrExpiryDate("");
	    objBillSettlementDtl.setStrCardName("");
	    objBillSettlementDtl.setStrRemark("Multi Bill Settle");
	    objBillSettlementDtl.setStrClientCode(clsGlobalVarClass.gClientCode);
	    objBillSettlementDtl.setStrCustomerCode("");
	    objBillSettlementDtl.setDblActualAmt(dblSettleAmt);
	    objBillSettlementDtl.setDblRefundAmt(0.00);
	    objBillSettlementDtl.setStrGiftVoucherCode("");
	    objBillSettlementDtl.setStrDataPostFlag("N");

	    listObjBillSettlementDtl.add(objBillSettlementDtl);

	    funInsertBillSettlementDtlTable(billNo, listObjBillSettlementDtl);

	    String sql = "update tblbillhd set strSettelmentMode='" + settlementMode + "' "
		    + ",strUserEdited='" + clsGlobalVarClass.gUserCode + "', dteSettleDate='" + posDate + "' "
		    + ",strRemarks='Multi Bill Settle' "
		    + "where strBillNo='" + billNo + "' and dtBillDate='" + clsGlobalVarClass.gPOSOnlyDateForTransaction + "' ";
	    clsGlobalVarClass.dbMysql.execute(sql);

	    // For Complimentary Bill
	    if(settlementType.equalsIgnoreCase("Complementary"))
	    {
		funClearComplimetaryBillAmt(billNo,compleReasonCode,compleRemarks);
	    }

	    //table status
	    if (!tableNo.isEmpty() && !tableName.isEmpty())
	    {
		String tableStatus = funGetTableStatus(tableNo);
		funUpdateTableStatus(tableNo, tableName, tableStatus);
	    }

	    if (clsGlobalVarClass.gBillSettleSMSYN)
	    {
		objUtility.funSendSMS(billNo, clsGlobalVarClass.gBillSettlementSMS, "");
	    }

	    if (billPrintOnSelectedSingleSettlement)
	    {
		objUtility.funPrintBill(billNo, posDate, false, clsGlobalVarClass.gPOSCode, "print");
	    }

	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }

    private int funInsertBillSettlementDtlTable(String billNo, List<clsBillSettlementDtl> listObjBillSettlementDtl) throws Exception
    {
	String sqlDelete = "delete from tblbillsettlementdtl where strBillNo='" + billNo + "'";
	clsGlobalVarClass.dbMysql.execute(sqlDelete);

	String sqlInsertBillSettlementDtl = "insert into tblbillsettlementdtl"
		+ "(strBillNo,strSettlementCode,dblSettlementAmt,dblPaidAmt,strExpiryDate"
		+ ",strCardName,strRemark,strClientCode,strCustomerCode,dblActualAmt"
		+ ",dblRefundAmt,strGiftVoucherCode,strDataPostFlag,dteBillDate) "
		+ "values ";
	for (clsBillSettlementDtl objBillSettlementDtl : listObjBillSettlementDtl)
	{
	    sqlInsertBillSettlementDtl += "('" + objBillSettlementDtl.getStrBillNo() + "'"
		    + ",'" + objBillSettlementDtl.getStrSettlementCode() + "'," + objBillSettlementDtl.getDblSettlementAmt() + ""
		    + "," + objBillSettlementDtl.getDblPaidAmt() + ",'" + objBillSettlementDtl.getStrExpiryDate() + "'"
		    + ",'" + objBillSettlementDtl.getStrCardName() + "','" + objBillSettlementDtl.getStrRemark() + "'"
		    + ",'" + objBillSettlementDtl.getStrClientCode() + "','" + objBillSettlementDtl.getStrCustomerCode() + "'"
		    + "," + objBillSettlementDtl.getDblActualAmt() + "," + objBillSettlementDtl.getDblRefundAmt() + ""
		    + ",'" + objBillSettlementDtl.getStrGiftVoucherCode() + "','" + objBillSettlementDtl.getStrDataPostFlag() + "'"
		    + ",'" + clsGlobalVarClass.getPOSDateForTransaction() + "'),";
	}
	StringBuilder sb1 = new StringBuilder(sqlInsertBillSettlementDtl);
	int index1 = sb1.lastIndexOf(",");
	sqlInsertBillSettlementDtl = sb1.delete(index1, sb1.length()).toString();
	return clsGlobalVarClass.dbMysql.execute(sqlInsertBillSettlementDtl);
    }

    private void funSetCashSettlementDtl()
    {
	try
	{
	    String selectedSettlementMode = cmbSettlementMode.getSelectedItem().toString();

	    String sql = "select a.strSettelmentCode,a.strSettelmentDesc,a.strBillPrintOnSettlement "
		    + "from tblsettelmenthd a "
		    + "where a.strSettelmentDesc='" + selectedSettlementMode + "' ";
	    ResultSet rsCashSttlementDtl = clsGlobalVarClass.dbMysql.executeResultSet(sql);
	    if (rsCashSttlementDtl.next())
	    {
		selectedSingleSettlementCode = rsCashSttlementDtl.getString(1);
		selectedSingleSettlementName = rsCashSttlementDtl.getString(2);
		if (rsCashSttlementDtl.getString(3).equalsIgnoreCase("Y"))
		{
		    billPrintOnSelectedSingleSettlement = true;
		}
		else
		{
		    billPrintOnSelectedSingleSettlement = false;
		}
	    }
	    rsCashSttlementDtl.close();
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }

    private String funGetTableNo(String tableName)
    {
	String tableNo = "";
	try
	{
	    ResultSet rsTableNo = clsGlobalVarClass.dbMysql.executeResultSet("select a.strTableNo,a.strTableName,a.strStatus,a.strOperational "
		    + "from tbltablemaster a "
		    + "where a.strTableName='" + tableName + "' ");
	    if (rsTableNo.next())
	    {
		tableNo = rsTableNo.getString(1);
	    }
	    rsTableNo.close();
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
	finally
	{
	    return tableNo;
	}
    }

    private String funGetTableStatus(String tableNo)
    {
	String tableStatus = "Normal";
	try
	{
	    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("hh:mm:ss a");

	    String posDate = clsGlobalVarClass.getPOSDateForTransaction().split(" ")[0];
	    String posTime = clsGlobalVarClass.getPOSDateForTransaction().split(" ")[1];

	    String sql = "select a.strCustomerCode,CONCAT(a.tmeResTime,' ',a.strAMPM) as reservationtime from tblreservation a "
		    + " where a.strTableNo='" + tableNo + "' "
		    + " and date(a.dteResDate)='" + posDate + "' "
		    + " order by a.strResCode desc "
		    + " limit 1 ";
	    ResultSet rsReserve = clsGlobalVarClass.dbMysql.executeResultSet(sql);
	    if (rsReserve.next())
	    {
		Date reservationDateTime = simpleDateFormat.parse(rsReserve.getString(2));
		Date posDateTime = new Date();
		String strPOSTime = String.format("%tr", posDateTime);
		posDateTime = simpleDateFormat.parse(strPOSTime);

		if (posDateTime.getTime() > reservationDateTime.getTime())
		{
		    tableStatus = "Normal";
		}
		else
		{
		    tableStatus = "Reserve";
		}
	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
	finally
	{
	    return tableStatus;
	}
    }

    private int funUpdateTableStatus(String tableNo, String tableName, String status)
    {
	try
	{
	    String sql_updateTableStatus = "";

	    if (clsGlobalVarClass.gInrestoPOSIntegrationYN)
	    {
		if (status.equalsIgnoreCase("Reserve"))
		{
		    status = "Normal";
		}
	    }

	    if ("Normal".equalsIgnoreCase(status))
	    {
		sql_updateTableStatus = "select count(*) from tblitemrtemp where strTableNo='" + tableNo + "';";
		ResultSet rsCount = clsGlobalVarClass.dbMysql.executeResultSet(sql_updateTableStatus);
		rsCount.next();
		int count = rsCount.getInt(1);
		rsCount.close();
		if (count == 0)
		{
		    // no table present in tblitemrtemp so update it to normal
		    sql_updateTableStatus = "update tbltablemaster set strStatus='" + status + "',intPaxNo=0 where strTableNo='" + tableNo + "'";
		    clsGlobalVarClass.dbMysql.execute(sql_updateTableStatus);
		}
		else
		{
		    status = "Occupied";
		    sql_updateTableStatus = "update tbltablemaster set strStatus='" + status + "' where strTableNo='" + tableNo + "'";
		    clsGlobalVarClass.dbMysql.execute(sql_updateTableStatus);
		}
	    }
	    else
	    {
		sql_updateTableStatus = "update tbltablemaster set strStatus='" + status + "',intPaxNo=0 where strTableNo='" + tableNo + "'";
		clsGlobalVarClass.dbMysql.execute(sql_updateTableStatus);
	    }

	    //Update Table Status to Inresto POS
	    if (clsGlobalVarClass.gInrestoPOSIntegrationYN)
	    {
		objUtility.funUpdateTableStatusToInrestoApp(tableNo, tableName, status);
	    }

	}
	catch (Exception e)
	{
	    objUtility.funWriteErrorLog(e);
	    //e.printStackTrace();
	    JOptionPane.showMessageDialog(this, e.getMessage(), "Error Code: BS-23", JOptionPane.ERROR_MESSAGE);
	}
	return 0;
    }

    private void funSelectAllBills(boolean isSelected)
    {
	int lastColumn = tblUnSettledBills.getColumnCount() - 1;

	for (int row = 0; row < tblUnSettledBills.getRowCount(); row++)
	{
	    tblUnSettledBills.setValueAt(isSelected, row, lastColumn);
	}

	funTblRowClicked();
    }

    private void funFillSettlementModeCombo()
    {
	try
	{
	    cmbSettlementMode.removeAllItems();
	    mapSettlementNameWithCode.clear();

	    String sqlSettlementModes = "";
	    if (clsGlobalVarClass.gPickSettlementsFromPOSMaster)
	    {
		sqlSettlementModes = "select b.strSettelmentCode,b.strSettelmentDesc,b.strSettelmentType"
			+ " ,b.dblConvertionRatio,b.strBillPrintOnSettlement "
			+ " from tblpossettlementdtl a,tblsettelmenthd b "
			+ " where a.strSettlementCode=b.strSettelmentCode "
			+ " and b.strApplicable='Yes' "
			+ " and b.strBilling='Yes' "
			+ " and (b.strSettelmentType='Cash' or b.strSettelmentType='Credit Card' or b.strSettelmentType='Complementary' ) "
			+ "and a.strPOSCode='" + clsGlobalVarClass.gPOSCode + "' ";
	    }
	    else
	    {
		sqlSettlementModes = "select strSettelmentCode,strSettelmentDesc,strSettelmentType,dblConvertionRatio"
			+ " ,strBillPrintOnSettlement "
			+ " from tblsettelmenthd "
			+ "where strApplicable='Yes' "
			+ "and strBilling='Yes' "
			+ "and (strSettelmentType='Cash' or strSettelmentType='Credit Card' or strSettelmentType='Complementary' ) ";
	    }
	    ResultSet rsSettlements = clsGlobalVarClass.dbMysql.executeResultSet(sqlSettlementModes);
	    int i = 1;
	    while (rsSettlements.next())
	    {
		if (i == 2)
		{
		    cmbSettlementMode.addItem("Part Settle");
		    mapSettlementNameWithCode.put("Part Settle", "Part Settle");
		}

		cmbSettlementMode.addItem(rsSettlements.getString(2));
		mapSettlementNameWithCode.put(rsSettlements.getString(2), rsSettlements.getString(1));

		i++;
	    }
	    rsSettlements.close();

	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}

    }

    private boolean isBillSelected()
    {
	boolean isBillSelected = false;

	try
	{
	    int lastColumn = tblUnSettledBills.getColumnCount() - 1;
	    for (int row = 0; row < tblUnSettledBills.getRowCount(); row++)
	    {
		if (Boolean.valueOf(tblUnSettledBills.getValueAt(row, lastColumn).toString()))
		{
		    isBillSelected = true;
		    break;
		}
	    }
	}
	finally
	{
	    return isBillSelected;
	}
    }

    class TableItemChangeListener implements ItemListener
    {

	@Override
	public void itemStateChanged(ItemEvent event)
	{
	    if (event.getStateChange() == ItemEvent.SELECTED)
	    {
//                Object item = event.getItem().toString();
//                System.out.println("selected item->"+item.toString());                
		funFillUnsettledBills();
	    }
	}
    }

    class SettlementModeChangeListener implements ItemListener
    {

	@Override
	public void itemStateChanged(ItemEvent event)
	{
	    if (event.getStateChange() == ItemEvent.SELECTED)
	    {
		funSetCashSettlementDtl();
	    }
	}
    }

    public void funFillTableCombo()
    {
	try
	{
	    cmbBilledTables.removeAllItems();
	    mapTableNameWithCode.clear();

	    String sql = "select a.strTableNo ,b.strTableName "
		    + "from tblbillhd a,tbltablemaster b "
		    + "where a.strTableNo=b.strTableNo "
		    + "and a.strPOSCode='" + clsGlobalVarClass.gPOSCode + "' "
		    + "and a.strBillNo NOT IN (SELECT strBillNo FROM tblbillsettlementdtl) "
		    + "group by b.strTableNo "
		    + "order by b.strTableNo ";
	    ResultSet rsBilledTables = clsGlobalVarClass.dbMysql.executeResultSet(sql);
	    cmbBilledTables.addItem("All");
	    mapTableNameWithCode.put("All", "All");
	    while (rsBilledTables.next())
	    {
		cmbBilledTables.addItem(rsBilledTables.getString(2));
		mapTableNameWithCode.put(rsBilledTables.getString(2), rsBilledTables.getString(1));
	    }
	    rsBilledTables.close();
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}

    }

    private int funClearComplimetaryBillAmt(String billNo,String compleReasonCode,String compleRemarks) throws Exception
    {

	funInsertBillComplementryDtlTable(billNo);

	String sqlUpdate = "update tblbilltaxdtl set dblTaxableAmount=0.00,dblTaxAmount=0.00 "
		+ "where strBillNo='" + billNo + "'";
	clsGlobalVarClass.dbMysql.execute(sqlUpdate);

	sqlUpdate = "update tblbillhd set dblTaxAmt=0.00,dblSubTotal=0.00"
		+ ",dblDiscountAmt=0.00,dblDiscountPer=0.00,strReasonCode='" + compleReasonCode + "'"
		+ ",strRemarks='" + objUtility.funCheckSpecialCharacters(compleRemarks) + "',dblDeliveryCharges=0.00"
		+ ",strCouponCode='',dblGrandTotal=0.00,dblRoundOff=0.00 "
		+ "where strBillNo='" + billNo + "'";
	clsGlobalVarClass.dbMysql.execute(sqlUpdate);

	sqlUpdate = "update tblbilldtl set dblAmount=0.00,dblDiscountAmt=0.00,dblDiscountPer=0.00,dblTaxAmount=0.00 "
		+ "where strBillNo='" + billNo + "'";
	clsGlobalVarClass.dbMysql.execute(sqlUpdate);

	sqlUpdate = "update tblbillmodifierdtl set dblAmount=0.00,dblDiscPer=0.00,dblDiscAmt=0.00 where strBillNo='" + billNo + "'";
	clsGlobalVarClass.dbMysql.execute(sqlUpdate);

	sqlUpdate = "update tblbillsettlementdtl set dblSettlementAmt=0.00,dblPaidAmt=0.00 where strBillNo='" + billNo + "'";
	clsGlobalVarClass.dbMysql.execute(sqlUpdate);

	sqlUpdate = "update tblbillseriesbilldtl set dblGrandTotal=0.00 where strHdBillNo='" + billNo + "' "
		+ " and strPOSCode='" + clsGlobalVarClass.gPOSCode + "' "
		+ " and date(dteBillDate)='" + clsGlobalVarClass.gPOSOnlyDateForTransaction + "' ";
	clsGlobalVarClass.dbMysql.execute(sqlUpdate);

	clsGlobalVarClass.dbMysql.execute("delete from tblbilldiscdtl where strBillNo='" + billNo + "' ");

	//send modified bill MSG
	String sql = "select a.strSendSMSYN,a.longMobileNo "
		+ "from tblsmssetup a "
		+ "where (a.strPOSCode='" + clsGlobalVarClass.gPOSCode + "' or a.strPOSCode='All') "
		+ "and a.strClientCode='" + clsGlobalVarClass.gClientCode + "' "
		+ "and a.strTransactionName='ComplementaryBill' "
		+ "and a.strSendSMSYN='Y'; ";
	ResultSet rsSendSMS = clsGlobalVarClass.dbMysql.executeResultSet(sql);
	if (rsSendSMS.next())
	{
	    String mobileNo = rsSendSMS.getString(2);//mobileNo

	    funSendComplementaryBillSMS(billNo, mobileNo);

	}
	rsSendSMS.close();

	return 1;
    }

    private int funInsertBillComplementryDtlTable(String billNo) throws Exception
    {
	String sqlDelete = "delete from tblbillcomplementrydtl where strBillNo='" + billNo + "'";
	clsGlobalVarClass.dbMysql.execute(sqlDelete);

	/*
         * String sqlInsertBillComDtl = "insert into tblbillcomplementrydtl " +
         * " select * from tblbilldtl where strBillNo='" + billNo + "' ";
	 */
	String sqlInsertBillComDtl = "insert into tblbillcomplementrydtl(strItemCode,strItemName,strBillNo"
		+ ",strAdvBookingNo,dblRate,dblQuantity,dblAmount,dblTaxAmount,dteBilldate,strKOTNo"
		+ ",strClientCode,strCustomerCode,tmeOrderProcessing,strDataPostFlag,strMMSDataPostFlag"
		+ ",strManualKOTNo,tdhYN,strPromoCode,strCounterCode,strWaiterNo,dblDiscountAmt,dblDiscountPer"
		+ ",strSequenceNo,dtBillDate,tmeOrderPickup)"
		+ " select * from tblbilldtl where strBillNo='" + billNo + "' ";

	int ex = clsGlobalVarClass.dbMysql.execute(sqlInsertBillComDtl);

	return ex;
    }

    private void funSendComplementaryBillSMS(String billNo, String mobileNo)
    {

	try
	{
	    clsUtility2 objUtility2 = new clsUtility2();
	    StringBuilder mainSMSBuilder = new StringBuilder();

	    mainSMSBuilder.append("ComplementaryBill");
	    mainSMSBuilder.append(" ,Bill_No:" + billNo);
	    mainSMSBuilder.append(" ,POS:" + clsGlobalVarClass.gPOSName);
	    mainSMSBuilder.append(" ,User:" + clsGlobalVarClass.gUserCode);

	    String sql = "select a.strBillNo,TIME_FORMAT(time(a.dteBillDate),'%h:%i')time,c.strReasonName,a.strRemarks,sum(b.dblAmount) "
		    + "from tblbillhd a "
		    + "left outer join tblbillcomplementrydtl b on a.strBillNo=b.strBillNo "
		    + "left outer join tblreasonmaster c on a.strReasonCode=c.strReasonCode "
		    + "where a.strBillNo='" + billNo + "' "
		    + "group by a.strBillNo ";
	    ResultSet rsModBill = clsGlobalVarClass.dbMysql.executeResultSet(sql);
	    if (rsModBill.next())
	    {
		mainSMSBuilder.append(" ,Time:" + rsModBill.getString(2));
		mainSMSBuilder.append(" ,Amount:" + gDecimalFormat.format(Math.rint(rsModBill.getDouble(5))));
		mainSMSBuilder.append(" ,Reason:" + rsModBill.getString(3));
		mainSMSBuilder.append(" ,Remarks:" + rsModBill.getString(4));
	    }
	    rsModBill.close();

	    ArrayList<String> mobileNoList = new ArrayList<>();
	    String mobNos[] = mobileNo.split(",");
	    for (String mn : mobNos)
	    {
		mobileNoList.add(mn);
	    }
	    clsSMSSender objSMSSender = new clsSMSSender(mobileNoList, mainSMSBuilder.toString());
	    objSMSSender.start();
	}
	catch (Exception e)
	{
	    objUtility.funWriteErrorLog(e);
	    e.printStackTrace();
	}
    }
}
