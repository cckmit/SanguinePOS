package com.POSGlobal.view;

import com.POSGlobal.controller.clsGlobalVarClass;
import com.POSGlobal.controller.clsUtility;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

public class frmExportTallyInterface extends javax.swing.JFrame
{

    private StringBuilder sqlBuilder;
    private Map<String, String> mapPOSNameCode;
    private clsUtility objUtility;
    private SimpleDateFormat ddMMyyyyDateFormat, yyyyMMddDateFormat;

    public frmExportTallyInterface()
    {
        initComponents();

        try
        {
            Timer timer = new Timer(500, new ActionListener()
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    Date date1 = new Date();
                    String newstr = String.format("%tr", date1);
                    String dateAndTime = clsGlobalVarClass.gPOSDateToDisplay + " " + newstr;
                    lblDate.setText(dateAndTime);
                }
            });
            timer.setRepeats(true);
            timer.setCoalesce(true);
            timer.setInitialDelay(0);
            timer.start();

            lblUserCode.setText(clsGlobalVarClass.gUserCode);
            lblPosName.setText(clsGlobalVarClass.gPOSName);
            lblDate.setText(clsGlobalVarClass.gPOSDateToDisplay);
            lblModuleName.setText(clsGlobalVarClass.gSelectedModule);

            sqlBuilder = new StringBuilder();
            mapPOSNameCode = new HashMap<String, String>();
            objUtility = new clsUtility();
            dteFromDate.setDate(objUtility.funGetDateToSetCalenderDate());
            dteToDate.setDate(objUtility.funGetDateToSetCalenderDate());

            ddMMyyyyDateFormat = new SimpleDateFormat("dd-MM-yyyy");
            yyyyMMddDateFormat = new SimpleDateFormat("yyyy-MM-dd");

            funCreateTallyInterfaceFolder();
            //fill pos combo box
            funFillPOSComboBox();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    private void funCreateTallyInterfaceFolder()
    {
        String filePath = System.getProperty("user.dir");
        File TextKOT = new File(filePath + "/TallyInterface");
        if (!TextKOT.exists())
        {
            TextKOT.mkdirs();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pnlheader = new javax.swing.JPanel();
        lblProductName = new javax.swing.JLabel();
        lblModuleName = new javax.swing.JLabel();
        lblfromName = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblPosName = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblUserCode = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblHOSign = new javax.swing.JLabel();
        pnlBackGround = new JPanel()
        {
            public void paintComponent(Graphics g)
            {
                Image img = Toolkit.getDefaultToolkit().getImage(
                    getClass().getResource("/com/POSReport/images/imgBGJPOS.png"));
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);
            }
        };

        ;
        pnlMain = new javax.swing.JPanel();
        lblCostCenterReport = new javax.swing.JLabel();
        cmbPOSName = new javax.swing.JComboBox();
        lblPOSName = new javax.swing.JLabel();
        dteFromDate = new com.toedter.calendar.JDateChooser();
        dteToDate = new com.toedter.calendar.JDateChooser();
        lblToDate = new javax.swing.JLabel();
        lblFromDate = new javax.swing.JLabel();
        lblReportType = new javax.swing.JLabel();
        cmbReportType = new javax.swing.JComboBox();
        btnExport = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosed(java.awt.event.WindowEvent evt)
            {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        pnlheader.setBackground(new java.awt.Color(69, 164, 238));
        pnlheader.setLayout(new javax.swing.BoxLayout(pnlheader, javax.swing.BoxLayout.LINE_AXIS));

        lblProductName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProductName.setForeground(new java.awt.Color(255, 255, 255));
        lblProductName.setText("SPOS - ");
        pnlheader.add(lblProductName);

        lblModuleName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblModuleName.setForeground(new java.awt.Color(255, 255, 255));
        pnlheader.add(lblModuleName);

        lblfromName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblfromName.setForeground(new java.awt.Color(255, 255, 255));
        lblfromName.setText("-Export Tally Interface");
        pnlheader.add(lblfromName);
        pnlheader.add(filler4);
        pnlheader.add(filler5);

        lblPosName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPosName.setForeground(new java.awt.Color(255, 255, 255));
        lblPosName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPosName.setMaximumSize(new java.awt.Dimension(321, 30));
        lblPosName.setMinimumSize(new java.awt.Dimension(321, 30));
        lblPosName.setPreferredSize(new java.awt.Dimension(321, 30));
        pnlheader.add(lblPosName);
        pnlheader.add(filler6);

        lblUserCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUserCode.setForeground(new java.awt.Color(255, 255, 255));
        lblUserCode.setMaximumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setMinimumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setPreferredSize(new java.awt.Dimension(90, 30));
        pnlheader.add(lblUserCode);

        lblDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setMaximumSize(new java.awt.Dimension(192, 30));
        lblDate.setMinimumSize(new java.awt.Dimension(192, 30));
        lblDate.setPreferredSize(new java.awt.Dimension(192, 30));
        pnlheader.add(lblDate);

        lblHOSign.setMaximumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setMinimumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setPreferredSize(new java.awt.Dimension(34, 30));
        pnlheader.add(lblHOSign);

        getContentPane().add(pnlheader, java.awt.BorderLayout.PAGE_START);

        pnlBackGround.setOpaque(false);
        pnlBackGround.setLayout(new java.awt.GridBagLayout());

        pnlMain.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        pnlMain.setMinimumSize(new java.awt.Dimension(800, 570));
        pnlMain.setOpaque(false);

        lblCostCenterReport.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblCostCenterReport.setText("Export Tally Interface");

        cmbPOSName.setBackground(new java.awt.Color(51, 102, 255));
        cmbPOSName.setForeground(new java.awt.Color(255, 255, 255));
        cmbPOSName.setToolTipText("Select POS");
        cmbPOSName.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbPOSNameActionPerformed(evt);
            }
        });

        lblPOSName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPOSName.setText("POS Name             :");

        dteFromDate.setToolTipText("Select From Date");

        dteToDate.setToolTipText("Select To Date");

        lblToDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblToDate.setText("To Date                 :");

        lblFromDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblFromDate.setText("From Date             :");

        lblReportType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblReportType.setText("Report Type           :");

        cmbReportType.setBackground(new java.awt.Color(51, 102, 255));
        cmbReportType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Summary", "Detail" }));
        cmbReportType.setToolTipText("Select POS");

        btnExport.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnExport.setForeground(new java.awt.Color(255, 255, 255));
        btnExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn1.png"))); // NOI18N
        btnExport.setText("Export");
        btnExport.setToolTipText("Save Group Master");
        btnExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExport.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn2.png"))); // NOI18N
        btnExport.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnExportMouseClicked(evt);
            }
        });
        btnExport.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnExportActionPerformed(evt);
            }
        });
        btnExport.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                btnExportKeyPressed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn1.png"))); // NOI18N
        btnReset.setText("RESET");
        btnReset.setToolTipText("Reset All Fields");
        btnReset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReset.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn2.png"))); // NOI18N
        btnReset.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnResetMouseClicked(evt);
            }
        });
        btnReset.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnResetActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn1.png"))); // NOI18N
        btnCancel.setText("CLOSE");
        btnCancel.setToolTipText("Close Group Master");
        btnCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancel.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn2.png"))); // NOI18N
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnCancelMouseClicked(evt);
            }
        });
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(lblPOSName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(cmbPOSName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(lblFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(dteFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(lblToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(dteToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(lblReportType, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbReportType, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addComponent(lblCostCenterReport)))
                .addContainerGap(256, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(236, 236, 236))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblCostCenterReport, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPOSName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbPOSName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dteFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dteToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblReportType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbReportType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(173, Short.MAX_VALUE))
        );

        pnlBackGround.add(pnlMain, new java.awt.GridBagConstraints());

        getContentPane().add(pnlBackGround, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        clsGlobalVarClass.hmActiveForms.remove("Export Tally Interface");
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        clsGlobalVarClass.hmActiveForms.remove("Export Tally Interface");
    }//GEN-LAST:event_formWindowClosing

    private void cmbPOSNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbPOSNameActionPerformed
    {//GEN-HEADEREND:event_cmbPOSNameActionPerformed

    }//GEN-LAST:event_cmbPOSNameActionPerformed

    private void btnExportMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnExportMouseClicked
    {//GEN-HEADEREND:event_btnExportMouseClicked
        if (btnExport.isEnabled())
        {
            funExportTallyInterface();
        }
    }//GEN-LAST:event_btnExportMouseClicked

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnExportActionPerformed
    {//GEN-HEADEREND:event_btnExportActionPerformed

    }//GEN-LAST:event_btnExportActionPerformed

    private void btnExportKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_btnExportKeyPressed
    {//GEN-HEADEREND:event_btnExportKeyPressed

    }//GEN-LAST:event_btnExportKeyPressed

    private void btnResetMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnResetMouseClicked
    {//GEN-HEADEREND:event_btnResetMouseClicked

    }//GEN-LAST:event_btnResetMouseClicked

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnResetActionPerformed
    {//GEN-HEADEREND:event_btnResetActionPerformed

    }//GEN-LAST:event_btnResetActionPerformed

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnCancelMouseClicked
    {//GEN-HEADEREND:event_btnCancelMouseClicked
        // TODO add your handling code here:
        dispose();
        clsGlobalVarClass.hmActiveForms.remove("Export Tally Interface");
    }//GEN-LAST:event_btnCancelMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCancelActionPerformed
    {//GEN-HEADEREND:event_btnCancelActionPerformed
        // TODO add your handling code here:
        dispose();
        clsGlobalVarClass.hmActiveForms.remove("Export Tally Interface");
    }//GEN-LAST:event_btnCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(frmExportTallyInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(frmExportTallyInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(frmExportTallyInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(frmExportTallyInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new frmExportTallyInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox cmbPOSName;
    private javax.swing.JComboBox cmbReportType;
    private com.toedter.calendar.JDateChooser dteFromDate;
    private com.toedter.calendar.JDateChooser dteToDate;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.JLabel lblCostCenterReport;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblFromDate;
    private javax.swing.JLabel lblHOSign;
    private javax.swing.JLabel lblModuleName;
    private javax.swing.JLabel lblPOSName;
    private javax.swing.JLabel lblPosName;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblReportType;
    private javax.swing.JLabel lblToDate;
    private javax.swing.JLabel lblUserCode;
    private javax.swing.JLabel lblfromName;
    private javax.swing.JPanel pnlBackGround;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlheader;
    // End of variables declaration//GEN-END:variables
     private void funFillPOSComboBox()
    {
        try
        {

            if (clsGlobalVarClass.gShowOnlyLoginPOSReports)
            {
                cmbPOSName.addItem(clsGlobalVarClass.gPOSName);//posName
                mapPOSNameCode.put(clsGlobalVarClass.gPOSName, clsGlobalVarClass.gPOSCode);//posName->posCode
            }
            else
            {
                sqlBuilder.setLength(0);
                sqlBuilder.append("select a.strPosCode,a.strPosName,a.strOperationalYN "
                        + "from tblposmaster a "
                        + "where a.strOperationalYN='Y' ");
                ResultSet rsPOS = clsGlobalVarClass.dbMysql.executeResultSet(sqlBuilder.toString());
                while (rsPOS.next())
                {
                    cmbPOSName.addItem(rsPOS.getString(2));//posName
                    mapPOSNameCode.put(rsPOS.getString(2), rsPOS.getString(1));//posName->posCode
                }
                rsPOS.close();
            }

        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    private String funGetPOSCode(String posName)
    {
        return mapPOSNameCode.get(posName);
    }

    private void funExportTallyInterface()
    {
        if (cmbReportType.getSelectedItem().toString().equalsIgnoreCase("Summary"))
        {
            //funExportSummaryTallyInterface();
        }
        else
        {

        }
    }

//    private void funExportSummaryTallyInterface()
//    {
//        String fromDate=yyyyMMddDateFormat.format(dteFromDate.getDate());
//        String toDate=yyyyMMddDateFormat.format(dteToDate.getDate());
//        
//        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
//        DocumentBuilder dBuilder;
//
//        String posCode = funGetPOSCode(cmbPOSName.getSelectedItem().toString());
//        String posName = cmbPOSName.getSelectedItem().toString();
//        String fromDateToDisplay = ddMMyyyyDateFormat.format(dteFromDate.getDate());
//        String toDateToDisplay = ddMMyyyyDateFormat.format(dteToDate.getDate());
//
//        String fileName = System.getProperty("user.dir") + "\\TallyInterface\\" + posName + "\\_" + fromDateToDisplay + "_" + toDateToDisplay +"_Summary"+ ".xml";
//        try
//        {
//            dBuilder = dbFactory.newDocumentBuilder();
//            Document doc = dBuilder.newDocument();
//            //add elements to Document
//            Element envelopeElement = doc.createElement("ENVELOPE");
//            doc.appendChild(envelopeElement);
//
//            envelopeElement.appendChild(getHeader(doc, "1", "Import", "Data", "Vouchers")); // for Header
//
//            Element bodyElement = doc.createElement("BODY");
//
//            envelopeElement.appendChild(bodyElement);
//
//            bodyElement.appendChild(getDes(doc, "")); //For Desc body
//
//            Element data = doc.createElement("DATA");
//            //append root element to document
//            bodyElement.appendChild(data);
//
//            Element tallyMessage = doc.createElement("TALLYMESSAGE");
//
//            data.appendChild(tallyMessage);
//
//            String sql = " select a.strInvCode,a.strCustCode,b.strPName,date(a.dteInvDate),a.dblGrandTotal "
//                    + " from tblinvoicehd a , tblpartymaster b "
//                    + " where a.strCustCode=b.strPCode and "
//                    + " date(a.dteInvDate) between '" + objBean.getDteFromDate() + "' and '" + objBean.getDteToDate() + "' "
//                    + " and a.strClientCode='" + clientCode + "' "
//                    + " and b.strClientCode='" + clientCode + "' ";
//            System.out.println("mainSaleData=" + sql);
//            List list = objGlobalService.funGetList(sql);
//            for (int cnt = 0; cnt < list.size(); cnt++)
//            {
//                Object[] arrObj = (Object[]) list.get(cnt);
//                String invCode = arrObj[0].toString();
//                String strCustCode = arrObj[1].toString();
//                String strPName = arrObj[2].toString();
//                String PNameAndCode = strPName + "  (" + strCustCode + ")";
//                String dtInvDate = arrObj[3].toString();
//                String invDate = dtInvDate.split("-")[0] + dtInvDate.split("-")[1] + dtInvDate.split("-")[2];
//
//                String dblGTotal = arrObj[4].toString();
//                int vNo = cnt + 1;
//
//                tallyMessage.appendChild(getSaleData(doc, String.valueOf(vNo), invDate, invCode, "No", String.valueOf(vNo), invCode, PNameAndCode, "No", dblGTotal, objBean, clientCode));
//
//            }
//
//            //append first child element to root element
//            //  tallyMessage.appendChild(getData(doc, "1", "20160710", "Bill No 1012ee", "NO", "01" ,"01GRAG000043", "VIRCHAND KHIMJI  AND CO. (S000049)","No","2055.00" ));
//            // //append second child
//            //  tallyMessage.appendChild(getData(doc, "2", "20160710", "Bill No 101215", "Yes", "02" ,"01GRAG000049", "VIN VIN ENTERPRISES. (S000053)","No","1075.2000" ));
//            //for output to file, console
//            TransformerFactory transformerFactory = TransformerFactory.newInstance();
//            Transformer transformer = transformerFactory.newTransformer();
//            //for pretty print
//            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
//            DOMSource source = new DOMSource(doc);
//
//            //write to console or file
//            StreamResult console = new StreamResult(System.out);
//            System.out.println(fileName);
//
//            StreamResult file = new StreamResult(new File(fileName).getAbsolutePath());
//
//            //write data
//            transformer.transform(source, console);
//            transformer.transform(source, file);
//            System.out.println("DONE");
//
//        }
//        catch (Exception e)
//        {
//            e.printStackTrace();
//        }
//    }
    private Node getHeader(Document doc, String version, String tallyreq, String type, String id)
    {
        Element headerElement = doc.createElement("HEADER");
        headerElement.appendChild(getVoucherElements(doc, headerElement, "VERSION", version));
        headerElement.appendChild(getVoucherElements(doc, headerElement, "TALLYREQUEST", tallyreq));
        headerElement.appendChild(getVoucherElements(doc, headerElement, "TYPE", type));
        headerElement.appendChild(getVoucherElements(doc, headerElement, "ID", id));

        return headerElement;
    }

    private Node getDes(Document doc, String desc)
    {

        Element descElement = doc.createElement("DESC");
        //descElement.appendChild(getVoucherElements(doc, descElement, "", desc));
        return descElement;
    }

    private Node getVoucherElements(Document doc, Element element, String name, String value)
    {
        Element node = doc.createElement(name);
        node.appendChild(doc.createTextNode(value));
        return node;
    }

//    private Node getSaleData(Document doc, String id, String date, String invCode, String typeSP, String vCount, String invNo, String strCustName, String isDeempositive, String dblGrandTotal, clsReportBean objBean, String clientCode)
//    {
//        Element voucher = doc.createElement("VOUCHER");
//
////	        //set id attribute
////	        employee.setAttribute("id", id);
//        //create DATE element
//        voucher.appendChild(getVoucherElements(doc, voucher, "DATE", date));
//
//        //create NARRATION element
//        voucher.appendChild(getVoucherElements(doc, voucher, "NARRATION", invNo));
//
//        //create VOUCHERTYPENAME element 
//        voucher.appendChild(getVoucherElements(doc, voucher, "VOUCHERTYPENAME", typeSP));
//
//        //create VOUCHERNUMBER element
//        voucher.appendChild(getVoucherElements(doc, voucher, "VOUCHERNUMBER", vCount));
//
//        voucher.appendChild(getVoucherElements(doc, voucher, "REFERENCE", invCode));
//
//        Element allLedgerEntriesList = doc.createElement("ALLLEDGERENTRIES.LIST");
//
//        allLedgerEntriesList.appendChild(getLederEnteriesElements(doc, allLedgerEntriesList, "LEDGERNAME", strCustName));
//
//        allLedgerEntriesList.appendChild(getLederEnteriesElements(doc, allLedgerEntriesList, "ISDEEMEDPOSITIVE", isDeempositive));
//
//        allLedgerEntriesList.appendChild(getLederEnteriesElements(doc, allLedgerEntriesList, "AMOUNT", dblGrandTotal));
//
//        // for Bill 
//        Element billAlloctionList = doc.createElement("BILLALLOCATIONS.LIST");
//        billAlloctionList.appendChild(getLederEnteriesElements(doc, billAlloctionList, "NAME", "49193"));
//        billAlloctionList.appendChild(getLederEnteriesElements(doc, billAlloctionList, "BILLTYPE", "Direct"));
//        billAlloctionList.appendChild(getLederEnteriesElements(doc, billAlloctionList, "AMOUNT", dblGrandTotal));
//        allLedgerEntriesList.appendChild(billAlloctionList);
//
//        voucher.appendChild(allLedgerEntriesList);
//        // for percentage 
//
//        String sql = " select b.strTaxDesc,b.dblTaxableAmt from tblinvoicehd a , tblinvtaxdtl b "
//                + " where a.strInvCode=b.strInvCode and date(a.dteInvDate) between '" + objBean.getDteFromDate() + "' and '" + objBean.getDteToDate() + "' "
//                + " and a.strClientCode='" + clientCode + "' and b.strClientCode='" + clientCode + "'   ";
//        System.out.println("PerData=" + sql);
//        List list = objGlobalService.funGetList(sql);
//        for (int cnt = 0; cnt < list.size(); cnt++)
//        {
//            Object[] arrObj = (Object[]) list.get(cnt);
//            String strTaxDesc = arrObj[0].toString();
//            String strTaxableAmt = arrObj[1].toString();
//
//            Element allLedgerEntriesListPercent = doc.createElement("ALLLEDGERENTRIES.LIST");
//
//            allLedgerEntriesListPercent.appendChild(getLederEnteriesElements(doc, allLedgerEntriesListPercent, "LEDGERNAME", strTaxDesc));
//
//            allLedgerEntriesListPercent.appendChild(getLederEnteriesElements(doc, allLedgerEntriesListPercent, "ISDEEMEDPOSITIVE", isDeempositive));
//
//            allLedgerEntriesListPercent.appendChild(getLederEnteriesElements(doc, allLedgerEntriesListPercent, "AMOUNT", strTaxableAmt));
//
//            voucher.appendChild(allLedgerEntriesListPercent);
//
//        }
//
//        return voucher;
//    }
    private Node getLederEnteriesElements(Document doc, Element element, String name, String ledgerName)
    {
        Element node = doc.createElement(name);
        node.appendChild(doc.createTextNode(ledgerName));
        return node;
    }

}
