/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.POSGlobal.view;

import com.POSGlobal.controller.clsBackupDatabase;
import com.POSGlobal.controller.clsGlobalSingleObject;
import com.POSGlobal.controller.clsGlobalVarClass;
import com.POSGlobal.controller.clsPosConfigFile;
import com.POSGlobal.controller.clsUtility;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Jai chandra
 */
public class frmClearTransaction extends javax.swing.JFrame
{

    private final DefaultTableModel tblFormTableModel;
    private final JCheckBox chkBoxSelectAll;
    private final int rowCount;
    private String username;
    private ArrayList<String> truncateFormList;
    private String fromDate, toDate;
    private Date dt1, dt2;
    private String posCode;

    public frmClearTransaction()
    {

        initComponents();

        Timer timer = new Timer(500, new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                Date date1 = new Date();
                String new_str = String.format("%tr", date1);
                String dateAndTime = clsGlobalVarClass.gPOSDateToDisplay + " " + new_str;
                lblDate.setText(dateAndTime);
            }
        });
        timer.setRepeats(true);
        timer.setCoalesce(true);
        timer.setInitialDelay(0);
        timer.start();

        lblUserCode.setText(clsGlobalVarClass.gUserCode);
        lblPosName.setText(clsGlobalVarClass.gPOSName);
        lblDate.setText(clsGlobalVarClass.gPOSDateToDisplay);
        lblModuleName.setText(clsGlobalVarClass.gSelectedModule);

        tblFormTableModel = (DefaultTableModel) tblFormTable.getModel();

        try
        {
            funFillComboBox();
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        funSetData();

        tblFormTable.getColumnModel().getColumn(1).setMinWidth(135);
        tblFormTable.getColumnModel().getColumn(1).setPreferredWidth(135);
        tblFormTable.getColumnModel().getColumn(1).setMaxWidth(135);

        rowCount = tblFormTableModel.getRowCount();

        chkBoxSelectAll = new JCheckBox("Select All");
        chkBoxSelectAll.setSelected(false);
        chkBoxSelectAll.addActionListener(new ActionListener()
        {

            @Override
            public void actionPerformed(ActionEvent e)
            {

                if (chkBoxSelectAll.isSelected())
                {
                    for (int i = 0; i < rowCount; i++)
                    {
                        tblFormTableModel.setValueAt(Boolean.parseBoolean("true"), i, 1);
                    }
                }
                else
                {
                    for (int i = 0; i < rowCount; i++)
                    {
                        tblFormTableModel.setValueAt(Boolean.parseBoolean("false"), i, 1);
                    }
                }
            }
        });
        TableColumnModel columnModel = tblFormTable.getColumnModel();
        JTableHeader header = tblFormTable.getTableHeader();
        header.add(chkBoxSelectAll);
        header.setLayout(new FlowLayout(FlowLayout.RIGHT));

        if (rowCount < 1)
        {
            JOptionPane.showMessageDialog(null, "No data found !!!");
            return;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        panelUserAuthentication = new javax.swing.JPanel();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        panelHeader = new javax.swing.JPanel();
        lblProductName = new javax.swing.JLabel();
        lblModuleName = new javax.swing.JLabel();
        lblformName = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblPosName = new javax.swing.JLabel();
        lblUserCode = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblDate = new javax.swing.JLabel();
        lblHOSign = new javax.swing.JLabel();
        panelLayout = new JPanel() {  
            public void paintComponent(Graphics g) {  
                Image img = Toolkit.getDefaultToolkit().getImage(  
                    getClass().getResource("/com/POSGlobal/images/imgBGJPOS.png"));  
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);  
            }  
        };  ;
        panelBody = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        tblFormTable = new javax.swing.JTable();
        lblFromDate = new javax.swing.JLabel();
        dteFromDate = new com.toedter.calendar.JDateChooser();
        lblToDate = new javax.swing.JLabel();
        dteToDate = new com.toedter.calendar.JDateChooser();
        lblposname = new javax.swing.JLabel();
        cmbPosCode = new javax.swing.JComboBox();
        chkClearAllData = new javax.swing.JCheckBox();

        lblUsername.setText("Enter a Username:");

        lblPassword.setText("Enter a Password:");

        txtUsername.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                txtUsernameMouseClicked(evt);
            }
        });
        txtUsername.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txtUsernameActionPerformed(evt);
            }
        });
        txtUsername.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                txtUsernameKeyPressed(evt);
            }
        });

        txtPassword.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                txtPasswordMouseClicked(evt);
            }
        });
        txtPassword.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                txtPasswordKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout panelUserAuthenticationLayout = new javax.swing.GroupLayout(panelUserAuthentication);
        panelUserAuthentication.setLayout(panelUserAuthenticationLayout);
        panelUserAuthenticationLayout.setHorizontalGroup(
            panelUserAuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUserAuthenticationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUserAuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUserAuthenticationLayout.createSequentialGroup()
                        .addComponent(lblPassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(panelUserAuthenticationLayout.createSequentialGroup()
                        .addComponent(lblUsername)
                        .addGap(2, 2, 2)))
                .addGroup(panelUserAuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtUsername)
                    .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelUserAuthenticationLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtPassword, txtUsername});

        panelUserAuthenticationLayout.setVerticalGroup(
            panelUserAuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUserAuthenticationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUserAuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelUserAuthenticationLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtUsername)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUserAuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelUserAuthenticationLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtPassword, txtUsername});

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setUndecorated(true);

        panelHeader.setBackground(new java.awt.Color(69, 164, 238));
        panelHeader.setLayout(new javax.swing.BoxLayout(panelHeader, javax.swing.BoxLayout.LINE_AXIS));

        lblProductName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProductName.setForeground(new java.awt.Color(255, 255, 255));
        lblProductName.setText("SPOS -");
        panelHeader.add(lblProductName);

        lblModuleName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblModuleName.setForeground(new java.awt.Color(255, 255, 255));
        panelHeader.add(lblModuleName);

        lblformName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblformName.setForeground(new java.awt.Color(255, 255, 255));
        lblformName.setText(" - Clear Transaction");
        panelHeader.add(lblformName);
        panelHeader.add(filler4);
        panelHeader.add(filler5);

        lblPosName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPosName.setForeground(new java.awt.Color(255, 255, 255));
        lblPosName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPosName.setMaximumSize(new java.awt.Dimension(321, 30));
        lblPosName.setMinimumSize(new java.awt.Dimension(321, 30));
        lblPosName.setPreferredSize(new java.awt.Dimension(321, 30));
        panelHeader.add(lblPosName);

        lblUserCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUserCode.setForeground(new java.awt.Color(255, 255, 255));
        lblUserCode.setMaximumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setMinimumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setPreferredSize(new java.awt.Dimension(90, 30));
        panelHeader.add(lblUserCode);
        panelHeader.add(filler6);

        lblDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setMaximumSize(new java.awt.Dimension(192, 30));
        lblDate.setMinimumSize(new java.awt.Dimension(192, 30));
        lblDate.setPreferredSize(new java.awt.Dimension(192, 30));
        panelHeader.add(lblDate);

        lblHOSign.setMaximumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setMinimumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setPreferredSize(new java.awt.Dimension(34, 30));
        panelHeader.add(lblHOSign);

        getContentPane().add(panelHeader, java.awt.BorderLayout.PAGE_START);

        panelLayout.setBackground(new java.awt.Color(255, 255, 255));
        panelLayout.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelLayout.setMinimumSize(new java.awt.Dimension(800, 570));
        panelLayout.setOpaque(false);
        panelLayout.setPreferredSize(new java.awt.Dimension(800, 570));
        panelLayout.setLayout(new java.awt.GridBagLayout());

        panelBody.setBackground(new java.awt.Color(255, 255, 255));
        panelBody.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelBody.setMinimumSize(new java.awt.Dimension(800, 570));
        panelBody.setOpaque(false);

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn1.png"))); // NOI18N
        btnSave.setText("CLEAR");
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn2.png"))); // NOI18N
        btnSave.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnSaveMouseClicked(evt);
            }
        });
        btnSave.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnSaveActionPerformed(evt);
            }
        });
        btnSave.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                btnSaveKeyPressed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn1.png"))); // NOI18N
        btnCancel.setText("CLOSE");
        btnCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancel.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn2.png"))); // NOI18N
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnCancelMouseClicked(evt);
            }
        });
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        tblFormTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Module Name", "Select"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tblFormTable.getTableHeader().setReorderingAllowed(false);
        //tblFormTable.setBackground(Color.LIGHT_GRAY);
        //tblFormTable.setForeground(Color.blue);
        tblFormTable.setRowHeight(24);
        tblFormTable.setFont(new Font("Arial", Font.BOLD, 14));
        scrollPane.setViewportView(tblFormTable);
        if (tblFormTable.getColumnModel().getColumnCount() > 0)
        {
            tblFormTable.getColumnModel().getColumn(1).setMinWidth(135);
            tblFormTable.getColumnModel().getColumn(1).setPreferredWidth(135);
            tblFormTable.getColumnModel().getColumn(1).setMaxWidth(135);
        }

        lblFromDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblFromDate.setText("From Date :");

        dteFromDate.setToolTipText("Select From Date");
        dteFromDate.setPreferredSize(new java.awt.Dimension(119, 35));
        dteFromDate.addHierarchyListener(new java.awt.event.HierarchyListener()
        {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt)
            {
                dteFromDateHierarchyChanged(evt);
            }
        });
        dteFromDate.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                dteFromDatePropertyChange(evt);
            }
        });

        lblToDate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblToDate.setText("To :");

        dteToDate.setToolTipText("Select From Date");
        dteToDate.setPreferredSize(new java.awt.Dimension(119, 35));
        dteToDate.addHierarchyListener(new java.awt.event.HierarchyListener()
        {
            public void hierarchyChanged(java.awt.event.HierarchyEvent evt)
            {
                dteToDateHierarchyChanged(evt);
            }
        });
        dteToDate.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                dteToDatePropertyChange(evt);
            }
        });

        lblposname.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblposname.setText("POS Name :");

        cmbPosCode.setToolTipText("Select POS");

        chkClearAllData.setText("Clear All Data");
        chkClearAllData.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout panelBodyLayout = new javax.swing.GroupLayout(panelBody);
        panelBody.setLayout(panelBodyLayout);
        panelBodyLayout.setHorizontalGroup(
            panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBodyLayout.createSequentialGroup()
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBodyLayout.createSequentialGroup()
                        .addComponent(lblposname, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbPosCode, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dteFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dteToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkClearAllData))
                    .addGroup(panelBodyLayout.createSequentialGroup()
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 708, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        panelBodyLayout.setVerticalGroup(
            panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBodyLayout.createSequentialGroup()
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblFromDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblposname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dteToDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblToDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbPosCode)
                    .addGroup(panelBodyLayout.createSequentialGroup()
                        .addComponent(dteFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(chkClearAllData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelBodyLayout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        panelLayout.add(panelBody, new java.awt.GridBagConstraints());

        getContentPane().add(panelLayout, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void funbtnSavePressed()
    {
        try
        {

            if (chkClearAllData.isSelected())//clear all data
            {
                clsBackupDatabase objDBBackup = new clsBackupDatabase();
                objDBBackup.funTakeBackUpDB();

                funTruncateAllTransactionData();

                boolean flag = funUpdateTableStatus();

                JOptionPane.showMessageDialog(null, "Tables are cleared !!");
                funSaveUserTruncationDtl();
                chkBoxSelectAll.setSelected(false);
                funSetData();

                chkBoxSelectAll.setSelected(false);
                chkClearAllData.setSelected(false);

            }
            else
            {
                truncateFormList = new ArrayList<String>();
                truncateFormList.clear();
                for (int i = 0; i < rowCount; i++)
                {
                    if ("true".equalsIgnoreCase(String.valueOf(tblFormTableModel.getValueAt(i, 1))))
                    {
                        truncateFormList.add(String.valueOf(tblFormTableModel.getValueAt(i, 0)));
                    }
                }
                if (truncateFormList.size() > 0)
                {
                    boolean flag = funTruncateTables(truncateFormList);
                    if (flag)
                    {
                        clsBackupDatabase objDBBackup = new clsBackupDatabase();
                        objDBBackup.funTakeBackUpDB();

                        flag = funUpdateTableStatus();

                        JOptionPane.showMessageDialog(null, "Tables are cleared !!");
                        funSaveUserTruncationDtl();
                        chkBoxSelectAll.setSelected(false);
                        funSetData();

                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "No table found !!");
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Please select table for truncation!!!");
                }
            }
        }
        catch (Exception e)
        {
            clsGlobalVarClass.gLog.error(e);
        }
    }
    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked

//        boolean flag = funCheckUserAuthentication();
//        funResetFields();
//        if (flag)
//        {
//            int i = JOptionPane.showConfirmDialog(null, "Do You Want To Clear Transactions.", "Clear Transactions!!!", JOptionPane.OK_CANCEL_OPTION);
//            System.out.println("i=" + i);
//            funbtnSavePressed();
//        }
    }//GEN-LAST:event_btnSaveMouseClicked

    private void btnSaveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSaveKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnSaveKeyPressed

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCancelMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        boolean flag = funCheckUserAuthentication();

        if (flag)
        {
            int i = JOptionPane.showConfirmDialog(null, "Do You Want To Clear Transactions.", "Clear Transactions!!!", JOptionPane.YES_NO_OPTION);
            if (i == 0)
            {
                funResetFields();
                funbtnSavePressed();
            }
            else
            {
                funResetFields();
                return;
            }
        }
        else
        {
            funResetFields();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void txtUsernameMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_txtUsernameMouseClicked
    {//GEN-HEADEREND:event_txtUsernameMouseClicked
        if (clsGlobalVarClass.gTouchScreenMode)
        {
            if (txtUsername.getText().length() == 0)
            {
                new frmAlfaNumericKeyBoard(this, true, "1", "Enter User Name.").setVisible(true);
                txtUsername.setText(clsGlobalVarClass.gKeyboardValue);
            }
            else
            {
                new frmAlfaNumericKeyBoard(this, true, txtUsername.getText(), "1", "Enter User Name.").setVisible(true);
                txtUsername.setText(clsGlobalVarClass.gKeyboardValue);
            }
        }
    }//GEN-LAST:event_txtUsernameMouseClicked

    private void txtPasswordMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_txtPasswordMouseClicked
    {//GEN-HEADEREND:event_txtPasswordMouseClicked
        if (txtPassword.getPassword().length == 0)
        {
            new frmAlfaNumericKeyBoard(this, true, "1", "Enter  Password.").setVisible(true);
            txtPassword.setText(clsGlobalVarClass.gKeyboardValue);
        }
        else
        {
            new frmAlfaNumericKeyBoard(this, true, txtPassword.getPassword().toString(), "1", "Enter Password.").setVisible(true);
            txtPassword.setText(clsGlobalVarClass.gKeyboardValue);
        }
    }//GEN-LAST:event_txtPasswordMouseClicked

    private void dteFromDateHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_dteFromDateHierarchyChanged

    }//GEN-LAST:event_dteFromDateHierarchyChanged

    private void dteFromDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dteFromDatePropertyChange

    }//GEN-LAST:event_dteFromDatePropertyChange

    private void dteToDateHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_dteToDateHierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_dteToDateHierarchyChanged

    private void dteToDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dteToDatePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_dteToDatePropertyChange

    private void txtUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            txtPassword.requestFocus();
        }
    }//GEN-LAST:event_txtUsernameKeyPressed

    private void txtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            boolean flag = funOkButtonPressed();
            if (flag)
            {
                funCloseAuthenticationDialog();
                int i = JOptionPane.showConfirmDialog(null, "Do You Want To Clear Transactions.", "Clear Transactions!!!", JOptionPane.OK_CANCEL_OPTION);
                System.out.println("i=" + i);
                funbtnSavePressed();
            }
            else
            {
                funResetFields();
            }
        }
    }//GEN-LAST:event_txtPasswordKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            clsGlobalVarClass.gLog.error(ex);
        }
        catch (InstantiationException ex)
        {
            clsGlobalVarClass.gLog.error(ex);
        }
        catch (IllegalAccessException ex)
        {
            clsGlobalVarClass.gLog.error(ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            clsGlobalVarClass.gLog.error(ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new frmClearTransaction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox chkClearAllData;
    private javax.swing.JComboBox cmbPosCode;
    private com.toedter.calendar.JDateChooser dteFromDate;
    private com.toedter.calendar.JDateChooser dteToDate;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblFromDate;
    private javax.swing.JLabel lblHOSign;
    private javax.swing.JLabel lblModuleName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPosName;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblToDate;
    private javax.swing.JLabel lblUserCode;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblformName;
    private javax.swing.JLabel lblposname;
    private javax.swing.JPanel panelBody;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelLayout;
    private javax.swing.JPanel panelUserAuthentication;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tblFormTable;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private void funSetData()
    {

//        try {
//            String sql = "select a.strFormName ,a.strModuleName from tblforms  a where a.strModuleType='t'";
//            resultSet = globalVarClass.dbMysql.executeResultSet(sql);
//            while (resultSet.next()) {                                    
//                Boolean flag = new Boolean(true);
//                Object[] data = {resultSet.getString(2), flag};
//                tblFormTableModel.addRow(data);
//            }
//        } catch (Exception e) {
// clsGlobalVarClass.gLog.error(e);
//        }
        Object[] columns =
        {
            "Module Name", "Select"
        };
        Object[][] data =
        {
            {
                "Advance Order", false
            },
            {
                "Billing", false
            },
            {
                "Cash Management", false
            },
            /* {
             "CRM", false
             },
             */
            {
                "Day End Process", false
            },
            {
                "Debit Card", false
            },
            {
                "Gift Voucher", false
            },
            {
                "KOT", false
            },
            {
                "Audit", false
            },
            {
                "Production", false
            },
            {
                "Physical Stock Posting", false
            },
            {
                "Advance Receipt", false
            },
            {
                "Stock In/Out", false
            },
            {
                "Place Order", false
            },
            {
                "Document Nos", false
            },
            {
                "Reservation", false
            },
            {
                "Register POS Terminal", false
            },
            {
                "Non Available Items", false
            }
        };
        tblFormTableModel.setDataVector(data, columns);
    }

    private boolean funTruncateTables(List truncateForms) throws Exception
    {
        posCode = funGetSelectedPosCode();
        fromDate = funGetFromDate();
        toDate = funGetToDate();

        if (truncateForms.size() > 0)
        {
            for (int i = 0; i < truncateForms.size(); i++)
            {
                switch (String.valueOf(truncateForms.get(i)))
                {

                    case "Advance Order":

                        funDeleteAdvanceBooking(posCode, fromDate, toDate);

                        break;
                    case "Billing":

                        funDeleteBillingData(posCode, fromDate, toDate);

                        break;
                    case "Cash Management":

                        funDeleteCashData(posCode, fromDate, toDate);
                        break;
                    /* case "CRM":
                     funTruncateTbl("truncate tblcrmpoints");
                     funTruncateTbl("truncate tblloyaltypoints");
                     funTruncateTbl("truncate tblpointsonbill");
                     // funDeletePointData(posCode,fromDate,toDate);
                     break;
                     */
                    case "Day End Process":

                        funDeleteDayEndData(posCode, fromDate, toDate);
                        break;
                    case "Debit Card":

                        funDeleteDebitCardTransactioData(posCode, fromDate, toDate);

                        break;
                    case "Gift Voucher":
                        funTruncateTbl("truncate tblgiftvoucherissue");
                        break;
                    case "KOT":

                        funDeleteKOTData(posCode, fromDate, toDate);
                        break;
                    case "Audit":

                        funDeleteVoidTableData(posCode, fromDate, toDate);
                        break;
                    case "Production":

                        funDeleteProductionTableData(posCode, fromDate, toDate);
                        break;
                    case "Physical Stock Posting":

                        funDeletePhysicalPostingData(posCode, fromDate, toDate);
                        break;

                    case "Advance Receipt":

                        funDeleteAdvanceReceiptDtl(posCode, fromDate, toDate);
                        break;

                    case "Stock In/Out":

                        funDeleteStockInOutDtl(posCode, fromDate, toDate);
                        break;

                    case "Document Nos":
//                        funTruncateTbl("update tblinternal a set a.dblLastNo='0' ");
//                        funTruncateTbl("update tbllaststoreadvbookingbill a set a.strAdvBookingNo='0' where a.strPosCode='" + posCode + "'");
//                        funTruncateTbl("update tblstorelastbill a set a.strBillNo='0' where a.strPosCode='" + posCode + "' ");
                        break;

                    case "Place Order":

                        funDeletePlaceOrderData(posCode, fromDate, toDate);
                        break;

                    case "Reservation":
                        funDeleteReservationData(posCode, fromDate, toDate);
                        break;

                    case "Register POS Terminal":
                        funDeleteRegisterNoOfRegisterTerminals(posCode, fromDate, toDate);
                        break;
                        
                        
                    case "Non Available Items": 
                        funDeleteNonAvailableItems(posCode, fromDate, toDate);
                        break;

                    default:
                        return false;

                }
            }

            return true;
        }
        return false;
    }

    private void funDeletePlaceOrderData(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);

            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete c.* from tblplaceorderhd a,tblplaceorderdtl b,tblplaceorderadvorderdtl c "
                    + " where a.strOrderCode=b.strOrderCode and b.strAdvOrderNo=c.strAdvOrderNo ");
            /*if (!posCode.equals("All"))
             {
             sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
             }*/
            sbDeleteSalesData.append(" and date(a.dteOrderDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblplaceorderhd a,tblplaceorderdtl b "
                    + " where a.strOrderCode=b.strOrderCode ");
            /*if (!posCode.equals("All"))
             {
             sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
             }*/
            sbDeleteSalesData.append(" and date(a.dteOrderDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete a.* from tblplaceorderhd a where date(a.dteOrderDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;
            con.commit();
        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    private void funDeleteReservationData(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);

            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete a.* from tblreservation a where date(a.dteResDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;
            con.commit();
        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    //delete all bill table  
    private void funDeleteBillingData(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);

            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tbldebitcardbilldetails where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblbillhd a,tblbilldtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblbillhd a,tblbillmodifierdtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblbillhd a,tblbillsettlementdtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblbillhd a,tblbillpromotiondtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblbillhd a,tblbilltaxdtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblbillhd a,tblbilldiscdtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblbillhd a,tblbillcomplementrydtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblbillhd a,tblhomedelivery b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqbillhd a,tblhomedelivery b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblbillhd a,tblhomedeldtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqbillhd a,tblhomedeldtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblbillseriesbilldtl  where");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and");
            }
            sbDeleteSalesData.append(" date(dteCreatedDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            System.out.println(sbDeleteSalesData.toString());
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblbillhd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and  ");
            }
            sbDeleteSalesData.append(" date(dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            //*************QBILLHD***********************//
            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqbillhd a,tblqbilldtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqbillhd a,tblqbillmodifierdtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqbillhd a, tblqbillsettlementdtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqbillhd a, tblqbilltaxdtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqbillhd a, tblqbilldiscdtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqbillhd a, tblqbillcomplementrydtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqbillhd a, tblqbillpromotiondtl b where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblqbillhd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;
            con.commit();
        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }
    //delete all bill t

    private void funDeleteAdvanceBooking(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);

            Statement st = con.createStatement();
            con.setAutoCommit(false);

            /////Live advance booking details
            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tbladvbookbillhd a,tbladvancebookingtemp b where a.strCustomerCode=b.strCustomerCode ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tbladvancereceipthd a,tbladvancereceiptdtl b where a.strReceiptNo=b.strReceiptNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dtReceiptDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tbladvancereceipthd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and  ");
            }
            sbDeleteSalesData.append(" date(dtReceiptDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tbladvbookbillhd a,tbladvbookbilldtl b where a.strAdvBookingNo=b.strAdvBookingNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tbladvbookbillhd a,tbladvbooktaxdtl b where a.strAdvBookingNo=b.strAdvBookingNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tbladvbookbillhd a,tbladvordermodifierdtl b where a.strAdvBookingNo=b.strAdvOrderNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete c.* from tbladvbookbillhd a,tbladvbooktaxdtl b,tbladvbooktaxtemp c "
                    + " where a.strAdvBookingNo=b.strAdvBookingNo and b.strTaxCode=c.strTaxCode ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete c.* from tbladvbookbillhd a,tbladvbookbilldtl b,tbladvbookitemtemp c "
                    + " where a.strAdvBookingNo=b.strAdvBookingNo and b.strItemCode=c.strItemCode ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tbladvbookbillhd a,tbladvbookbillchardtl b where a.strAdvBookingNo=b.strAdvBookingNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tbladvbookbillhd a,tbladvbookbillimgdtl b where a.strAdvBookingNo=b.strAdvBookingNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tbladvbookbillhd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            /////Q advance booking details
            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqadvancereceipthd a,tblqadvancereceiptdtl b where a.strReceiptNo=b.strReceiptNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dtReceiptDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblqadvancereceipthd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and  ");
            }
            sbDeleteSalesData.append(" date(dtReceiptDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqadvbookbillhd a,tblqadvbookbilldtl b where a.strAdvBookingNo=b.strAdvBookingNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqadvbookbillhd a,tblqadvordermodifierdtl b where a.strAdvBookingNo=b.strAdvOrderNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblqadvbookbillhd a,tblqadvbookbillchardtl b where a.strAdvBookingNo=b.strAdvBookingNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblqadvbookbillhd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteAdvBookingDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;
            con.commit();
        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    private void funDeleteCashData(String posCode, String fromDate, String toDate)
    {

        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);
            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblcashmanagement where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' ");
            }
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and (dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            }
            else
            {
                sbDeleteSalesData.append(" (dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            }
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblcashiermanagement where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' ");
            }
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and date(dtDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            }
            else
            {
                sbDeleteSalesData.append(" date(dtDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            }
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;
            con.commit();

        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    private void funDeletePointsData(String posCode, String fromDate, String toDate)
    {

        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);
            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblcashmanagement where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblcashiermanagement where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dtDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;
            con.commit();

        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    private void funDeleteDayEndData(String posCode, String fromDate, String toDate)
    {

        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);
            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tbldayendprocess where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;
            con.commit();

        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    private void funDeleteDebitCardTransactioData(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);
            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tbldebitcardrecharge a, tbldcrechargesettlementdtl b where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" a.strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" a.intRechargeNo=b.strRechargeNo and date(a.dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tbldebitcardsettlementdtl ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tbldebitcardrefundamt where date(dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "'  ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tbldebitcardrecharge where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tbldebitcardrevenue where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dtePOSDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tbldebitcardbilldetails a,tbldebitcardtabletemp b "
                    + " where a.strCardNo=b.strCardNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete c.* from tbldebitcardbilldetails a,tbldebitcardmaster b,tbldebitcardsettlementdtl c "
                    + " where a.strCardNo=b.strCardNo and b.strCardTypeCode=c.strCardTypeCode ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;
            con.commit();

        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    private void funDeleteKOTData(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);
            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblkottaxdtl  ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblitemrtemp where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblitemtemp where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPosCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append("date(dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblnonchargablekot where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and  ");
            }
            sbDeleteSalesData.append(" date(dteNCKOTDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;
            con.commit();

        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    private void funDeleteVoidTableData(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);
            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tbllinevoid where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPosCode='" + posCode + "' and  ");
            }
            sbDeleteSalesData.append(" date(dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblvoidbill where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPosCode='" + posCode + "' and  ");
            }
            sbDeleteSalesData.append(" date(dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblvoidbilldtl where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPosCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblvoidbillhd a,tblvoidbillsettlementdtl b "
                    + " where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPosCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblvoidbillhd a,tblvoidmodifierdtl b "
                    + " where a.strBillNo=b.strBillNo ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPosCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblvoidkot where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteVoidedDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblvoidbillhd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" strPosCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteBillDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblvoidstockhd a,tblvoidstockdtl b "
                    + " where a.strStockCode=b.strStockCode ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteVoidedDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblvoidstockhd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append("strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteVoidedDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            funTruncateTbl("truncate tblvoidstocktaxdtl");

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append("delete from tblkdsprocess where date(dteBookProcessTime)  BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append("delete from tblaudit where date(dtePOSDate)  BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;

            con.commit();

        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    private void funDeleteProductionTableData(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);
            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblproductionhd a,tblproductiondtl b "
                    + " where a.strProductionCode=b.strProductionCode ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteProductionDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblproductionhd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append("strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteProductionDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;

            con.commit();

        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    private void funDeletePhysicalPostingData(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);
            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblpsphd a,tblpspdtl b "
                    + " where a.strPSPCode=b.strPSPCode ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblpsphd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append("strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;

            con.commit();

        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    private void funDeleteAdvanceReceiptDtl(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);
            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblrecipehd a,tblrecipedtl b "
                    + " where a.strRecipeCode=b.strRecipeCode ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblrecipehd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append("strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteDateCreated) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;

            con.commit();

        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    private void funDeleteStockInOutDtl(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);
            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblstkinhd a,tblstkindtl b "
                    + " where a.strStkInCode=b.strStkInCode ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append("and date(a.dteStkInDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblstkinhd a,tblstockintemp b "
                    + " where a.strStkInCode=b.strStkInCode ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteStkInDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblstkinhd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append("strPOSCode='" + posCode + "' and ");
            }
            sbDeleteSalesData.append(" date(dteStkInDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete b.* from tblstkouthd a,tblstkoutdtl b "
                    + " where a.strStkOutCode=b.strStkOutCode ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append(" and a.strPOSCode='" + posCode + "' ");
            }
            sbDeleteSalesData.append(" and date(a.dteStkOutDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append(" delete from tblstkouthd where ");
            if (!posCode.equals("All"))
            {
                sbDeleteSalesData.append("strPOSCode='" + posCode + "' and  ");
            }
            sbDeleteSalesData.append(" date(dteStkOutDate) BETWEEN '" + fromDate + "' and '" + toDate + "' ");
            st.executeUpdate(sbDeleteSalesData.toString());

            funTruncateTbl("truncate tblstocktaxdtl");

            sbDeleteSalesData = null;

            con.commit();

        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }

    }

    private void funTruncateTbl(String sql)
    {

        try
        {
            clsGlobalVarClass.dbMysql.execute(sql);
        }
        catch (Exception e)
        {
            clsGlobalVarClass.gLog.error(e);
        }
    }

    private boolean funUpdateTableStatus()
    {
        try
        {
            String updateTableStatus = "update tbltablemaster set strStatus='Normal' ";
            int i = clsGlobalVarClass.dbMysql.execute(updateTableStatus);

        }
        catch (Exception e)
        {
            clsGlobalVarClass.gLog.error(e);
        }
        return false;
    }

    private boolean funCheckUserAuthentication()
    {
        boolean flag = false;

        try
        {
            if (chkClearAllData.isSelected())
            {

            }
            else
            {
                posCode = funGetSelectedPosCode();
                fromDate = funGetFromDate();
                toDate = funGetToDate();

            }

            String[] options = new String[]
            {
                "OK", "Cancel"
            };
            int option = JOptionPane.showOptionDialog(null, panelUserAuthentication, "User Authentication!!!",
                    JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, options, txtUsername);
            if (option == 0) // pressing OK button
            {
                flag = funOkButtonPressed();
            }
        }
        catch (Exception e)
        {
            if (fromDate == null || toDate == null)
            {
                JOptionPane.showMessageDialog(null, "Please Select Date.");
                return flag;
            }
            e.printStackTrace();
        }
        finally
        {
            return flag;
        }
    }

    private boolean funOkButtonPressed()
    {
        username = txtUsername.getText();
        String password = new String(txtPassword.getPassword());
        // System.out.println("username="+username+" password="+password);

        boolean flag = funIsValidUser(username, password);
        return flag;
    }

    private void funCloseAuthenticationDialog()
    {
        Window[] windows = Window.getWindows();
        for (Window window : windows)
        {
            if (window instanceof JDialog)
            {
                JDialog dialog = (JDialog) window;
                if (dialog.getContentPane().getComponentCount() == 1 && dialog.getContentPane().getComponent(0) instanceof JOptionPane)
                {
                    dialog.dispose();
                }
            }
        }
    }

    private boolean funIsValidUser(String username, String userPassword)
    {
        Date objDate = new Date();
        int day = objDate.getDate();
        int month = objDate.getMonth() + 1;
        int year = objDate.getYear() + 1900;
        String currentDate = year + "-" + month + "-" + day;
        if (username.trim().equalsIgnoreCase("SANGUINE"))
        {
            int password = year + month + day + day;

            clsUtility objUtility = new clsUtility();

            String strpass = Integer.toString(password);
            char num1 = strpass.charAt(0);
            char num2 = strpass.charAt(1);
            char num3 = strpass.charAt(2);
            char num4 = strpass.charAt(3);
            String alph1 = objUtility.funGetAlphabet(Character.getNumericValue(num1));
            String alph2 = objUtility.funGetAlphabet(Character.getNumericValue(num2));
            String alph3 = objUtility.funGetAlphabet(Character.getNumericValue(num3));
            String alph4 = objUtility.funGetAlphabet(Character.getNumericValue(num4));

            String finalPassword = String.valueOf(password) + alph1 + alph2 + alph3 + alph4;

            if (finalPassword.equalsIgnoreCase(userPassword))
            {
                return true;
            }
            else
            {
                txtUsername.requestFocus();
                new frmOkPopUp(null, "Login Failed", "Error", 1).setVisible(true);
                return false;
            }

        }
        else
        {
            try
            {
                String encKey = "04081977";
                String encPassword = clsGlobalSingleObject.getObjPasswordEncryptDecreat().encrypt(encKey, userPassword.trim().toUpperCase());
                System.out.println(encPassword);
                String selectQuery = "select count(*),strUserName,strSuperType,dteValidDate,strPOSAccess from tbluserhd "
                        + "where strUserCode='" + username + "' and strPassword='" + encPassword + "'";
                //System.out.println(selectQuery);
                ResultSet rs = clsGlobalVarClass.dbMysql.executeResultSet(selectQuery);
                rs.next();
                if (rs.getInt(1) == 1)
                {

                    selectQuery = "select count(*) from tbluserhd WHERE strUserCode = '" + txtUsername.getText()
                            + "' and strPassword='" + encPassword + "'" + " AND dteValidDate>='" + currentDate + "'";

                    rs = clsGlobalVarClass.dbMysql.executeResultSet(selectQuery);
                    rs.next();
                    if (rs.getInt(1) == 0)
                    {
                        rs.close();
                        new frmOkPopUp(null, "User Has Expired", "Error", 1).setVisible(true);
                    }
                    else
                    {
                        String sql = "select a.strUserCode,a.strFormName,a.strGrant \n"
                                + "from tbluserdtl a,tbluserhd b \n"
                                + "where a.strUserCode=b.strUserCode\n"
                                + "and a.strFormName='Tools'\n"
                                + "and b.strUserName='" + username + "' ";
                        ResultSet resultSet = clsGlobalVarClass.dbMysql.executeResultSet(sql);
                        if (resultSet.next())
                        {
                            String isGrant = resultSet.getString("strGrant");
                            if (isGrant.equalsIgnoreCase("true"))
                            {
                                return true;
                            }
                            else
                            {
                                new frmOkPopUp(null, "You Don't Have Permission To Clear Tansaction.", "Error", 1).setVisible(true);
                                return false;
                            }
                        }
                        else
                        {
                            new frmOkPopUp(null, "You Don't Have Permission To Clear Tansaction.", "Error", 1).setVisible(true);
                            return false;
                        }
                    }
                }
                else
                {
                    rs.close();
                    txtUsername.requestFocus();
                    new frmOkPopUp(null, "Login Failed", "Error", 1).setVisible(true);
                }

            }
            catch (Exception e)
            {
                clsGlobalVarClass.gLog.error(e);
            }
        }
        return false;
    }

    private void funResetFields()
    {
        txtUsername.setText("");
        txtPassword.setText("");
        txtUsername.requestFocus();

    }

    private void funSaveUserTruncationDtl()
    {
        try
        {
            if (chkClearAllData.isSelected())
            {
                String sql = "insert into tbltruncationdtl(strUser,dteDate,strTruncateForms,strModuleType,dteFromDate,dteToDate,strPOSCode,strClientCode)"
                        + "values"
                        + "('" + username + "','" + clsGlobalVarClass.gPOSDateForTransaction + "','Clear All POS Data','T','" + clsGlobalVarClass.getCurrentDateTime() + "','" + clsGlobalVarClass.getCurrentDateTime() + "','All','" + clsGlobalVarClass.gClientCode + "')";
                System.out.println(sql);
                int i = clsGlobalVarClass.dbMysql.execute(sql);
            }
            else
            {
                String sql = "insert into tbltruncationdtl(strUser,dteDate,strTruncateForms,strModuleType,dteFromDate,dteToDate,strPOSCode,strClientCode)"
                        + "values"
                        + "('" + username + "','" + clsGlobalVarClass.gPOSDateForTransaction + "','" + truncateFormList.toString() + "','T','" + fromDate + "','" + toDate + "','" + posCode + "','" + clsGlobalVarClass.gClientCode + "')";
                System.out.println(sql);
                int i = clsGlobalVarClass.dbMysql.execute(sql);
            }

        }
        catch (Exception e)
        {
            e.printStackTrace();
            clsGlobalVarClass.gLog.error(e);
        }
    }

    private void funFillComboBox() throws Exception
    {
        cmbPosCode.addItem("All");
        String sql = "select strPosName,strPosCode from tblposmaster";
        ResultSet rs = clsGlobalVarClass.dbMysql.executeResultSet(sql);
        while (rs.next())
        {
            cmbPosCode.addItem(rs.getString(1) + " " + rs.getString(2));
        }

        rs.close();
    }

    /**
     * get Selected Pos Code
     *
     * @return
     * @throws Exception
     */
    private String funGetSelectedPosCode() throws Exception
    {
        String pos = null;
        String posCode = cmbPosCode.getSelectedItem().toString();
        StringBuilder sb = new StringBuilder(posCode);
        int len = posCode.length();
        int lastInd = sb.lastIndexOf(" ");
        pos = sb.substring(lastInd + 1, len).toString();
        return pos;
    }

    /**
     * set Form To in data Chosser
     *
     * @throws Exception
     */
    private void funSetFormToInDateChosser() throws Exception
    {
        java.util.Date date = new SimpleDateFormat("dd-MM-yyyy").parse(clsGlobalVarClass.gPOSDateToDisplay);
        dteFromDate.setDate(date);
        dteToDate.setDate(date);
    }

    /**
     * fun get From Date
     *
     * @return
     * @throws Exception
     */
    private String funGetFromDate() throws Exception
    {
        String FromDate = null;
        dt1 = dteFromDate.getDate();
        int d = dt1.getDate();
        int m = dt1.getMonth() + 1;
        int y = dt1.getYear() + 1900;
        FromDate = y + "-" + m + "-" + d;
        return FromDate;
    }

    /**
     * Get To Date
     *
     * @return
     * @throws Exception
     */
    private String funGetToDate() throws Exception
    {
        String Todate = null;
        dt2 = dteToDate.getDate();
        int d = dt2.getDate();
        int m = dt2.getMonth() + 1;
        int y = dt2.getYear() + 1900;
        Todate = y + "-" + m + "-" + d;
        return Todate;
    }

    private void funTruncateAllTransactionData() throws Exception
    {
        try
        {

            clsGlobalVarClass.dbMysql.execute("truncate tbladvancebookingtemp ");
            clsGlobalVarClass.dbMysql.execute("truncate tbladvanceordertypemaster ");
            clsGlobalVarClass.dbMysql.execute("truncate tbladvancereceiptdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tbladvancereceipthd ");
            clsGlobalVarClass.dbMysql.execute("truncate tbladvbookbillchardtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tbladvbookbilldtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tbladvbookbillhd ");
            clsGlobalVarClass.dbMysql.execute("truncate tbladvbookbillimgdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tbladvbookitemtemp ");
            clsGlobalVarClass.dbMysql.execute("truncate tbladvbooktaxdtl ");

            clsGlobalVarClass.dbMysql.execute("truncate tbladvbooktaxtemp ");
            clsGlobalVarClass.dbMysql.execute("truncate tbladvordermodifierdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblatvreport ");
            clsGlobalVarClass.dbMysql.execute("truncate tblaudit ");
            clsGlobalVarClass.dbMysql.execute("truncate tblbillcomplementrydtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblbilldiscdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblbilldtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblbillhd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblbillmodifierdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblbillpromotiondtl ");

            clsGlobalVarClass.dbMysql.execute("truncate tblbillseries ");
            clsGlobalVarClass.dbMysql.execute("truncate tblbillseriesbilldtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblbillsettlementdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblbilltaxdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblcashiermanagement ");
            clsGlobalVarClass.dbMysql.execute("truncate tblcashmanagement ");
            clsGlobalVarClass.dbMysql.execute("truncate tblcreditbillreceipthd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblcrmpoints ");
            clsGlobalVarClass.dbMysql.execute("truncate tbldayendprocess ");
            clsGlobalVarClass.dbMysql.execute("truncate tbldayendreports ");

            clsGlobalVarClass.dbMysql.execute("truncate tbldcrechargesettlementdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tbldebitcardbilldetails ");
            clsGlobalVarClass.dbMysql.execute("truncate tbldebitcardrecharge ");
            clsGlobalVarClass.dbMysql.execute("truncate tbldebitcardrefundamt ");
            clsGlobalVarClass.dbMysql.execute("truncate tbldebitcardrevenue ");
            clsGlobalVarClass.dbMysql.execute("truncate tbldebitcardsettlementdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tbldebitcardtabletemp ");
            clsGlobalVarClass.dbMysql.execute("truncate tblhomedeldtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblhomedelivery ");
            clsGlobalVarClass.dbMysql.execute("truncate tblitembarcode ");

            clsGlobalVarClass.dbMysql.execute("truncate tblitemcharctersticslinkupdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblitemcurrentstk ");
	    clsGlobalVarClass.dbMysql.execute("truncate tblitemorderingdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblitemrtemp ");
            clsGlobalVarClass.dbMysql.execute("truncate tblitemrtemp_bck ");
            clsGlobalVarClass.dbMysql.execute("truncate tblitemtemp ");
            clsGlobalVarClass.dbMysql.execute("truncate tblkdsprocess ");
            clsGlobalVarClass.dbMysql.execute("truncate tblkottaxdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tbllaststoreadvbookingbill ");

            clsGlobalVarClass.dbMysql.execute("truncate tbllinevoid ");
            clsGlobalVarClass.dbMysql.execute("truncate tblloyaltypointcustomerdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblloyaltypointmenuhddtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblloyaltypointposdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblloyaltypoints ");
            clsGlobalVarClass.dbMysql.execute("truncate tblloyaltypointsubgroupdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblnonavailableitems ");
            clsGlobalVarClass.dbMysql.execute("truncate tblnonchargablekot ");
            clsGlobalVarClass.dbMysql.execute("truncate tblorderanalysis ");

            clsGlobalVarClass.dbMysql.execute("truncate tblplaceorderadvorderdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblplaceorderdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblplaceorderhd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblpmspostingbilldtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblpointsonbill ");
            clsGlobalVarClass.dbMysql.execute("truncate tblproductiondtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblproductionhd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblpspdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblpsphd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqadvancereceiptdtl ");

            clsGlobalVarClass.dbMysql.execute("truncate tblqadvancereceipthd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqadvbookbillchardtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqadvbookbilldtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqadvbookbillhd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqadvordermodifierdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqbillcomplementrydtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqbilldiscdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqbilldtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqbillhd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqbillmodifierdtl ");

            clsGlobalVarClass.dbMysql.execute("truncate tblqbillpromotiondtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqbillsettlementdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqbilltaxdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblqcreditbillreceipthd ");
            
            clsGlobalVarClass.dbMysql.execute("truncate tblreorderdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblreorderhd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblreordertime ");

            clsGlobalVarClass.dbMysql.execute("truncate tblreservation ");
            clsGlobalVarClass.dbMysql.execute("truncate tblstkindtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblstkinhd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblstkoutdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblstkouthd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblstockintemp ");
            clsGlobalVarClass.dbMysql.execute("truncate tblstocktaxdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tbltallylinkup ");
            clsGlobalVarClass.dbMysql.execute("truncate tbltaxtemp ");

            clsGlobalVarClass.dbMysql.execute("truncate tbltempadvorderflash ");
            clsGlobalVarClass.dbMysql.execute("truncate tbltemphomedelv ");
            clsGlobalVarClass.dbMysql.execute("truncate tbltempitemstk ");
            clsGlobalVarClass.dbMysql.execute("truncate tbltempprintbill ");
            clsGlobalVarClass.dbMysql.execute("truncate tbltempsalesflash ");
            clsGlobalVarClass.dbMysql.execute("truncate tbltempsalesflash1 ");
            clsGlobalVarClass.dbMysql.execute("truncate tbltempsalesflashtotals1 ");

            clsGlobalVarClass.dbMysql.execute("truncate tbltempvoidkot ");
            clsGlobalVarClass.dbMysql.execute("truncate tblviewbilldtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblviewbillhd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblvoidadvancereceiptdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblvoidadvancereceipthd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblvoidadvbookbillchardtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblvoidadvbookbilldtl ");

            clsGlobalVarClass.dbMysql.execute("truncate tblvoidadvbookbillhd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblvoidadvordermodifierdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblvoidbill ");
            clsGlobalVarClass.dbMysql.execute("truncate tblvoidbilldtl ");

            clsGlobalVarClass.dbMysql.execute("truncate tblvoidbillhd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblvoidbillsettlementdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblvoidkot ");
            clsGlobalVarClass.dbMysql.execute("truncate tblvoidmodifierdtl ");

            clsGlobalVarClass.dbMysql.execute("truncate tblvoidstockdtl ");
            clsGlobalVarClass.dbMysql.execute("truncate tblvoidstockhd ");
            clsGlobalVarClass.dbMysql.execute("truncate tblvoidstocktaxdtl ");

            clsGlobalVarClass.dbMysql.execute("truncate tblregisterterminal ");

            //update feilds
            clsGlobalVarClass.dbMysql.execute("update tblinternal set dblLastNo=0 where strTransactionType='KOTNo';");
            clsGlobalVarClass.dbMysql.execute("update tblinternal set dblLastNo=0 where strTransactionType='stockInNo';");
            clsGlobalVarClass.dbMysql.execute("update tblinternal set dblLastNo=0 where strTransactionType='stockOutNo';");
            clsGlobalVarClass.dbMysql.execute("update tblinternal set dblLastNo=0 where strTransactionType='RechargeNo';");
            clsGlobalVarClass.dbMysql.execute("update tblinternal set dblLastNo=0 where strTransactionType='RedeemNo';");
            clsGlobalVarClass.dbMysql.execute("update tblinternal set dblLastNo=0 where strTransactionType='MIReceiptNo';");
            clsGlobalVarClass.dbMysql.execute("update tblinternal set dblLastNo=0 where strTransactionType='CreditReceipt';");
            clsGlobalVarClass.dbMysql.execute("update tblinternal set dblLastNo=0 where strTransactionType='LiquorBillCustomer';");
            clsGlobalVarClass.dbMysql.execute("update tblinternal set dblLastNo=0 where strTransactionType='OrderNo';");
            clsGlobalVarClass.dbMysql.execute("update tblinternal set dblLastNo=0 where strTransactionType='AdvReceipt';");
            clsGlobalVarClass.dbMysql.execute("update tblinternal set dblLastNo=0 where strTransactionType='Physicalstock';");
            
            clsGlobalVarClass.dbMysql.execute("update tblstorelastbill set strBillNo=0;");
            clsGlobalVarClass.dbMysql.execute("update tbllaststoreadvbookingbill set strAdvBookingNo=0;");

            //
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    private void funDeleteRegisterNoOfRegisterTerminals(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);

            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append("truncate tblregisterterminal ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;
            con.commit();
        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }
    }
    
    
    private void funDeleteNonAvailableItems(String posCode, String fromDate, String toDate)
    {
        String unicode = "?useUnicode=yes&characterEncoding=UTF-8";
        String conUrl = "jdbc:mysql://" + clsPosConfigFile.ipAddress + ":" + clsPosConfigFile.portNo + "/" + clsPosConfigFile.databaseName + unicode;
        Connection con = null;
        try
        {
            StringBuilder sbDeleteSalesData = new StringBuilder();
            con = DriverManager.getConnection(conUrl, clsPosConfigFile.userId, clsPosConfigFile.password);

            Statement st = con.createStatement();
            con.setAutoCommit(false);

            sbDeleteSalesData.setLength(0);
            sbDeleteSalesData.append("truncate tblnonavailableitems ");
            st.executeUpdate(sbDeleteSalesData.toString());

            sbDeleteSalesData = null;
            con.commit();
        }
        catch (Exception e)
        {
            e.printStackTrace();
            try
            {
                con.rollback();
            }
            catch (SQLException ex)
            {
                Logger.getLogger(frmClearTransaction.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        finally
        {
            con = null;
        }
    }

}
