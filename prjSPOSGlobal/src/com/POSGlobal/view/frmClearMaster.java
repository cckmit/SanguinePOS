/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.POSGlobal.view;

import com.POSGlobal.controller.clsBackupDatabase;
import com.POSGlobal.controller.clsGlobalSingleObject;
import com.POSGlobal.view.*;
import com.POSGlobal.controller.clsGlobalVarClass;
import com.POSGlobal.controller.clsUtility;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Jai chandra
 */
public class frmClearMaster extends javax.swing.JFrame
{

    private ResultSet resultSet;
    private final DefaultTableModel tblFormTableModel;
    private final int rowCount;
    private final JCheckBox chkBoxSelectAll;
    private String username;

    public frmClearMaster()
    {
        initComponents();
        funSetShortCutKeys();
        Timer timer = new Timer(500, new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                Date date1 = new Date();
                String new_str = String.format("%tr", date1);
                String dateAndTime = clsGlobalVarClass.gPOSDateToDisplay + " " + new_str;
                lblDate.setText(dateAndTime);
            }
        });
        timer.setRepeats(true);
        timer.setCoalesce(true);
        timer.setInitialDelay(0);
        timer.start();

        lblUserCode.setText(clsGlobalVarClass.gUserCode);
        lblPosName.setText(clsGlobalVarClass.gPOSName);
        lblDate.setText(clsGlobalVarClass.gPOSDateToDisplay);
        lblModuleName.setText(clsGlobalVarClass.gSelectedModule);
        tblFormTableModel = (DefaultTableModel) tblFormTable.getModel();
        funSetData();
        rowCount = tblFormTableModel.getRowCount();
        chkBoxSelectAll = new JCheckBox("Select All");
        chkBoxSelectAll.setSelected(false);
        chkBoxSelectAll.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                if (chkBoxSelectAll.isSelected())
                {
                    for (int i = 0; i < rowCount; i++)
                    {
                        tblFormTableModel.setValueAt(Boolean.parseBoolean("true"), i, 1);
                    }
                }
                else
                {
                    for (int i = 0; i < rowCount; i++)
                    {
                        tblFormTableModel.setValueAt(Boolean.parseBoolean("false"), i, 1);
                    }
                }
            }
        });
        TableColumnModel columnModel = tblFormTable.getColumnModel();
        JTableHeader header = tblFormTable.getTableHeader();
        header.add(chkBoxSelectAll);
        header.setLayout(new FlowLayout(FlowLayout.RIGHT));

        if (rowCount < 1)
        {
            JOptionPane.showMessageDialog(null, "No data found !!!");
            return;
        }

    }

    private void funSetShortCutKeys()
    {
        btnCancel.setMnemonic('c');
        btnSave.setMnemonic('r');
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelUserAuthentication = new javax.swing.JPanel();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        panelHeader = new javax.swing.JPanel();
        lblProductName = new javax.swing.JLabel();
        lblModuleName = new javax.swing.JLabel();
        lblformName = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblPosName = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblUserCode = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblHOSign = new javax.swing.JLabel();
        panelLayout = new JPanel() {  
            public void paintComponent(Graphics g) {  
                Image img = Toolkit.getDefaultToolkit().getImage(  
                    getClass().getResource("/com/POSGlobal/images/imgBGJPOS.png"));  
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);  
            }  
        };  ;
        panelBody = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        tblFormTable = new javax.swing.JTable();

        lblUsername.setText("Enter a Username:");

        lblPassword.setText("Enter a Password:");

        txtUsername.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtUsernameMouseClicked(evt);
            }
        });
        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });
        txtUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUsernameKeyPressed(evt);
            }
        });

        txtPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPasswordMouseClicked(evt);
            }
        });
        txtPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPasswordKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout panelUserAuthenticationLayout = new javax.swing.GroupLayout(panelUserAuthentication);
        panelUserAuthentication.setLayout(panelUserAuthenticationLayout);
        panelUserAuthenticationLayout.setHorizontalGroup(
            panelUserAuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUserAuthenticationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUserAuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUserAuthenticationLayout.createSequentialGroup()
                        .addComponent(lblPassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(panelUserAuthenticationLayout.createSequentialGroup()
                        .addComponent(lblUsername)
                        .addGap(2, 2, 2)))
                .addGroup(panelUserAuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtUsername)
                    .addComponent(txtPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelUserAuthenticationLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtPassword, txtUsername});

        panelUserAuthenticationLayout.setVerticalGroup(
            panelUserAuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUserAuthenticationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUserAuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelUserAuthenticationLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtUsername)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUserAuthenticationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelUserAuthenticationLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtPassword, txtUsername});

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setUndecorated(true);

        panelHeader.setBackground(new java.awt.Color(69, 164, 238));
        panelHeader.setLayout(new javax.swing.BoxLayout(panelHeader, javax.swing.BoxLayout.LINE_AXIS));

        lblProductName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProductName.setForeground(new java.awt.Color(255, 255, 255));
        lblProductName.setText("SPOS - ");
        panelHeader.add(lblProductName);

        lblModuleName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblModuleName.setForeground(new java.awt.Color(255, 255, 255));
        panelHeader.add(lblModuleName);

        lblformName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblformName.setForeground(new java.awt.Color(255, 255, 255));
        lblformName.setText("- Clear Master");
        panelHeader.add(lblformName);
        panelHeader.add(filler4);
        panelHeader.add(filler5);

        lblPosName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPosName.setForeground(new java.awt.Color(255, 255, 255));
        lblPosName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPosName.setMaximumSize(new java.awt.Dimension(321, 30));
        lblPosName.setMinimumSize(new java.awt.Dimension(321, 30));
        lblPosName.setPreferredSize(new java.awt.Dimension(321, 30));
        panelHeader.add(lblPosName);
        panelHeader.add(filler6);

        lblUserCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUserCode.setForeground(new java.awt.Color(255, 255, 255));
        lblUserCode.setMaximumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setMinimumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setPreferredSize(new java.awt.Dimension(90, 30));
        panelHeader.add(lblUserCode);

        lblDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setMaximumSize(new java.awt.Dimension(192, 30));
        lblDate.setMinimumSize(new java.awt.Dimension(192, 30));
        lblDate.setPreferredSize(new java.awt.Dimension(192, 30));
        panelHeader.add(lblDate);

        lblHOSign.setMaximumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setMinimumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setPreferredSize(new java.awt.Dimension(34, 30));
        panelHeader.add(lblHOSign);

        getContentPane().add(panelHeader, java.awt.BorderLayout.PAGE_START);

        panelLayout.setBackground(new java.awt.Color(255, 255, 255));
        panelLayout.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelLayout.setMinimumSize(new java.awt.Dimension(800, 570));
        panelLayout.setOpaque(false);
        panelLayout.setPreferredSize(new java.awt.Dimension(800, 570));
        panelLayout.setLayout(new java.awt.GridBagLayout());

        panelBody.setBackground(new java.awt.Color(255, 255, 255));
        panelBody.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelBody.setMinimumSize(new java.awt.Dimension(800, 570));
        panelBody.setOpaque(false);

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn1.png"))); // NOI18N
        btnSave.setText("CLEAR");
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn2.png"))); // NOI18N
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
        });
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        btnSave.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSaveKeyPressed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn1.png"))); // NOI18N
        btnCancel.setText("CLOSE");
        btnCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancel.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn2.png"))); // NOI18N
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelMouseClicked(evt);
            }
        });
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        tblFormTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Module Name", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFormTable.getTableHeader().setReorderingAllowed(false);
        //tblFormTable.setBackground(Color.LIGHT_GRAY);
        //tblFormTable.setForeground(Color.blue);
        tblFormTable.setRowHeight(24);
        tblFormTable.setFont(new Font("Arial", Font.BOLD, 14));
        tblFormTable.getTableHeader().setReorderingAllowed(false);
        scrollPane.setViewportView(tblFormTable);
        if (tblFormTable.getColumnModel().getColumnCount() > 0) {
            tblFormTable.getColumnModel().getColumn(1).setMinWidth(135);
            tblFormTable.getColumnModel().getColumn(1).setPreferredWidth(135);
            tblFormTable.getColumnModel().getColumn(1).setMaxWidth(135);
        }

        javax.swing.GroupLayout panelBodyLayout = new javax.swing.GroupLayout(panelBody);
        panelBody.setLayout(panelBodyLayout);
        panelBodyLayout.setHorizontalGroup(
            panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBodyLayout.createSequentialGroup()
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBodyLayout.setVerticalGroup(
            panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
            .addGroup(panelBodyLayout.createSequentialGroup()
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelLayout.add(panelBody, new java.awt.GridBagConstraints());

        getContentPane().add(panelLayout, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void funbtnSavePressed()
    {
        try
        {
            clsBackupDatabase objDBBackup = new clsBackupDatabase();
            objDBBackup.funTakeBackUpDB();

            int rowCount = tblFormTableModel.getRowCount();
            ArrayList<String> truncateFormList = new ArrayList<String>();
            for (int i = 0; i < rowCount; i++)
            {
                if ("true".equalsIgnoreCase(String.valueOf(tblFormTableModel.getValueAt(i, 1))))
                {
                    truncateFormList.add(String.valueOf(tblFormTableModel.getValueAt(i, 0)));
                    //System.out.println("forms="+tblFormTableModel.getValueAt(i, 0));
                }
            }
            if (truncateFormList.size() > 0)
            {
                boolean flag = funTruncateTables(truncateFormList);
                if (flag)
                {
                    JOptionPane.showMessageDialog(null, "Tables are cleared !!");
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "No table found !!");
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Please select table for truncation!!!");
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        boolean flag = funCheckUserAuthentication();
        funResetFields();
        if (flag)
        {
            int i = JOptionPane.showConfirmDialog(null, "Do You Want To Clear Masters.", "Clear Maters!!!", JOptionPane.OK_CANCEL_OPTION);
            System.out.println("i=" + i);
            funbtnSavePressed();
        }
    }//GEN-LAST:event_btnSaveMouseClicked

    private void funResetFields()
    {
        txtUsername.setText("");
        txtPassword.setText("");
        txtUsername.requestFocus();

    }

    private boolean funCheckUserAuthentication()
    {
        boolean flag = false;
        String[] options = new String[]
        {
            "OK", "Cancel"
        };
        int option = JOptionPane.showOptionDialog(null, panelUserAuthentication, "User Authentication!!!",
                                                  JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                                                  null, options, txtUsername);
        if (option == 0) // pressing OK button
        {
            flag=funOkButtonPressed();
        }
        return flag;
    }
    private boolean funOkButtonPressed()
    {
        username = txtUsername.getText();
            String password = new String(txtPassword.getPassword());
            // System.out.println("username="+username+" password="+password);

            boolean flag = funIsValidUser(username, password);
            return flag;
    }

    private void funCloseAuthenticationDialog()
    {
        Window[] windows = Window.getWindows();
        for (Window window : windows)
        {
            if (window instanceof JDialog)
            {
                JDialog dialog = (JDialog) window;
                if (dialog.getContentPane().getComponentCount() == 1 && dialog.getContentPane().getComponent(0) instanceof JOptionPane)
                {
                    dialog.dispose();
                }
            }
        }
    }
    private boolean funIsValidUser(String username, String userPassword)
    {
        Date objDate = new Date();
        int day = objDate.getDate();
        int month = objDate.getMonth() + 1;
        int year = objDate.getYear() + 1900;
        String currentDate = year + "-" + month + "-" + day;
        if (username.trim().equalsIgnoreCase("SANGUINE"))
        {
             int password = year + month + day + day;            
				
            clsUtility objUtility=new clsUtility();
            
            String strpass=Integer.toString(password);
            char num1 =strpass.charAt(0);
            char num2 =strpass.charAt(1);
            char num3 =strpass.charAt(2);
            char num4 =strpass.charAt(3);
            String alph1=objUtility.funGetAlphabet(Character.getNumericValue(num1));
            String alph2=objUtility.funGetAlphabet(Character.getNumericValue(num2));
            String alph3=objUtility.funGetAlphabet(Character.getNumericValue(num3));
            String alph4=objUtility.funGetAlphabet(Character.getNumericValue(num4));

            String finalPassword=String.valueOf(password)+alph1+alph2+alph3+alph4;
                                                
            if (finalPassword.equalsIgnoreCase(userPassword))
            {
                return true;
            }
            else
            {              
                txtUsername.requestFocus();
                new frmOkPopUp(null, "Login Failed", "Error", 1).setVisible(true);
                return false;
            }

        }
        else
        {
            try
            {
                String encKey = "04081977";
                String encPassword = clsGlobalSingleObject.getObjPasswordEncryptDecreat().encrypt(encKey, userPassword.trim().toUpperCase());
                System.out.println(encPassword);
                String selectQuery = "select count(*),strUserName,strSuperType,dteValidDate,strPOSAccess from tbluserhd "
                                     + "where strUserCode='" + username + "' and strPassword='" + encPassword + "'";
                //System.out.println(selectQuery);
                ResultSet rs = clsGlobalVarClass.dbMysql.executeResultSet(selectQuery);
                rs.next();
                if (rs.getInt(1) == 1)
                {

                    selectQuery = "select count(*) from tbluserhd WHERE strUserCode = '" + txtUsername.getText()
                                  + "' and strPassword='" + encPassword + "'" + " AND dteValidDate>='" + currentDate + "'";

                    rs = clsGlobalVarClass.dbMysql.executeResultSet(selectQuery);
                    rs.next();
                    if (rs.getInt(1) == 0)
                    {
                        rs.close();
                        new frmOkPopUp(null, "User Has Expired", "Error", 1).setVisible(true);
                    }
                    else
                    {
                        String sql = "select a.strUserCode,a.strFormName,a.strGrant \n"
                                     + "from tbluserdtl a,tbluserhd b \n"
                                     + "where a.strUserCode=b.strUserCode\n"
                                     + "and a.strFormName='Tools'\n"
                                     + "and b.strUserName='" + username + "' ";
                        ResultSet resultSet = clsGlobalVarClass.dbMysql.executeResultSet(sql);
                        if (resultSet.next())
                        {
                            String isGrant = resultSet.getString("strGrant");
                            if (isGrant.equalsIgnoreCase("true"))
                            {
                                return true;
                            }
                            else
                            {
                                new frmOkPopUp(null, "You Don't Have Permission To Clear Masters.", "Error", 1).setVisible(true);
                                return false;
                            }
                        }
                        else
                        {
                            new frmOkPopUp(null, "You Don't Have Permission To Clear Masters.", "Error", 1).setVisible(true);
                            return false;
                        }
                    }
                }
                else
                {
                    rs.close();
                    txtUsername.requestFocus();
                    new frmOkPopUp(null, "Login Failed", "Error", 1).setVisible(true);
                }

            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
        return false;
    }

    private void btnSaveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSaveKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnSaveKeyPressed

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseClicked
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCancelMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
       boolean flag = funCheckUserAuthentication();
        funResetFields();
        if (flag)
        {
            int i = JOptionPane.showConfirmDialog(null, "Do You Want To Clear Masters.", "Clear Maters!!!", JOptionPane.OK_CANCEL_OPTION);
            System.out.println("i=" + i);
            funbtnSavePressed();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtUsernameMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_txtUsernameMouseClicked
    {//GEN-HEADEREND:event_txtUsernameMouseClicked
        if (clsGlobalVarClass.gTouchScreenMode)
        {
            if (txtUsername.getText().length() == 0)
            {
                new frmAlfaNumericKeyBoard(this, true, "1", "Enter User Name.").setVisible(true);
                txtUsername.setText(clsGlobalVarClass.gKeyboardValue);
            }
            else
            {
                new frmAlfaNumericKeyBoard(this, true, txtUsername.getText(), "1", "Enter User Name.").setVisible(true);
                txtUsername.setText(clsGlobalVarClass.gKeyboardValue);
            }
        }
    }//GEN-LAST:event_txtUsernameMouseClicked

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtUsernameActionPerformed
    {//GEN-HEADEREND:event_txtUsernameActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void txtPasswordMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_txtPasswordMouseClicked
    {//GEN-HEADEREND:event_txtPasswordMouseClicked
        if (txtPassword.getPassword().length == 0)
        {
            new frmAlfaNumericKeyBoard(this, true, "1", "Enter  Password.").setVisible(true);
            txtPassword.setText(clsGlobalVarClass.gKeyboardValue);
        }
        else
        {
            new frmAlfaNumericKeyBoard(this, true, txtPassword.getPassword().toString(), "1", "Enter Password.").setVisible(true);
            txtPassword.setText(clsGlobalVarClass.gKeyboardValue);
        }
    }//GEN-LAST:event_txtPasswordMouseClicked

    private void txtUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyPressed
        // TODO add your handling code here:
         if (evt.getKeyCode() == 10)
            {
                txtPassword.requestFocus();
            }
    }//GEN-LAST:event_txtUsernameKeyPressed

    private void txtPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPasswordKeyPressed
        // TODO add your handling code here:
         if (evt.getKeyCode() == 10)
            {
               boolean flag=funOkButtonPressed();
               if (flag)
        {
            funCloseAuthenticationDialog();
            int i = JOptionPane.showConfirmDialog(null, "Do You Want To Clear Masters.", "Clear Maters!!!", JOptionPane.OK_CANCEL_OPTION);
            System.out.println("i=" + i);
            funbtnSavePressed();
        }
        else
        {
            funResetFields();
        }
            }
    }//GEN-LAST:event_txtPasswordKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(frmClearMaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(frmClearMaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(frmClearMaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(frmClearMaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new frmClearMaster().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblHOSign;
    private javax.swing.JLabel lblModuleName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPosName;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblUserCode;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblformName;
    private javax.swing.JPanel panelBody;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelLayout;
    private javax.swing.JPanel panelUserAuthentication;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tblFormTable;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    
    
    private void funSetData()
    {
        try
        {
            String sql = "select a.strFormName ,a.strModuleName from tblforms  a where a.strModuleType='m'";
            resultSet = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            while (resultSet.next())
            {
                Boolean flag = new Boolean(false);
                Object[] data =
                {
                    resultSet.getString(2), flag
                };
                tblFormTableModel.addRow(data);
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    private boolean funTruncateTables(List truncateForms)
    {
        if (truncateForms.size() > 0)
        {
            for (int i = 0; i < truncateForms.size(); i++)
            {
                //System.out.println(String.valueOf(truncateForms.get(i)));
                switch (String.valueOf(truncateForms.get(i)))
                {
                    case "Waiter Master":
                        funTruncateTbl("truncate tblwaitermaster");
                        break;
                    case "User Registration":
                        funTruncateTbl("truncate tbluserdtl");
                        funTruncateTbl("truncate tbluserhd"); 
                        funTruncateTbl("truncate tblsuperuserdtl"); 
                        funTruncateTbl("truncate tbluserforms"); 
                        break;
                    case "TDH":
                        funTruncateTbl("truncate tbltdhhd");
                        funTruncateTbl("truncate tbltdhcomboitemdtl");
                        break;
                    case "Tax Master":
                        funTruncateTbl("truncate tbltaxposdtl");
                        funTruncateTbl("truncate tbltaxdtl");
                        funTruncateTbl("truncate tbltaxhd");
                        funTruncateTbl("truncate tblsettlementtax");
                        break;
                    case "Table Master":
                        funTruncateTbl("truncate tbltablemaster");
                        break;
                    case "SubGroup":
                        funTruncateTbl("truncate tblsubgrouphd");
                        funTruncateTbl("truncate tblsubmenuhead");
                        break;
                    case "Shift Master":
                        funTruncateTbl("truncate tblshiftmaster");
                        break;
                    case "Settlement":
                        funTruncateTbl("truncate tblsettelmenthd");                        
                        funTruncateTbl("truncate tblpossettlementdtl");                        
                        break;
                    case "ReOrderTime":
                        funTruncateTbl("truncate tblreordertime");
                        break;
                    case "DebitCardRegister":
                        funTruncateTbl("truncate tbldebitcardmaster");
                        break;
                    case "RecipeMaster":
                        funTruncateTbl("truncate tblrecipedtl");
                        funTruncateTbl("truncate tblrecipehd");
                        break;
                    case "RechargeDebitCard":
                        funTruncateTbl("truncate tbldebitcardrecharge");
                        break;
                    case "Reason Master":
                        funTruncateTbl("truncate tblreasonmaster");
                        break;
                    case "Promotion Master":
                        funTruncateTbl("truncate tblpromotionmaster");
                        funTruncateTbl("truncate tblbuypromotiondtl");
                        funTruncateTbl("truncate tblpromotiondtl");
                        funTruncateTbl("truncate tblpromotiondaytimedtl");
                        break;
                    case "Price Menu":
                        funTruncateTbl("truncate tblmenuitempricingdtl");
                        funTruncateTbl("truncate tblmenuitempricinghd");
                        funTruncateTbl("truncate tblitempricingauditdtl");
                        break;
                    case "POS Master":
                        funTruncateTbl("truncate tblposmaster");
                        funTruncateTbl("update tblsetup set strPOSCode='All' where strPOSCode<>'All' limit 1 ");
                        funTruncateTbl("delete from tblsetup where strPOSCode<>'All' ");
                        break;
                    case "ModifierGroupMaster":
                        funTruncateTbl("truncate tblmodifiermaster");
                        funTruncateTbl("truncate tblmodifiergrouphd");
                        break;
                    case "Menu Item":
                        funTruncateTbl("truncate tblitemmaster");
                        funTruncateTbl("truncate tblitemmasterlinkupdtl");
                        funTruncateTbl("truncate tblitemorderingdtl");
                        funTruncateTbl("truncate tblitemcharctersticslinkupdtl");
                        break;
                    case "Menu Head":
                        funTruncateTbl("truncate tblmenuhd");
                        funTruncateTbl("truncate tblsubmenuhead");
                        break;
                    case "LoyaltyPoints":
                        funTruncateTbl("truncate tblloyaltypoints");
                        break;
                    case "Item Modifier":
                        funTruncateTbl("truncate tblitemmodofier");
                        break;
                    case "Assign Home Delivery":
                        funTruncateTbl("truncate tblhomedelivery");
                        break;
                    case "Group":
                        funTruncateTbl("truncate tblgrouphd");
                        break;
                    case "GiftVoucherMaster":
                        funTruncateTbl("truncate tblgiftvoucher");
                        break;
                    case "DebitCardMaster":
                        funTruncateTbl("truncate tbldebitcardmaster");
                        funTruncateTbl("truncate tbldebitcardtype");
                        break;
                    case "CustomerTypeMaster":
                        funTruncateTbl("truncate tblcustomertypemaster");
                        break;
                    case "Customer Master":
                        funTruncateTbl("truncate tblcustomermaster");
                        break;
                    case "CounterMaster":
                        funTruncateTbl("truncate tblcounterdtl");
                        funTruncateTbl("truncate tblcounterhd");
                        break;
                    case "Cost Center":
                        funTruncateTbl("truncate tblcostcentermaster");
                        funTruncateTbl("truncate tblprintersetup");
                        break;
                    case "Bulk Menu Item Pricing":
                        funTruncateTbl("truncate tblmenuitempricingdtl");
                        funTruncateTbl("truncate tblmenuitempricinghd");
                        break;
                    case "Customer Area Master":
                        funTruncateTbl("truncate tblbuildingmaster");
                        funTruncateTbl("truncate tblareawisedc");
                        break;
                    case "Area Master":
                        funTruncateTbl("truncate tblareamaster");
                        break;
                    case "Advance Order Type Master":
                        funTruncateTbl("truncate tbladvanceordertypemaster");
                        break;
                    case "Zone Master":
                        funTruncateTbl("truncate tblzonemaster");
                        break;
                    case "Home Delivery Person":
                        funTruncateTbl("truncate tbldeliverypersonmaster");
                        funTruncateTbl("truncate tblareawisedelboywisecharges");
                        break;
                    case "Order Master":
                        funTruncateTbl("truncate tblordermaster");
                        break;    
                    case "Characterstics Master":
                        funTruncateTbl("truncate tblcharactersticsmaster");
                        funTruncateTbl("truncate tblcharvalue");
                        break;  
                    case "Item Wise Incentives":
                        funTruncateTbl("truncate tblposwiseitemwiseincentives");
                        break;   
                    case "Factory Master":
                        funTruncateTbl("truncate tblfactorymaster");
                        break; 
                        
                    case "Promotion Group Master":
                        funTruncateTbl("truncate tblpromogroupmaster");
                        funTruncateTbl("truncate tblpromogroupdtl");
                        break;
                        
                        
                           
                }
            }
            
            funTruncateTbl("truncate tblshortcutkeysetup");
            funTruncateTbl("truncate tblmasteroperationstatus");
            return true;
        }
        return false;
    }

    private void funTruncateTbl(String sql)
    {

        try
        {
            clsGlobalVarClass.dbMysql.execute(sql);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }  
}
