/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.POSMaster.view;

import com.POSGlobal.controller.clsGlobalVarClass;
import com.POSGlobal.controller.clsTextFieldOnlyNumber;
import com.POSGlobal.controller.clsUtility;
import com.POSGlobal.view.frmNumericKeyboard;
import com.POSGlobal.view.frmOkPopUp;
import com.POSGlobal.view.frmSearchFormDialog;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.sql.ResultSet;
import java.util.Date;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sss11
 */
public class frmTDH extends javax.swing.JFrame
{

    private String sql, groupCode, imageName;
    private int posCount;
    private int count, rowNo, clickCount, grpCode;
    ResultSet posNameSet, countSet, rs;
    private String code, menuCode, menuName;
    private String strCode, posNames = "";
    private String gpCode, posCodes = "", selectedMenuHeadCode, ItemCode, ItemName, costCenterCode, TDHCode, tdhItemApplicable;
    private java.util.Vector vModifierCode, vModifierName;
    private int exec;
    private String tdhOnMenuHeadCode;
    clsUtility objUtility = new clsUtility();
    
    /**
     * This method is used to initialize frmTDH
     */
    public frmTDH()
    {
        initComponents();

        try
        {
            Timer timer = new Timer(500, new ActionListener()
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    Date date1 = new Date();
                    String newstr = String.format("%tr", date1);
                    String dateAndTime = clsGlobalVarClass.gPOSDateToDisplay + " " + newstr;
                    lblDate.setText(dateAndTime);
                }
            });
            timer.setRepeats(true);
            timer.setCoalesce(true);
            timer.setInitialDelay(0);
            timer.start();
            txtQuantity.setText("0");
            txtQuantity.setDocument(new clsTextFieldOnlyNumber(6, 2).new JNumberFieldFilter());
            txtMaxNoOfItems.setDocument(new clsTextFieldOnlyNumber(2, 2).new JNumberFieldFilter());

            cmbTDHOnItem.setEnabled(false);
            ItemTableScrollPane.setVisible(false);
            ModifierTableScrollPane.setVisible(false);
            ModifierTableScrollPane.setSize(600, 150);
            ItemTableScrollPane.setSize(600, 150);
            btnAddCourse.setVisible(false);
            btnRemoveItem.setVisible(false);
            lblUserCode.setText(clsGlobalVarClass.gUserCode);
            lblPosName.setText(clsGlobalVarClass.gPOSName);
            lblDate.setText(clsGlobalVarClass.gPOSDateToDisplay);
            lblModuleName.setText(clsGlobalVarClass.gSelectedModule);
            cmbTDHOn.requestFocus();
            funSetShortCutKeys();

            funSetVisibleTDHOnMenuHead(false);
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }

    }

    private void funSetShortCutKeys()
    {
        btnCancel.setMnemonic('c');
        btnNew.setMnemonic('s');
        btnReset.setMnemonic('r');

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        panelHeader = new javax.swing.JPanel();
        lblProductName = new javax.swing.JLabel();
        lblModuleName = new javax.swing.JLabel();
        lblformName = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblPosName = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblUserCode = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblHOSign = new javax.swing.JLabel();
        panelLayout = new JPanel() {  
            public void paintComponent(Graphics g) {  
                Image img = Toolkit.getDefaultToolkit().getImage(  
                    getClass().getResource("/com/POSMaster/images/imgBGJPOS.png"));  
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);  
            }  
        };  
        ;
        panelBody = new javax.swing.JPanel();
        panelInnerBody = new javax.swing.JPanel();
        lblTDHOn = new javax.swing.JLabel();
        lblTDHOnMenuHead = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        lblDescription = new javax.swing.JLabel();
        lblTDHCode = new javax.swing.JLabel();
        lblFormName = new javax.swing.JLabel();
        cmbTDHOnItem = new javax.swing.JComboBox();
        btnAddCourse = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        chkApplicable = new javax.swing.JCheckBox();
        txtTDHCode = new javax.swing.JTextField();
        txtTDHOnMenuHead = new javax.swing.JTextField();
        btnRemoveItem = new javax.swing.JButton();
        txtQuantity = new javax.swing.JTextField();
        cmbTDHOn = new javax.swing.JComboBox();
        lblFreeQuantity = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        ItemTableScrollPane = new javax.swing.JScrollPane();
        tblItem = new javax.swing.JTable();
        txtDescription = new javax.swing.JTextField();
        lblTDHOnItem = new javax.swing.JLabel();
        lblMenuHead = new javax.swing.JLabel();
        txtMenuHead = new javax.swing.JTextField();
        txtMaxNoOfItems = new javax.swing.JTextField();
        lblMaxNoOfItems = new javax.swing.JLabel();
        ModifierTableScrollPane = new javax.swing.JScrollPane();
        tblModifier1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosed(java.awt.event.WindowEvent evt)
            {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        panelHeader.setBackground(new java.awt.Color(69, 164, 238));
        panelHeader.setLayout(new javax.swing.BoxLayout(panelHeader, javax.swing.BoxLayout.LINE_AXIS));

        lblProductName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProductName.setForeground(new java.awt.Color(255, 255, 255));
        lblProductName.setText("SPOS -");
        panelHeader.add(lblProductName);

        lblModuleName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblModuleName.setForeground(new java.awt.Color(255, 255, 255));
        panelHeader.add(lblModuleName);

        lblformName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblformName.setForeground(new java.awt.Color(255, 255, 255));
        lblformName.setText("- TDH");
        panelHeader.add(lblformName);
        panelHeader.add(filler4);
        panelHeader.add(filler5);

        lblPosName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPosName.setForeground(new java.awt.Color(255, 255, 255));
        lblPosName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPosName.setMaximumSize(new java.awt.Dimension(321, 30));
        lblPosName.setMinimumSize(new java.awt.Dimension(321, 30));
        lblPosName.setPreferredSize(new java.awt.Dimension(321, 30));
        panelHeader.add(lblPosName);
        panelHeader.add(filler6);

        lblUserCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUserCode.setForeground(new java.awt.Color(255, 255, 255));
        lblUserCode.setMaximumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setMinimumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setPreferredSize(new java.awt.Dimension(90, 30));
        panelHeader.add(lblUserCode);

        lblDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setMaximumSize(new java.awt.Dimension(192, 30));
        lblDate.setMinimumSize(new java.awt.Dimension(192, 30));
        lblDate.setPreferredSize(new java.awt.Dimension(192, 30));
        panelHeader.add(lblDate);

        lblHOSign.setMaximumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setMinimumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setPreferredSize(new java.awt.Dimension(34, 30));
        panelHeader.add(lblHOSign);

        getContentPane().add(panelHeader, java.awt.BorderLayout.PAGE_START);

        panelLayout.setLayout(new java.awt.GridBagLayout());

        panelBody.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelBody.setMinimumSize(new java.awt.Dimension(800, 570));
        panelBody.setOpaque(false);

        panelInnerBody.setOpaque(false);
        panelInnerBody.setPreferredSize(new java.awt.Dimension(800, 570));

        lblTDHOn.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblTDHOn.setText("TDH On");

        lblTDHOnMenuHead.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblTDHOnMenuHead.setText("TDH On Menu Head");

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnCancel.setText("CLOSE");
        btnCancel.setToolTipText("Close TDH Master");
        btnCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancel.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnCancelMouseClicked(evt);
            }
        });
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        lblDescription.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDescription.setText("Description");

        lblTDHCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblTDHCode.setText("T.D.H Code");

        lblFormName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblFormName.setForeground(new java.awt.Color(24, 19, 19));
        lblFormName.setText("T D H");

        cmbTDHOnItem.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                cmbTDHOnItemItemStateChanged(evt);
            }
        });
        cmbTDHOnItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbTDHOnItemActionPerformed(evt);
            }
        });
        cmbTDHOnItem.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                cmbTDHOnItemKeyPressed(evt);
            }
        });

        btnAddCourse.setText("Add Course");
        btnAddCourse.setToolTipText("Add Course");
        btnAddCourse.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnAddCourseMouseClicked(evt);
            }
        });
        btnAddCourse.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAddCourseActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnReset.setText("RESET");
        btnReset.setToolTipText("Reset All Fields");
        btnReset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReset.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnReset.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnResetMouseClicked(evt);
            }
        });
        btnReset.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnResetActionPerformed(evt);
            }
        });

        chkApplicable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        chkApplicable.setText("Applicable      ");
        chkApplicable.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        chkApplicable.setOpaque(false);
        chkApplicable.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chkApplicableActionPerformed(evt);
            }
        });
        chkApplicable.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                chkApplicableKeyPressed(evt);
            }
        });

        txtTDHCode.setEditable(false);
        txtTDHCode.setBackground(new java.awt.Color(204, 204, 204));
        txtTDHCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtTDHCode.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                txtTDHCodeMouseClicked(evt);
            }
        });
        txtTDHCode.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                txtTDHCodeActionPerformed(evt);
            }
        });
        txtTDHCode.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                txtTDHCodeKeyPressed(evt);
            }
        });

        txtTDHOnMenuHead.setEditable(false);
        txtTDHOnMenuHead.setBackground(new java.awt.Color(204, 204, 204));
        txtTDHOnMenuHead.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                txtTDHOnMenuHeadMouseClicked(evt);
            }
        });
        txtTDHOnMenuHead.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                txtTDHOnMenuHeadKeyPressed(evt);
            }
        });

        btnRemoveItem.setText("Remove Item");
        btnRemoveItem.setToolTipText("Remove Item");
        btnRemoveItem.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnRemoveItemMouseClicked(evt);
            }
        });

        txtQuantity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtQuantity.setText("0");
        txtQuantity.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                txtQuantityMouseClicked(evt);
            }
        });
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                txtQuantityKeyPressed(evt);
            }
        });

        cmbTDHOn.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select--", "Item", "Modifier" }));
        cmbTDHOn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbTDHOnActionPerformed(evt);
            }
        });
        cmbTDHOn.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                cmbTDHOnKeyPressed(evt);
            }
        });

        lblFreeQuantity.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblFreeQuantity.setText("Free Quantity");

        btnNew.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNew.setForeground(new java.awt.Color(255, 255, 255));
        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnNew.setText("SAVE");
        btnNew.setToolTipText("Save TDH");
        btnNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNew.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnNew.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnNewMouseClicked(evt);
            }
        });
        btnNew.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnNewActionPerformed(evt);
            }
        });
        btnNew.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                btnNewKeyPressed(evt);
            }
        });

        tblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Item Code", "Menu Item", "Default", "Max. QTY", "Menu Code"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tblItem.setRowHeight(24);
        tblItem.getTableHeader().setReorderingAllowed(false);
        ItemTableScrollPane.setViewportView(tblItem);
        if (tblItem.getColumnModel().getColumnCount() > 0)
        {
            tblItem.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblItem.getColumnModel().getColumn(1).setPreferredWidth(200);
            tblItem.getColumnModel().getColumn(3).setResizable(false);
            tblItem.getColumnModel().getColumn(4).setResizable(false);
        }

        txtDescription.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtDescription.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                txtDescriptionKeyPressed(evt);
            }
        });

        lblTDHOnItem.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblTDHOnItem.setText("TDH On Item");

        lblMenuHead.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblMenuHead.setText("Menu Head");

        txtMenuHead.setEditable(false);
        txtMenuHead.setBackground(new java.awt.Color(204, 204, 204));
        txtMenuHead.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                txtMenuHeadMouseClicked(evt);
            }
        });
        txtMenuHead.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                txtMenuHeadKeyPressed(evt);
            }
        });

        txtMaxNoOfItems.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtMaxNoOfItems.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMaxNoOfItems.setText("1");
        txtMaxNoOfItems.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                txtMaxNoOfItemsKeyPressed(evt);
            }
        });

        lblMaxNoOfItems.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblMaxNoOfItems.setText("Max Item Quantity");

        tblModifier1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String []
            {
                "Modifier Code", "Modifier Name", "Quantity"
            }
        )
        {
            boolean[] canEdit = new boolean []
            {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tblModifier1.setRowHeight(24);
        tblModifier1.getTableHeader().setReorderingAllowed(false);
        ModifierTableScrollPane.setViewportView(tblModifier1);

        javax.swing.GroupLayout panelInnerBodyLayout = new javax.swing.GroupLayout(panelInnerBody);
        panelInnerBody.setLayout(panelInnerBodyLayout);
        panelInnerBodyLayout.setHorizontalGroup(
            panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInnerBodyLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
            .addGroup(panelInnerBodyLayout.createSequentialGroup()
                .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInnerBodyLayout.createSequentialGroup()
                        .addGap(357, 357, 357)
                        .addComponent(lblFormName, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelInnerBodyLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelInnerBodyLayout.createSequentialGroup()
                                .addComponent(btnAddCourse)
                                .addGap(18, 18, 18)
                                .addComponent(btnRemoveItem))
                            .addComponent(ItemTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(panelInnerBodyLayout.createSequentialGroup()
                                    .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(panelInnerBodyLayout.createSequentialGroup()
                                            .addComponent(lblTDHOnMenuHead, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtTDHOnMenuHead, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelInnerBodyLayout.createSequentialGroup()
                                                .addComponent(lblTDHOn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cmbTDHOn, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(panelInnerBodyLayout.createSequentialGroup()
                                                .addComponent(lblFreeQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(panelInnerBodyLayout.createSequentialGroup()
                                            .addComponent(lblTDHCode, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtTDHCode, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(42, 42, 42)
                                    .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(panelInnerBodyLayout.createSequentialGroup()
                                            .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lblTDHOnItem))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtDescription)
                                                .addComponent(cmbTDHOnItem, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(chkApplicable)))
                                .addGroup(panelInnerBodyLayout.createSequentialGroup()
                                    .addComponent(lblMenuHead, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtMenuHead, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(42, 42, 42)
                                    .addComponent(lblMaxNoOfItems)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtMaxNoOfItems, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(119, Short.MAX_VALUE))
            .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInnerBodyLayout.createSequentialGroup()
                    .addContainerGap(174, Short.MAX_VALUE)
                    .addComponent(ModifierTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(118, Short.MAX_VALUE)))
        );
        panelInnerBodyLayout.setVerticalGroup(
            panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInnerBodyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFormName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInnerBodyLayout.createSequentialGroup()
                        .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTDHOnItem, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTDHOnItem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInnerBodyLayout.createSequentialGroup()
                        .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTDHOn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTDHOn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTDHCode, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelInnerBodyLayout.createSequentialGroup()
                                .addComponent(txtTDHCode, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)))
                        .addGap(20, 20, 20)
                        .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTDHOnMenuHead, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTDHOnMenuHead, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFreeQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkApplicable, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20)
                .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMenuHead, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblMenuHead, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblMaxNoOfItems, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMaxNoOfItems, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ItemTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveItem, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(panelInnerBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInnerBodyLayout.createSequentialGroup()
                    .addContainerGap(301, Short.MAX_VALUE)
                    .addComponent(ModifierTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(105, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout panelBodyLayout = new javax.swing.GroupLayout(panelBody);
        panelBody.setLayout(panelBodyLayout);
        panelBodyLayout.setHorizontalGroup(
            panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBodyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelInnerBody, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBodyLayout.setVerticalGroup(
            panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelInnerBody, javax.swing.GroupLayout.PREFERRED_SIZE, 581, Short.MAX_VALUE)
        );

        panelLayout.add(panelBody, new java.awt.GridBagConstraints());

        getContentPane().add(panelLayout, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseClicked
        // TODO add your handling code here:
        dispose();
        clsGlobalVarClass.hmActiveForms.remove("TDH");
    }//GEN-LAST:event_btnCancelMouseClicked

    private void cmbTDHOnItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTDHOnItemActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbTDHOnItemActionPerformed

    private void btnAddCourseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddCourseMouseClicked

        if (txtMenuHead.getText() == null || txtMenuHead.getText().isEmpty())
        {
            new frmOkPopUp(this, " Please Select Menu Head.", "", 1).setVisible(true);
            txtMenuHead.requestFocus();
            return;
        }
        else
        {
            System.out.println("costCenterCode:" + costCenterCode);
            new frmItemSearch(this, this, true, costCenterCode, selectedMenuHeadCode).setVisible(true);
        }
    }//GEN-LAST:event_btnAddCourseMouseClicked

    private void btnResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseClicked
        // TODO add your handling code here:
        funResetFields();
    }//GEN-LAST:event_btnResetMouseClicked

    private void txtTDHCodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTDHCodeMouseClicked
        // TODO add your handling code here:
        try
        {
            if (cmbTDHOn.getSelectedIndex() == 0)
            {
                new frmOkPopUp(this, " Please Select TDH On ", "", 1).setVisible(true);
                cmbTDHOn.requestFocus();

            }
            else
            {
                //funResetFields();
                funTDHSelectForUpdate();

                if (cmbTDHOn.getSelectedIndex() == 0)
                {
                    funSetVisibleComboItemPanels(false);
                    funSetVisibleModifierPanels(false);
                }
                else if (cmbTDHOn.getSelectedIndex() == 1)
                {
                    funSetVisibleModifierPanels(false);
                    funSetVisibleComboItemPanels(true);
                }
                else if (cmbTDHOn.getSelectedIndex() == 2)
                {
                    funSetVisibleComboItemPanels(false);
                    funSetVisibleModifierPanels(true);
                }
            }
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtTDHCodeMouseClicked

    private void txtTDHOnMenuHeadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtTDHOnMenuHeadMouseClicked

        if (cmbTDHOn.getSelectedIndex() == 0)
        {
            new frmOkPopUp(this, " Please Select TDH On.", "", 1).setVisible(true);
            cmbTDHOn.requestFocus();
            return;
        }
        else
        {
            cmbTDHOnItem.removeAllItems();
            cmbTDHOnItem.setEnabled(false);
            txtQuantity.setText(String.valueOf(0));
            chkApplicable.setSelected(false);

            DefaultTableModel dm = (DefaultTableModel) tblItem.getModel();
            dm.setRowCount(0);
            tblItem.setModel(dm);

            DefaultTableModel dm2 = (DefaultTableModel) tblModifier1.getModel();
            dm2.setRowCount(0);
            tblModifier1.setModel(dm2);

            if (txtTDHCode.getText().trim().length() > 0)
            {
                btnNew.setText("UPDATE");
            }
            else
            {
                btnNew.setText("SAVE");
            }

            funSelectTDHOnMenuHeadCode();
        }
    }//GEN-LAST:event_txtTDHOnMenuHeadMouseClicked

    private void btnRemoveItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRemoveItemMouseClicked
        try
        {
            DefaultTableModel dm = (DefaultTableModel) tblItem.getModel();
            if (cmbTDHOn.getSelectedIndex() == 1 && "SAVE".equalsIgnoreCase(btnNew.getText()))
            {
                //delete subitem from jtable tblItem as it is not save in database
                if (tblItem.getRowCount() > 0 && tblItem.getSelectedRow() > -1)
                {//button work only when there is row in this table
                    dm.removeRow(tblItem.getSelectedRow());
                    tblItem.revalidate();
                }
            }
            else if (cmbTDHOn.getSelectedIndex() == 1 && "update".equalsIgnoreCase(btnNew.getText()))
            {
                //delete data from database table tbltdhcomboitemdtl
                if (tblItem.getRowCount() > 0 && tblItem.getSelectedRow() > -1)
                {
                    String tempSubItemCode = tblItem.getValueAt(tblItem.getSelectedRow(), 0).toString();
                    sql = "delete from tbltdhcomboitemdtl where strItemCode='" + ItemCode + "' and strTDHCode='" + txtTDHCode.getText() + "' and strSubItemCode='" + tempSubItemCode + "';";
                    clsGlobalVarClass.dbMysql.execute(sql);
                    dm.setRowCount(0);
                    fillSubItemTable(ItemCode);
                    tblItem.revalidate();
                }
            }
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnRemoveItemMouseClicked

    private void cmbTDHOnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTDHOnActionPerformed
        // TODO add your handling code here:
        try
        {
            if (cmbTDHOn.getSelectedIndex() == 0)
            {
                funSetVisibleComboItemPanels(false);
                funSetVisibleModifierPanels(false);
            }
            else if (cmbTDHOn.getSelectedIndex() == 1)
            {
                funSetVisibleModifierPanels(false);
                funSetVisibleComboItemPanels(true);
            }
            else if (cmbTDHOn.getSelectedIndex() == 2)
            {
                funSetVisibleComboItemPanels(false);
                funSetVisibleModifierPanels(true);
            }

            funResetFields();

            funSetVisibleTDHOnMenuHead(true);
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_cmbTDHOnActionPerformed

    private void btnNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNewMouseClicked
        // TODO add your handling code here:
        if (cmbTDHOn.getSelectedIndex() == 0)
        {
            new frmOkPopUp(this, " Please Select TDH On ", "", 1).setVisible(true);
            cmbTDHOn.requestFocus();
            return;
        }
        if (cmbTDHOn.getSelectedIndex() == 1)
        {
            if (btnNew.getText().equalsIgnoreCase("SAVE"))
            {
                funSaveComboMenuItem();
                //new frmOkPopUp(this, "Save Sussessfully", "Successful", 3).setVisible(true);
                //funResetFields();
            }
            else
            {
                funUpdateComboMenuItem();
                funResetFields();
            }
        }
        else
        {
            if (btnNew.getText().equalsIgnoreCase("SAVE") && cmbTDHOn.getSelectedIndex() == 2)
            {
                funSaveData();
            }
            else
            {
                funUpdateData();  //Update Existing Menu Head
            }
        }
    }//GEN-LAST:event_btnNewMouseClicked

    private void txtTDHCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTDHCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTDHCodeActionPerformed

    private void chkApplicableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkApplicableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkApplicableActionPerformed

    private void btnAddCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCourseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddCourseActionPerformed

    private void cmbTDHOnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbTDHOnKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            txtTDHCode.requestFocus();
        }
    }//GEN-LAST:event_cmbTDHOnKeyPressed

    private void txtTDHCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTDHCodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == '?' || evt.getKeyChar() == '/')
        {
            try
            {
                if (cmbTDHOn.getSelectedIndex() == 0)
                {
                    new frmOkPopUp(this, " Please Select TDH On ", "", 1).setVisible(true);
                    cmbTDHOn.requestFocus();
                }
                else
                {
                    funResetFields();
                    txtDescription.requestFocus();
                    funTDHSelectForUpdate();
                }
            }
            catch (Exception e)
            {
                objUtility.funWriteErrorLog(e);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_txtTDHCodeKeyPressed

    private void txtDescriptionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescriptionKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            txtTDHOnMenuHead.requestFocus();
        }
    }//GEN-LAST:event_txtDescriptionKeyPressed

    private void txtTDHOnMenuHeadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTDHOnMenuHeadKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            txtQuantity.requestFocus();
        }
    }//GEN-LAST:event_txtTDHOnMenuHeadKeyPressed

    private void cmbTDHOnItemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbTDHOnItemKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_cmbTDHOnItemKeyPressed

    private void txtQuantityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            chkApplicable.requestFocus();
        }

    }//GEN-LAST:event_txtQuantityKeyPressed

    private void chkApplicableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkApplicableKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            btnNew.requestFocus();
        }
    }//GEN-LAST:event_chkApplicableKeyPressed

    private void btnNewKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnNewKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            if (cmbTDHOn.getSelectedIndex() == 0)
            {
                new frmOkPopUp(this, " Please Select TDH On ", "", 1).setVisible(true);
                cmbTDHOn.requestFocus();
                return;
            }
            if (cmbTDHOn.getSelectedIndex() == 1)
            {
                if (btnNew.getText().equalsIgnoreCase("SAVE"))
                {
                    funSaveComboMenuItem();
                    //new frmOkPopUp(this, "Save Sussessfully", "Successful", 3).setVisible(true);
                    //funResetFields();
                }
                else
                {
                    funUpdateComboMenuItem();
                    funResetFields();
                }
            }
            else
            {
                if (btnNew.getText().equalsIgnoreCase("SAVE") && cmbTDHOn.getSelectedIndex() == 2)
                {
                    funSaveData();
                }
                else
                {
                    funUpdateData();  //Update Existing Menu Head
                }
            }
        }
    }//GEN-LAST:event_btnNewKeyPressed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        dispose();
        clsGlobalVarClass.hmActiveForms.remove("TDH");
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        funResetFields();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        if (cmbTDHOn.getSelectedIndex() == 0)
        {
            new frmOkPopUp(this, " Please Select TDH On ", "", 1).setVisible(true);
            cmbTDHOn.requestFocus();
            return;
        }
        if (cmbTDHOn.getSelectedIndex() == 0)
        {
            new frmOkPopUp(this, "TDH Discription Can Not Be Blank.", "", 1).setVisible(true);
            txtDescription.requestFocus();
            return;
        }
        if (cmbTDHOn.getSelectedIndex() == 1)
        {
            if (btnNew.getText().equalsIgnoreCase("SAVE"))
            {
                funSaveComboMenuItem();
                //new frmOkPopUp(this, "Save Sussessfully", "Successful", 3).setVisible(true);
                //funResetFields();
            }
            else
            {
                funUpdateComboMenuItem();
                funResetFields();
            }
        }
        else
        {
            if (btnNew.getText().equalsIgnoreCase("SAVE") && cmbTDHOn.getSelectedIndex() == 2)
            {
                funSaveData();
            }
            else
            {
                funUpdateData();  //Update Existing Menu Head
            }
        }
        DefaultTableModel dm = (DefaultTableModel) tblItem.getModel();
        dm.setRowCount(0);
        tblItem.setModel(dm);

        DefaultTableModel dm2 = (DefaultTableModel) tblModifier1.getModel();
        dm2.setRowCount(0);
        tblModifier1.setModel(dm2);
    }//GEN-LAST:event_btnNewActionPerformed

    private void txtMenuHeadMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_txtMenuHeadMouseClicked
    {//GEN-HEADEREND:event_txtMenuHeadMouseClicked
        if (txtTDHOnMenuHead.getText() == null || txtTDHOnMenuHead.getText().isEmpty() || cmbTDHOnItem.getSelectedIndex() == 0)
        {
            new frmOkPopUp(this, "Please Select TDH On Menu Head And TDH On Item.", "", 1).setVisible(true);
            return;
        }
        else
        {
            funSelectMenuHead();
        }
    }//GEN-LAST:event_txtMenuHeadMouseClicked

    private void txtMenuHeadKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtMenuHeadKeyPressed
    {//GEN-HEADEREND:event_txtMenuHeadKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMenuHeadKeyPressed

    private void txtMaxNoOfItemsKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_txtMaxNoOfItemsKeyPressed
    {//GEN-HEADEREND:event_txtMaxNoOfItemsKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaxNoOfItemsKeyPressed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        clsGlobalVarClass.hmActiveForms.remove("TDH");
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        clsGlobalVarClass.hmActiveForms.remove("TDH");
    }//GEN-LAST:event_formWindowClosing

    private void txtQuantityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtQuantityMouseClicked
        // TODO add your handling code here:
        try
        {
            if (txtQuantity.getText().length() == 0)
            {
                new frmNumericKeyboard(this, true, txtQuantity.getText(), "Double", "Please Enter Sales Rate").setVisible(true);
                txtQuantity.setText(clsGlobalVarClass.gNumerickeyboardValue);
            }
            else
            {
                new frmNumericKeyboard(this, true, txtQuantity.getText(), "Double", "Please Enter Sales Rate").setVisible(true);
                String[] qty = clsGlobalVarClass.gNumerickeyboardValue.split("\\.");
                txtQuantity.setText(qty[0]);

            }

        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtQuantityMouseClicked

    private void cmbTDHOnItemItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_cmbTDHOnItemItemStateChanged
    {//GEN-HEADEREND:event_cmbTDHOnItemItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            DefaultTableModel dm = (DefaultTableModel) tblItem.getModel();
            dm.setRowCount(0);
            tblItem.setModel(dm);

            DefaultTableModel dm2 = (DefaultTableModel) tblModifier1.getModel();
            dm2.setRowCount(0);
            tblModifier1.setModel(dm2);

            if (cmbTDHOn.getSelectedIndex() == 0)
            {
                funSetVisibleComboItemPanels(false);
                funSetVisibleModifierPanels(false);
            }
            else if (cmbTDHOn.getSelectedIndex() == 1)
            {
                funSetVisibleModifierPanels(false);
                funSetVisibleComboItemPanels(true);
            }
            else if (cmbTDHOn.getSelectedIndex() == 2)
            {
                funSetVisibleComboItemPanels(false);
                funSetVisibleModifierPanels(true);
            }
            if (cmbTDHOn.getSelectedIndex() == 1)//item
            {
                if (cmbTDHOnItem.getSelectedItem() != null && cmbTDHOnItem.getSelectedItem().toString().trim().length() > 0)
                {
                    String Temp = cmbTDHOnItem.getSelectedItem().toString().trim();
                    String[] parts = Temp.split("-");
                    ItemName = parts[0];
                    ItemCode = parts[1];
                    fillSubItemTable(ItemCode);
                }

            }

            if (cmbTDHOn.getSelectedIndex() == 2)//modifier
            {
                if (cmbTDHOnItem.getSelectedItem() != null && cmbTDHOnItem.getSelectedItem().toString().trim().length() > 0)
                {
                    funSetVisibleComboItemPanels(false);
                    funSetVisibleModifierPanels(true);

                    String Temp = cmbTDHOnItem.getSelectedItem().toString().trim();
                    String[] parts = Temp.split("-");
                    ItemName = parts[0];
                    ItemCode = parts[1];
//            costCenterCode = getCostCenterCode(ItemCode);
                    fillModifierTable(ItemCode);
                }
            }

        }
    }//GEN-LAST:event_cmbTDHOnItemItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(frmTDH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(frmTDH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(frmTDH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(frmTDH.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new frmTDH().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ItemTableScrollPane;
    private javax.swing.JScrollPane ModifierTableScrollPane;
    private javax.swing.JButton btnAddCourse;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnRemoveItem;
    private javax.swing.JButton btnReset;
    private javax.swing.JCheckBox chkApplicable;
    private javax.swing.JComboBox cmbTDHOn;
    private javax.swing.JComboBox cmbTDHOnItem;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblFormName;
    private javax.swing.JLabel lblFreeQuantity;
    private javax.swing.JLabel lblHOSign;
    private javax.swing.JLabel lblMaxNoOfItems;
    private javax.swing.JLabel lblMenuHead;
    private javax.swing.JLabel lblModuleName;
    private javax.swing.JLabel lblPosName;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblTDHCode;
    private javax.swing.JLabel lblTDHOn;
    private javax.swing.JLabel lblTDHOnItem;
    private javax.swing.JLabel lblTDHOnMenuHead;
    private javax.swing.JLabel lblUserCode;
    private javax.swing.JLabel lblformName;
    private javax.swing.JPanel panelBody;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelInnerBody;
    private javax.swing.JPanel panelLayout;
    public javax.swing.JTable tblItem;
    private javax.swing.JTable tblModifier1;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtMaxNoOfItems;
    private javax.swing.JTextField txtMenuHead;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtTDHCode;
    private javax.swing.JTextField txtTDHOnMenuHead;
    // End of variables declaration//GEN-END:variables
    /**
     * This method is used to set data
     *
     * @param data
     */
    public void setData(Object[] data)
    {
        try
        {
            tdhOnMenuHeadCode = data[0].toString();
            txtTDHOnMenuHead.setText(data[1].toString());
            selectedMenuHeadCode = tdhOnMenuHeadCode;
            funFillComboMenuItem(tdhOnMenuHeadCode);

        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to select menu head code
     */
    public void funSelectTDHOnMenuHeadCode()
    {
        try
        {
            clsUtility obj = new clsUtility();
            obj.funCallForSearchForm("Menu");
            new frmSearchFormDialog(this, true).setVisible(true);
            if (clsGlobalVarClass.gSearchItemClicked)
            {
                Object[] data = clsGlobalVarClass.gArrListSearchData.toArray();
                setData(data);
                clsGlobalVarClass.gSearchItemClicked = false;
            }
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to fill menu item combo box
     *
     * @param MenuHeadCode
     */
    private void funFillComboMenuItem(String menuHeadCode)
    {
        try
        {
            sql = " select strItemName,strItemCode from tblmenuitempricingdtl where strMenuCode='" + menuHeadCode + "' group by strItemCode ";
            ResultSet rs = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            cmbTDHOnItem.setEnabled(true);
            cmbTDHOnItem.removeAllItems();
            cmbTDHOnItem.addItem("--Select--");
            while (rs.next())
            {
                cmbTDHOnItem.addItem(rs.getString(1) + "-" + rs.getString(2));
            }
            rs.close();
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to save data
     */
    private void funSaveData()
    {
        try
        {
            tdhItemApplicable = "N";
            if (chkApplicable.isSelected() == true)
            {
                tdhItemApplicable = "Y";
            }
            if (!clsGlobalVarClass.validateEmpty(txtTDHOnMenuHead.getText()))
            {
                new frmOkPopUp(this, " Please Select Menu Head ", "", 1).setVisible(true);
                txtTDHOnMenuHead.requestFocus();
                return;
            }
            if (funCheckDuplicateEnrty())
            {
                new frmOkPopUp(this, " Item Already Added To TDH ", "", 1).setVisible(true);
                return;
            }
            DefaultTableModel dm = (DefaultTableModel) tblModifier1.getModel();
            int rows = dm.getRowCount();
            if (rows == 0)
            {
                new frmOkPopUp(this, " Not T.D.H Menu Item ", "", 1).setVisible(true);
                return;
            }
            if (!clsGlobalVarClass.validateEmpty(txtQuantity.getText()))
            {
                new frmOkPopUp(this, " Please Enter Quantity ", "", 1).setVisible(true);
                txtQuantity.requestFocus();
                return;
            }
            sql = " insert into tbltdhhd (strTDHCode,strDescription,strMenuCode,strItemCode,intMaxQuantity,strApplicable,strClientCode)"
                    + " values ('" + getTDHNo() + "','" + txtDescription.getText() + "','" + tdhOnMenuHeadCode
                    + "','" + ItemCode + "','" + txtQuantity.getText() + "','" + tdhItemApplicable + "','" + clsGlobalVarClass.gClientCode + "');";
            int exec = clsGlobalVarClass.dbMysql.execute(sql);
            if (exec > 0)
            {
                new frmOkPopUp(this, "Entry Added Sussessfully", "Successful", 3).setVisible(true);
                funResetFields();
            }
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to fill modifier table
     *
     * @param ItemCode
     */
    private void fillModifierTable(String ItemCode)
    {
        try
        {
            vModifierCode = new java.util.Vector();
            vModifierName = new java.util.Vector();
            DefaultTableModel dm = (DefaultTableModel) tblModifier1.getModel();
            dm.getDataVector().removeAllElements();
            sql = "select a.strModifierCode, b.strModifierName  from tblitemmodofier a, tblmodifiermaster b where a.strModifierCode=b.strModifierCode and a.strItemCode='" + ItemCode + "'";
            rs = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            while (rs.next())
            {
                vModifierCode.add(rs.getString(1));
                vModifierName.add(rs.getString(2));
                Object[] ob =
                {
                    rs.getString(1), rs.getString(2), 1
                };
                dm.addRow(ob);
            }
            rs.close();
            int count = 0;
            tblModifier1.setModel(dm);
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to get TDH no
     *
     * @return
     */
    private String getTDHNo()
    {
        try
        {
            String selectQuery = "";
            selectQuery = "select count(*) from tbltdhhd";
            ResultSet rsCountSet1 = clsGlobalVarClass.dbMysql.executeResultSet(selectQuery);
            rsCountSet1.next();
            int cn = rsCountSet1.getInt(1);
            rsCountSet1.close();
            if (cn > 0)
            {
                selectQuery = "select max(strTDHCode) from tbltdhhd";
                ResultSet rsCountSet = clsGlobalVarClass.dbMysql.executeResultSet(selectQuery);
                rsCountSet.next();
                code = rsCountSet.getString(1);
                StringBuilder sb = new StringBuilder(code);
                String ss = sb.delete(0, 2).toString();
                for (int i = 0; i < ss.length(); i++)
                {
                    if (ss.charAt(i) != '0')
                    {
                        strCode = ss.substring(i, ss.length());
                        break;
                    }
                }
                int intCode = Integer.parseInt(strCode);
                intCode++;
                //System.out.println(intCode+"\t"+strCode);
                if (intCode < 10)
                {
                    TDHCode = "TD000000" + intCode;
                }
                else if (intCode < 100)
                {
                    TDHCode = "TD00000" + intCode;
                }
                else if (intCode < 1000)
                {
                    TDHCode = "TD0000" + intCode;
                }
                else if (intCode < 10000)
                {
                    TDHCode = "TD000" + intCode;
                }
                else if (intCode < 100000)
                {
                    TDHCode = "TD00" + intCode;
                }
                else if (intCode < 1000000)
                {
                    TDHCode = "TD0" + intCode;
                }
            }
            else
            {
                TDHCode = "TD0000001";
            }
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
        return TDHCode;

    }

    /**
     * This method is used to reset fields
     */
    private void funResetFields()
    {

        txtTDHCode.setText("");
        txtDescription.setText("");
        txtTDHOnMenuHead.setText("");
        cmbTDHOnItem.removeAllItems();
        cmbTDHOnItem.setEnabled(false);
        txtQuantity.setText("0");
        chkApplicable.setSelected(false);
        txtMaxNoOfItems.setText("1");
        txtMenuHead.setText("");
        btnNew.setText("SAVE");
    }

    /**
     * This method is used to check duplicate entries
     *
     * @return
     */
    private boolean funCheckDuplicateEnrty()
    {
        boolean flagDuplicate = false;
        try
        {
            sql = "select count(strItemCode) from tbltdhhd where strItemCode='" + ItemCode + "' and strComboItemYN='Y';";
            rs = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            rs.next();
            int count = rs.getInt(1);
            if (count > 0)
            {
                flagDuplicate = true;
            }
            rs.close();
        }
        catch (Exception e)
        {
        }
        finally
        {
            return flagDuplicate;
        }
    }

    /**
     * This method is used to update
     */
    private void funTDHSelectForUpdate()
    {
        try
        {
            clsUtility obj = new clsUtility();
            if (cmbTDHOn.getSelectedIndex() == 1)
            {
                obj.funCallForSearchForm("TDHOnItem");

                new frmSearchFormDialog(this, true).setVisible(true);
                if (clsGlobalVarClass.gSearchItemClicked)
                {
                    btnNew.setText("UPDATE");
                    Object[] data = clsGlobalVarClass.gArrListSearchData.toArray();
                    setDataForTDHOnItem(data);
                    clsGlobalVarClass.gSearchItemClicked = false;
                }
            }
            else if (cmbTDHOn.getSelectedIndex() == 2)
            {
                obj.funCallForSearchForm("TDH");

                new frmSearchFormDialog(this, true).setVisible(true);
                if (clsGlobalVarClass.gSearchItemClicked)
                {
                    btnNew.setText("UPDATE");
                    Object[] data = clsGlobalVarClass.gArrListSearchData.toArray();
                    setDataForTDHOnModifier(data);
                    clsGlobalVarClass.gSearchItemClicked = false;
                }
            }

        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to setDataForTDHOnItem
     *
     * @param data
     */
    public void setDataForTDHOnItem(Object[] data)
    {//for Update TDH quantity
        try
        {
            txtTDHCode.setText(data[0].toString());
            txtDescription.setText(data[1].toString());
            txtQuantity.setText(data[5].toString());
            tdhOnMenuHeadCode = data[2].toString();
            ItemCode = data[4].toString();
            sql = "select strMenuName from tblmenuhd where strMenuCode='" + tdhOnMenuHeadCode + "'";
            rs = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            rs.next();
            txtTDHOnMenuHead.setText(rs.getString(1));
            rs.close();
            sql = "select strApplicable from tbltdhhd where strTDHCode='" + data[0].toString() + "'";
            rs = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            rs.next();
            tdhItemApplicable = rs.getString(1);
            if ("Y".equalsIgnoreCase(tdhItemApplicable))
            {
                chkApplicable.setSelected(true);
            }
            else
            {
                chkApplicable.setSelected(false);
            }
            rs.close();
            // funFillComboMenuItem(selectedMenuHeadCode);
            cmbTDHOnItem.addItem(" ");
            cmbTDHOnItem.addItem(data[3].toString() + "-" + ItemCode);
            cmbTDHOnItem.setSelectedItem(data[3].toString() + "-" + ItemCode);
            if (cmbTDHOn.getSelectedIndex() == 1)
            {
                fillSubItemTable(ItemCode);
            }
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to setDataForTDHOnItem
     *
     * @param data
     */
    public void setDataForTDHOnModifier(Object[] data)
    {//for Update TDH quantity
        try
        {
            txtTDHCode.setText(data[0].toString());
            txtDescription.setText(data[1].toString());
            String menuName = data[2].toString();
            String itemName = data[3].toString();
            txtQuantity.setText(data[4].toString());
            String applicable = data[5].toString();
            ItemCode = data[6].toString();
            tdhOnMenuHeadCode = data[7].toString();
            selectedMenuHeadCode = tdhOnMenuHeadCode;

            txtTDHOnMenuHead.setText(menuName);
            tdhItemApplicable = applicable;
            if ("Y".equalsIgnoreCase(tdhItemApplicable))
            {
                chkApplicable.setSelected(true);
            }
            else
            {
                chkApplicable.setSelected(false);
            }

            cmbTDHOnItem.addItem(" ");
            cmbTDHOnItem.addItem(itemName + "-" + ItemCode);
            cmbTDHOnItem.setSelectedItem(itemName + "-" + ItemCode);

            fillModifierTable(ItemCode);
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to update data
     */
    private void funUpdateData()
    {
        try
        {
            tdhItemApplicable = "N";
            if (chkApplicable.isSelected() == true)
            {
                tdhItemApplicable = "Y";

            }
            if (!clsGlobalVarClass.validateEmpty(txtTDHOnMenuHead.getText()))
            {
                new frmOkPopUp(this, " Please Select Menu Head ", "", 1).setVisible(true);
                txtTDHOnMenuHead.requestFocus();
                return;
            }

            DefaultTableModel dm = (DefaultTableModel) tblModifier1.getModel();
            int rows = dm.getRowCount();
            if (rows == 0)
            {
                new frmOkPopUp(this, " Not T.D.H Menu Item ", "", 1).setVisible(true);
                return;
            }

            if (!clsGlobalVarClass.validateEmpty(txtQuantity.getText()))
            {
                new frmOkPopUp(this, " Please Enter Quantity ", "", 1).setVisible(true);
                txtQuantity.requestFocus();
                return;
            }
            sql = "update tbltdhhd set intMaxQuantity='" + txtQuantity.getText() + "',strApplicable='" + tdhItemApplicable + "',strMenuCode='" + selectedMenuHeadCode + "',strItemCode='" + ItemCode + "' "
                    + " where strTDHCode='" + txtTDHCode.getText() + "' ;";
            int exec = clsGlobalVarClass.dbMysql.execute(sql);
            if (exec > 0)
            {
                new frmOkPopUp(this, "Entry Update Sussessfully", "Successful", 3).setVisible(true);
                funResetFields();
            }
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to addd row
     */
    public void addRow()
    {
        DefaultTableModel dm = (DefaultTableModel) tblItem.getModel();
        Object[] ob =
        {
            "hi", "Me"
        };
        dm.addRow(ob);
        tblItem.setModel(dm);
    }

    /**
     * This method is used to update menu item combo
     */
    private void funUpdateComboMenuItem()
    {
        try
        {
            if (!clsGlobalVarClass.validateEmpty(txtQuantity.getText()))
            {
                new frmOkPopUp(this, " Please Enter Max Quantity ", "", 1).setVisible(true);
                txtQuantity.requestFocus();
                return;
            }
            tdhItemApplicable = "N";
            if (chkApplicable.isSelected() == true)
            {
                tdhItemApplicable = "Y";
            }

            sql = "update tbltdhhd set strDescription='" + txtDescription.getText() + "',intMaxQuantity='" + txtQuantity.getText() + "'"
                    + ",strApplicable='" + tdhItemApplicable + "',strMenuCode='"+selectedMenuHeadCode+"',strItemCode='"+ItemCode+"' "
                    + " where strTDHCode='" + txtTDHCode.getText() + "'";
            clsGlobalVarClass.dbMysql.execute(sql);
            sql = "delete from tbltdhcomboitemdtl where  strTDHCode='" + txtTDHCode.getText() + "' ;";
            clsGlobalVarClass.dbMysql.execute(sql);
            for (int i = 0; i < tblItem.getRowCount(); i++)
            {
                String defaultval = "N";
                if (Boolean.valueOf(tblItem.getValueAt(i, 2).toString()) == true)
                {
                    defaultval = "Y";
                }
                sql = "insert into tbltdhcomboitemdtl (strTDHCode,strItemCode,strSubItemCode,intSubItemQty,strDefaultYN,strSubItemMenuCode,strClientCode) values ("
                        + "'" + txtTDHCode.getText() + "','" + ItemCode + "','" + tblItem.getValueAt(i, 0).toString() + "','" + tblItem.getValueAt(i, 3).toString() + "','" + defaultval + "'"
                        + ",'" + tblItem.getValueAt(i, 4).toString() + "','"+clsGlobalVarClass.gClientCode+"');";
                exec = clsGlobalVarClass.dbMysql.execute(sql);
            }
            if (exec > 0)
            {
                new frmOkPopUp(this, "Entry Update Sussessfully", "Successful", 3).setVisible(true);
                funResetFields();
            }
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to save menu item combo
     */
    private void funSaveComboMenuItem()
    {
        try
        {
            if (!clsGlobalVarClass.validateEmpty(txtTDHOnMenuHead.getText()))
            {
                new frmOkPopUp(this, " Please Select Menu Head ", "", 1).setVisible(true);
                txtTDHOnMenuHead.requestFocus();
                return;
            }
            if (cmbTDHOnItem.getSelectedIndex() == 0)
            {
                new frmOkPopUp(this, " Please Select Item ", "", 1).setVisible(true);
                return;
            }
            if (funCheckDuplicateEnrty())
            {
                new frmOkPopUp(this, " Item Already Added To TDH ", "", 1).setVisible(true);
                return;
            }
            DefaultTableModel dm = (DefaultTableModel) tblItem.getModel();
            int rows = dm.getRowCount();
            if (rows == 0)
            {
                new frmOkPopUp(this, " Please Add Course ", "", 1).setVisible(true);
                btnAddCourse.requestFocus();
                return;
            }
            if (!clsGlobalVarClass.validateEmpty(txtQuantity.getText()))
            {
                new frmOkPopUp(this, " Please Enter Quantity ", "", 1).setVisible(true);
                txtQuantity.requestFocus();
                return;
            }
            tdhItemApplicable = "N";
            if (chkApplicable.isSelected() == true)
            {
                tdhItemApplicable = "Y";
            }
            String tdhCode = getTDHNo();
            sql = "insert into tbltdhhd (strTDHCode,strDescription,strMenuCode,strItemCode,intMaxQuantity,strApplicable,strComboItemYN,strClientCode) "
                    + "values ('" + tdhCode + "','" + txtDescription.getText() + "','" + tdhOnMenuHeadCode
                    + "','" + ItemCode + "','" + txtQuantity.getText() + "','" + tdhItemApplicable + "','Y','" + clsGlobalVarClass.gClientCode + "');";
            exec = clsGlobalVarClass.dbMysql.execute(sql);
            System.err.println("slq==" + sql);
            if (tblItem.getRowCount() > 0)
            {
                for (int i = 0; i < tblItem.getRowCount(); i++)
                {
                    boolean defaultYN = Boolean.parseBoolean(tblItem.getValueAt(i, 2).toString());
                    String tempDefaultValue = "";
                    if (defaultYN)
                    {
                        tempDefaultValue = "Y";
                    }
                    else
                    {
                        tempDefaultValue = "N";
                    }
                    sql = "insert into tbltdhcomboitemdtl (strTDHCode,strItemCode,strSubItemCode,intSubItemQty,strDefaultYN,strSubItemMenuCode,strClientCode) "
                            + "values ('" + tdhCode + "','" + ItemCode + "','" + tblItem.getValueAt(i, 0).toString() + "','" + tblItem.getValueAt(i, 3).toString() + "'"
                            + ",'" + tempDefaultValue + "','" + tblItem.getValueAt(i, 4).toString() + "','"+clsGlobalVarClass.gClientCode+"');";
                    exec = clsGlobalVarClass.dbMysql.execute(sql);
                }

            }
            new frmOkPopUp(this, "Save Sussessfully", "Successful", 3).setVisible(true);
            funResetFields();
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to get cost center code
     *
     * @param ItemCode
     * @return
     */
    private String getCostCenterCode(String menuCode)
    {
        String costCenterCode = "";
        try
        {
            sql = "select  strCostCenterCode from tblmenuitempricingdtl where strMenuCode='" + menuCode + "'";
            rs = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            rs.next();
            costCenterCode = rs.getString(1);
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
        finally
        {
            return costCenterCode;
        }
    }

    /**
     * This method is used to fill sub item table
     *
     * @param cmbMenuItem
     */
    private void fillSubItemTable(String cmbMenuItem)
    {
        try
        {
            DefaultTableModel dm = (DefaultTableModel) tblItem.getModel();
            dm.setRowCount(0);
            sql = "select a.strSubItemCode,b.strItemName,a.strDefaultYN,a.intSubItemQty,a.strSubItemMenuCode from tbltdhcomboitemdtl a, tblitemmaster b "
                    + "where a.strItemCode='" + cmbMenuItem + "' and  a.strSubItemCode=b.strItemCode ";
            System.out.println("sql fro fill subitem table=" + sql);
            rs = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            while (rs.next())
            {
                boolean defaultValue = false;
                if ("Y".equalsIgnoreCase(rs.getString(3)))
                {
                    defaultValue = true;
                }
                Object[] ob =
                {
                    rs.getString(1), rs.getString(2), defaultValue, rs.getDouble(4), rs.getString(5)
                };
                dm.addRow(ob);
            }
            rs.close();
            tblItem.setModel(dm);
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    private void funSelectMenuHead()
    {
        try
        {
            clsUtility obj = new clsUtility();
            obj.funCallForSearchForm("Menu");
            new frmSearchFormDialog(this, true).setVisible(true);
            if (clsGlobalVarClass.gSearchItemClicked)
            {
                Object[] data = clsGlobalVarClass.gArrListSearchData.toArray();

                selectedMenuHeadCode = data[0].toString();
                txtMenuHead.setText(data[1].toString());
                clsGlobalVarClass.gSearchItemClicked = false;

                costCenterCode = getCostCenterCode(selectedMenuHeadCode);
            }
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    private void funSetVisibleTDHOnMenuHead(boolean isVisible)
    {
        lblMenuHead.setVisible(isVisible);
        txtMenuHead.setVisible(isVisible);
        lblMaxNoOfItems.setVisible(isVisible);
        txtMaxNoOfItems.setVisible(isVisible);
        txtQuantity.setText(String.valueOf("0"));
        txtMaxNoOfItems.setText(String.valueOf("1"));
    }

    public String funGetSelectedMenuHeadCode()
    {
        return this.selectedMenuHeadCode;
    }

    public double funGetMaximumItemLimitQuantity()
    {
        return Double.parseDouble(txtMaxNoOfItems.getText());
    }

    private void funSetVisibleComboItemPanels(boolean flag)
    {

        btnAddCourse.setVisible(flag);
        btnRemoveItem.setVisible(flag);
        ItemTableScrollPane.setVisible(flag);
        ItemTableScrollPane.setLocation(ModifierTableScrollPane.getLocation());
    }

    private void funSetVisibleModifierPanels(boolean flag)
    {
        ModifierTableScrollPane.setVisible(flag);
    }
}
