/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.POSMaster.view;

import com.POSGlobal.controller.clsFixedSizeText;
import com.POSGlobal.controller.clsGlobalVarClass;
import com.POSGlobal.controller.clsTextFieldOnlyNumber;
import com.POSGlobal.controller.clsTextFieldOnlyNumber.JNumberFieldFilter;
import com.POSGlobal.controller.clsUtility;
import com.POSGlobal.view.frmAlfaNumericKeyBoard;
import com.POSGlobal.view.frmNumericKeyboard;
import com.POSGlobal.view.frmOkPopUp;
import com.POSGlobal.view.frmSearchFormDialog;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author sss11
 */
public class frmModifierGroupMaster extends javax.swing.JFrame
{

    clsUtility objUtility = new clsUtility();
    
    /**
     * This method is used to initialize modifier group master
     */
    public frmModifierGroupMaster()
    {
        initComponents();
        this.setLocationRelativeTo(null);
        try
        {
            Timer timer = new Timer(500, new ActionListener()
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    java.util.Date date1 = new java.util.Date();
                    String newstr = String.format("%tr", date1);
                    String dateAndTime = clsGlobalVarClass.gPOSDateToDisplay + " " + newstr;
                    lblDate.setText(dateAndTime);
                }
            });
            timer.setRepeats(true);
            timer.setCoalesce(true);
            timer.setInitialDelay(0);
            timer.start();
            txtModifierGroupName.setDocument(new clsFixedSizeText(20));
            lblUserCode.setText(clsGlobalVarClass.gUserCode);
            lblPosName.setText(clsGlobalVarClass.gPOSName);
            lblDate.setText(clsGlobalVarClass.gPOSDateToDisplay);
            lblModuleName.setText(clsGlobalVarClass.gSelectedModule);

            txtShortName.setDocument(new clsFixedSizeText(12));
            txtMaxItemLimit.setDocument(new clsTextFieldOnlyNumber(50, 2).new JNumberFieldFilter());
            txtMinItemLimit.setDocument(new clsTextFieldOnlyNumber(50, 2).new JNumberFieldFilter());
            txtMaxItemLimit.setText("0");
            txtMinItemLimit.setText("0");
            txtModifierGroupCode.requestFocus();
            funSetShortCutKeys();
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    private void funSetShortCutKeys()
    {
        btnCancel.setMnemonic('c');
        btnNew.setMnemonic('s');
        btnReset.setMnemonic('r');

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelHeader = new javax.swing.JPanel();
        lblProductName = new javax.swing.JLabel();
        lblModuleName = new javax.swing.JLabel();
        lblFormName = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblPosName = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblUserCode = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblHOSign = new javax.swing.JLabel();
        panelLayout = new JPanel() {  
            public void paintComponent(Graphics g) {  
                Image img = Toolkit.getDefaultToolkit().getImage(  
                    getClass().getResource("/com/POSMaster/images/imgBGJPOS.png"));  
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);  
            }  
        };  
        ;
        panelBody = new javax.swing.JPanel();
        txtModifierGroupCode = new javax.swing.JTextField();
        lblModifierGroupName = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        lblModifierGroupCode = new javax.swing.JLabel();
        lblModiGroupShortName = new javax.swing.JLabel();
        lblOpertional = new javax.swing.JLabel();
        txtMaxItemLimit = new javax.swing.JTextField();
        cmbApplyMaxLimit = new javax.swing.JComboBox();
        lblHeading = new javax.swing.JLabel();
        cmbSequenceNO = new javax.swing.JComboBox();
        cmbOperational = new javax.swing.JComboBox();
        lblapplyMaxModiSelect = new javax.swing.JLabel();
        txtModifierGroupName = new javax.swing.JTextField();
        lblApplyModiMinSel = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        txtShortName = new javax.swing.JTextField();
        lblSeqNo = new javax.swing.JLabel();
        txtMinItemLimit = new javax.swing.JTextField();
        cmbApplyMinLimit = new javax.swing.JComboBox();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelHeader.setBackground(new java.awt.Color(69, 164, 238));
        panelHeader.setLayout(new javax.swing.BoxLayout(panelHeader, javax.swing.BoxLayout.LINE_AXIS));

        lblProductName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProductName.setForeground(new java.awt.Color(255, 255, 255));
        lblProductName.setText("SPOS -");
        panelHeader.add(lblProductName);

        lblModuleName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblModuleName.setForeground(new java.awt.Color(255, 255, 255));
        panelHeader.add(lblModuleName);

        lblFormName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFormName.setForeground(new java.awt.Color(255, 255, 255));
        lblFormName.setText("- Modifier Group Master");
        panelHeader.add(lblFormName);
        panelHeader.add(filler4);
        panelHeader.add(filler5);

        lblPosName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPosName.setForeground(new java.awt.Color(255, 255, 255));
        lblPosName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPosName.setMaximumSize(new java.awt.Dimension(321, 30));
        lblPosName.setMinimumSize(new java.awt.Dimension(321, 30));
        lblPosName.setPreferredSize(new java.awt.Dimension(321, 30));
        panelHeader.add(lblPosName);
        panelHeader.add(filler6);

        lblUserCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUserCode.setForeground(new java.awt.Color(255, 255, 255));
        lblUserCode.setMaximumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setMinimumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setPreferredSize(new java.awt.Dimension(90, 30));
        panelHeader.add(lblUserCode);

        lblDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setMaximumSize(new java.awt.Dimension(192, 30));
        lblDate.setMinimumSize(new java.awt.Dimension(192, 30));
        lblDate.setPreferredSize(new java.awt.Dimension(192, 30));
        panelHeader.add(lblDate);

        lblHOSign.setMaximumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setMinimumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setPreferredSize(new java.awt.Dimension(34, 30));
        panelHeader.add(lblHOSign);

        getContentPane().add(panelHeader, java.awt.BorderLayout.PAGE_START);

        panelLayout.setLayout(new java.awt.GridBagLayout());

        panelBody.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelBody.setMinimumSize(new java.awt.Dimension(800, 570));
        panelBody.setOpaque(false);

        txtModifierGroupCode.setEditable(false);
        txtModifierGroupCode.setBackground(new java.awt.Color(204, 204, 204));
        txtModifierGroupCode.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtModifierGroupCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtModifierGroupCodeMouseClicked(evt);
            }
        });
        txtModifierGroupCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtModifierGroupCodeKeyPressed(evt);
            }
        });

        lblModifierGroupName.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        lblModifierGroupName.setText("Modifier Group Name                   :");

        btnNew.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNew.setForeground(new java.awt.Color(255, 255, 255));
        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnNew.setText("SAVE");
        btnNew.setToolTipText("Save Modifier");
        btnNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNew.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        btnNew.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnNewKeyPressed(evt);
            }
        });

        lblModifierGroupCode.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        lblModifierGroupCode.setText("Modifier Group Code                    :");

        lblModiGroupShortName.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        lblModiGroupShortName.setText("Modifier Group Short Name          :");

        lblOpertional.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        lblOpertional.setText("Operational                                :");

        txtMaxItemLimit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMaxItemLimit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMaxItemLimit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtMaxItemLimitMouseClicked(evt);
            }
        });
        txtMaxItemLimit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMaxItemLimitKeyPressed(evt);
            }
        });

        cmbApplyMaxLimit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--SELECT--", "YES", "NO" }));
        cmbApplyMaxLimit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbApplyMaxLimitKeyPressed(evt);
            }
        });

        lblHeading.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblHeading.setText("Modifier Group Master");

        cmbSequenceNO.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50" }));
        cmbSequenceNO.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbSequenceNOKeyPressed(evt);
            }
        });

        cmbOperational.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "YES", "NO" }));
        cmbOperational.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbOperationalKeyPressed(evt);
            }
        });

        lblapplyMaxModiSelect.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        lblapplyMaxModiSelect.setText("Apply Max. Modifier Selection       :");

        txtModifierGroupName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtModifierGroupName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtModifierGroupNameMouseClicked(evt);
            }
        });
        txtModifierGroupName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtModifierGroupNameKeyPressed(evt);
            }
        });

        lblApplyModiMinSel.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        lblApplyModiMinSel.setText("Apply Min. Modifier Selection        :");

        btnReset.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnReset.setText("RESET");
        btnReset.setToolTipText("Reset All Fields");
        btnReset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReset.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        txtShortName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtShortName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtShortNameMouseClicked(evt);
            }
        });
        txtShortName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtShortNameKeyPressed(evt);
            }
        });

        lblSeqNo.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        lblSeqNo.setText("Sequence No.                             :");

        txtMinItemLimit.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtMinItemLimit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtMinItemLimit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtMinItemLimitMouseClicked(evt);
            }
        });
        txtMinItemLimit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMinItemLimitKeyPressed(evt);
            }
        });

        cmbApplyMinLimit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--SELECT--", "YES", "NO" }));
        cmbApplyMinLimit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbApplyMinLimitKeyPressed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnCancel.setText("CLOSE");
        btnCancel.setToolTipText("Close Modifier Group Master");
        btnCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancel.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelMouseClicked(evt);
            }
        });
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBodyLayout = new javax.swing.GroupLayout(panelBody);
        panelBody.setLayout(panelBodyLayout);
        panelBodyLayout.setHorizontalGroup(
            panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBodyLayout.createSequentialGroup()
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBodyLayout.createSequentialGroup()
                        .addGap(287, 287, 287)
                        .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelBodyLayout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(lblModifierGroupCode, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(txtModifierGroupCode, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelBodyLayout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(lblApplyModiMinSel, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(cmbApplyMinLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtMinItemLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelBodyLayout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(lblapplyMaxModiSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(cmbApplyMaxLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtMaxItemLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelBodyLayout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(lblSeqNo, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(cmbSequenceNO, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelBodyLayout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(lblOpertional, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbOperational, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelBodyLayout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelBodyLayout.createSequentialGroup()
                                .addComponent(lblModifierGroupName, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(txtModifierGroupName))
                            .addGroup(panelBodyLayout.createSequentialGroup()
                                .addComponent(lblModiGroupShortName, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(txtShortName, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(179, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBodyLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        panelBodyLayout.setVerticalGroup(
            panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBodyLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblModifierGroupCode, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtModifierGroupCode, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblModifierGroupName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtModifierGroupName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblModiGroupShortName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtShortName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblApplyModiMinSel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbApplyMinLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMinItemLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblapplyMaxModiSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbApplyMaxLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaxItemLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSeqNo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSequenceNO, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblOpertional, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbOperational, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );

        panelLayout.add(panelBody, new java.awt.GridBagConstraints());

        getContentPane().add(panelLayout, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtModifierGroupCodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtModifierGroupCodeMouseClicked
        funModifierGroupCodeClick();
    }//GEN-LAST:event_txtModifierGroupCodeMouseClicked

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        if ("SAVE".equalsIgnoreCase(btnNew.getText()))
        {
            funSaveButtonClick();
        }
        else if ("UPDATE".equalsIgnoreCase(btnNew.getText()))
        {
            funUpdateButtonClick();
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void txtMaxItemLimitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtMaxItemLimitMouseClicked
        funItemMaxLimitClick();
    }//GEN-LAST:event_txtMaxItemLimitMouseClicked

    private void txtModifierGroupNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtModifierGroupNameMouseClicked
        funModifierGroupNameClick();
    }//GEN-LAST:event_txtModifierGroupNameMouseClicked

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        funResetButtonClick();
    }//GEN-LAST:event_btnResetActionPerformed

    private void txtShortNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtShortNameMouseClicked
        funShortNameClick();
    }//GEN-LAST:event_txtShortNameMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        funCloseButtonClick();
        clsGlobalVarClass.hmActiveForms.remove("ModifierGroupMaster");
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtModifierGroupCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtModifierGroupCodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == '?' || evt.getKeyChar() == '/')
        {
            funModifierGroupCodeClick();
        }
        if (evt.getKeyCode() == 10)
        {
            txtModifierGroupName.requestFocus();
        }

    }//GEN-LAST:event_txtModifierGroupCodeKeyPressed

    private void txtModifierGroupNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtModifierGroupNameKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            txtShortName.requestFocus();
        }
    }//GEN-LAST:event_txtModifierGroupNameKeyPressed

    private void txtShortNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtShortNameKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            cmbApplyMinLimit.requestFocus();
        }
    }//GEN-LAST:event_txtShortNameKeyPressed

    private void cmbApplyMinLimitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbApplyMinLimitKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            txtMinItemLimit.requestFocus();
        }
    }//GEN-LAST:event_cmbApplyMinLimitKeyPressed

    private void txtMinItemLimitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinItemLimitKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            cmbApplyMaxLimit.requestFocus();
        }
    }//GEN-LAST:event_txtMinItemLimitKeyPressed

    private void cmbApplyMaxLimitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbApplyMaxLimitKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            txtMaxItemLimit.requestFocus();
        }
    }//GEN-LAST:event_cmbApplyMaxLimitKeyPressed

    private void txtMaxItemLimitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaxItemLimitKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            cmbSequenceNO.requestFocus();
        }
    }//GEN-LAST:event_txtMaxItemLimitKeyPressed

    private void cmbSequenceNOKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbSequenceNOKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            cmbOperational.requestFocus();
        }
    }//GEN-LAST:event_cmbSequenceNOKeyPressed

    private void cmbOperationalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbOperationalKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            btnNew.requestFocus();
        }
    }//GEN-LAST:event_cmbOperationalKeyPressed

    private void btnNewKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnNewKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            if ("SAVE".equalsIgnoreCase(btnNew.getText()))
            {
                funSaveButtonClick();
            }
            else if ("UPDATE".equalsIgnoreCase(btnNew.getText()))
            {
                funUpdateButtonClick();
            }
        }
    }//GEN-LAST:event_btnNewKeyPressed

    private void txtMinItemLimitMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_txtMinItemLimitMouseClicked
    {//GEN-HEADEREND:event_txtMinItemLimitMouseClicked
        try
        {
            if (txtMinItemLimit.getText().length() == 0)
            {
                new frmNumericKeyboard(this,true,txtMinItemLimit.getText(),"Double" , "Please Enter Min Modifier Limit.").setVisible(true);
                txtMinItemLimit.setText(clsGlobalVarClass.gNumerickeyboardValue);
            }
            else
            {
                new frmNumericKeyboard(this,true,txtMinItemLimit.getText(),"Double" , "Please Enter Min Modifier Limit.").setVisible(true);
                String []txtKeyboardValue=clsGlobalVarClass.gNumerickeyboardValue.split("\\.");
                txtMinItemLimit.setText(txtKeyboardValue[0]);
            }

        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtMinItemLimitMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
         clsGlobalVarClass.hmActiveForms.remove("ModifierGroupMaster");
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
         clsGlobalVarClass.hmActiveForms.remove("ModifierGroupMaster");
    }//GEN-LAST:event_formWindowClosing

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseClicked
        // TODO add your handling code here:
         clsGlobalVarClass.hmActiveForms.remove("ModifierGroupMaster");
    }//GEN-LAST:event_btnCancelMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(frmModifierGroupMaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(frmModifierGroupMaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(frmModifierGroupMaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(frmModifierGroupMaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new frmModifierGroupMaster().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox cmbApplyMaxLimit;
    private javax.swing.JComboBox cmbApplyMinLimit;
    private javax.swing.JComboBox cmbOperational;
    private javax.swing.JComboBox cmbSequenceNO;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.JLabel lblApplyModiMinSel;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblFormName;
    private javax.swing.JLabel lblHOSign;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblModiGroupShortName;
    private javax.swing.JLabel lblModifierGroupCode;
    private javax.swing.JLabel lblModifierGroupName;
    private javax.swing.JLabel lblModuleName;
    private javax.swing.JLabel lblOpertional;
    private javax.swing.JLabel lblPosName;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblSeqNo;
    private javax.swing.JLabel lblUserCode;
    private javax.swing.JLabel lblapplyMaxModiSelect;
    private javax.swing.JPanel panelBody;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelLayout;
    private javax.swing.JTextField txtMaxItemLimit;
    private javax.swing.JTextField txtMinItemLimit;
    private javax.swing.JTextField txtModifierGroupCode;
    private javax.swing.JTextField txtModifierGroupName;
    private javax.swing.JTextField txtShortName;
    // End of variables declaration//GEN-END:variables

    /**
     * This method is used to when modifier group code click
     */
    private void funModifierGroupCodeClick()
    {
        clsUtility obj = new clsUtility();
        obj.funCallForSearchForm("ModifierGroup");
        new frmSearchFormDialog(this, true).setVisible(true);
        if (clsGlobalVarClass.gSearchItemClicked)
        {
            btnNew.setText("UPDATE");//UpdateD
            btnNew.setMnemonic('u');
            Object[] data = clsGlobalVarClass.gArrListSearchData.toArray();
            setData(data);
            clsGlobalVarClass.gSearchItemClicked = false;
        }
    }

    /**
     * This method is used to when modifier group name click
     */
    private void funModifierGroupNameClick()
    {
        if (txtModifierGroupName.getText().length() == 0)
        {
            new frmAlfaNumericKeyBoard(this, true, "1", "Enter Modifier Group Name").setVisible(true);
            txtModifierGroupName.setText(clsGlobalVarClass.gKeyboardValue);
        }
        else
        {
            new frmAlfaNumericKeyBoard(this, true, txtModifierGroupName.getText(), "1", "Enter Modifier Group Name").setVisible(true);
            txtModifierGroupName.setText(clsGlobalVarClass.gKeyboardValue);
        }
    }

    /**
     * This method is used to item max limit click
     */
    private void funItemMaxLimitClick()
    {
        try
        {
            if (txtMaxItemLimit.getText().length() == 0)
            {
                new frmNumericKeyboard(this,true,txtMaxItemLimit.getText(),"Double" , "Please Enter Max Modifier Limit.").setVisible(true);
                txtMaxItemLimit.setText(clsGlobalVarClass.gNumerickeyboardValue);
            }
            else
            {
                new frmNumericKeyboard(this,true,txtMaxItemLimit.getText(),"Double" , "Please Enter Max Modifier Limit.").setVisible(true);
                String []txtKeyboardValue=clsGlobalVarClass.gNumerickeyboardValue.split("\\.");
                txtMaxItemLimit.setText(txtKeyboardValue[0]);
            }

        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to save
     */
    private void funSaveButtonClick()
    {
        try
        {

            if (txtModifierGroupName.getText().trim().length() == 0)
            {
                new frmOkPopUp(this, "Please Enter Modifier Group Name ", "Error", 0).setVisible(true);
                txtModifierGroupName.requestFocus();
                return;
            }
            if (clsGlobalVarClass.funCheckItemName("tblmodifiergrouphd", "strModifierGroupName", "strModifierGroupCode", txtModifierGroupName.getText().trim(), txtModifierGroupCode.getText().trim(), "save", ""))
            {
                new frmOkPopUp(this, "Duplicate Modifier Group Name", "Error", 0).setVisible(true);
                txtModifierGroupName.requestFocus();
                return;
            }

            if (txtShortName.getText().trim().length() == 0)
            {
                new frmOkPopUp(this, "Please Enter Modifier Group Short Name ", "Error", 0).setVisible(true);
                txtShortName.requestFocus();
                return;
            }
            if (clsGlobalVarClass.funCheckItemName("tblmodifiergrouphd", "strModifierGroupShortName", "strModifierGroupCode", txtShortName.getText().trim(), txtModifierGroupCode.getText().trim(), "save", ""))
            {
                new frmOkPopUp(this, "Duplicate Modifier Group Short Name ", "Error", 0).setVisible(true);
                txtShortName.requestFocus();
                return;
            }
            if (cmbApplyMaxLimit.getSelectedIndex() == 0)
            {
                new frmOkPopUp(this, "Please Select Apply Max Limit ", "Error", 0).setVisible(true);
                cmbApplyMaxLimit.requestFocus();
                return;
            }
            if (cmbApplyMaxLimit.getSelectedIndex() == 1 && txtMaxItemLimit.getText().trim().length() == 0)
            {
                txtMaxItemLimit.requestFocus();
                new frmOkPopUp(this, "Please Enter Max Item Limit ", "Error", 0).setVisible(true);
                return;
            }

            if (cmbApplyMinLimit.getSelectedIndex() == 0)
            {
                new frmOkPopUp(this, "Please Select Apply Min Limit ", "Error", 0).setVisible(true);
                cmbApplyMinLimit.requestFocus();
                return;
            }
            if (cmbApplyMinLimit.getSelectedIndex() == 1 && txtMinItemLimit.getText().trim().length() == 0)
            {
                txtMinItemLimit.requestFocus();
                new frmOkPopUp(this, "Please Enter Min Item Limit ", "Error", 0).setVisible(true);
                return;
            }

            String modifierGroupCode = funGetModifeierGroupCode();
            String strApplyItemMaxLimit = "N";
            if ("YES".equalsIgnoreCase(cmbApplyMaxLimit.getSelectedItem().toString()))
            {
                strApplyItemMaxLimit = "Y";
            }

            String strApplyItemMinLimit = "N";
            if ("YES".equalsIgnoreCase(cmbApplyMinLimit.getSelectedItem().toString()))
            {
                strApplyItemMinLimit = "Y";
            }
            if (txtMaxItemLimit.getText().trim().length() == 0)
            {
                txtMaxItemLimit.setText("0");
            }

            if (txtMinItemLimit.getText().trim().length() == 0)
            {
                txtMinItemLimit.setText("0");
            }
            int sequenceNO = Integer.parseInt(cmbSequenceNO.getSelectedItem().toString());

            String sqlinsert = "insert into tblmodifiergrouphd (strModifierGroupCode,strModifierGroupName,strModifierGroupShortName,strApplyMaxItemLimit,"
                    + "intItemMaxLimit,strOperational,strUserCreated,strUserEdited,dteDateCreated,dteDateEdited,strClientCode,strApplyMinItemLimit,intItemMinLimit,intSequenceNo) "
                    + "values ('" + modifierGroupCode + "','" + txtModifierGroupName.getText().trim() + "','" + txtShortName.getText().trim() + "','" + strApplyItemMaxLimit + "',"
                    + "'" + txtMaxItemLimit.getText().trim() + "','" + cmbOperational.getSelectedItem().toString() + "','" + clsGlobalVarClass.gUserCode + "','" + clsGlobalVarClass.gUserCode + "',"
                    + "'" + clsGlobalVarClass.getCurrentDateTime() + "','" + clsGlobalVarClass.getCurrentDateTime() + "','" + clsGlobalVarClass.gClientCode + "','" + strApplyItemMinLimit + "','" + txtMinItemLimit.getText().trim() + "'," + sequenceNO + ");";
            int exec = clsGlobalVarClass.dbMysql.execute(sqlinsert);
            if (exec > 0)
            {
                String sql="update tblmasteroperationstatus set dteDateEdited='"+clsGlobalVarClass.getCurrentDateTime()+"' "
                    + " where strTableName='Modifier' ";
                clsGlobalVarClass.dbMysql.execute(sql);
                new frmOkPopUp(this, "Entry added Successfully", "Successfull", 3).setVisible(true);
                funResetFields();
            }

        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to reset fields
     */
    private void funResetButtonClick()
    {
        funResetFields();
    }

    /**
     * This method is used when close click
     */
    private void funCloseButtonClick()
    {
        dispose();
    }

    /**
     * This method is used to reset fields
     */
    private void funResetFields()
    {
        txtModifierGroupCode.setText("");
        txtModifierGroupName.setText("");
        txtShortName.setText("");
        cmbApplyMinLimit.setSelectedIndex(0);
        cmbApplyMaxLimit.setSelectedIndex(0);
        txtMaxItemLimit.setText("0");
        txtMinItemLimit.setText("0");
        txtModifierGroupCode.requestFocus();
        btnNew.setText("SAVE");
        btnNew.setMnemonic('s');
        cmbOperational.setSelectedIndex(0);
        cmbSequenceNO.setSelectedIndex(0);
    }

    /**
     * This method is used to get modifier group code
     *
     * @return string
     */
    private String funGetModifeierGroupCode()
    {
        String gpCode = null;
        try
        {
            String selectQuery;
            String strCode = null;

            selectQuery = "select count(*) from tblmodifiergrouphd";
            ResultSet countSet1 = clsGlobalVarClass.dbMysql.executeResultSet(selectQuery);
            countSet1.next();
            int cn = countSet1.getInt(1);
            countSet1.close();
            if (cn > 0)
            {
                selectQuery = "select max(strModifierGroupCode) from tblmodifiergrouphd";
                ResultSet countSet = clsGlobalVarClass.dbMysql.executeResultSet(selectQuery);
                countSet.next();
                String code = countSet.getString(1);
                StringBuilder sb = new StringBuilder(code);
                String ss = sb.delete(0, 2).toString();
                for (int i = 0; i < ss.length(); i++)
                {
                    if (ss.charAt(i) != '0')
                    {
                        strCode = ss.substring(i, ss.length());
                        break;
                    }
                }
                int intCode = Integer.parseInt(strCode);

                intCode++;

                if (intCode < 10)
                {
                    gpCode = "MG00000" + intCode;
                }
                else if (intCode < 100)
                {
                    gpCode = "MG0000" + intCode;
                }
                else if (intCode < 1000)
                {
                    gpCode = "MG000" + intCode;
                }
                else if (intCode < 10000)
                {
                    gpCode = "MG00" + intCode;
                }
                else if (intCode < 100000)
                {
                    gpCode = "MG0" + intCode;
                }
                else if (intCode < 1000000)
                {
                    gpCode = "MG" + intCode;
                }
            }
            else
            {
                gpCode = "MG000001";
            }

        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }

        return gpCode;
    }

    /**
     * This method is used when short name clicked
     */
    private void funShortNameClick()
    {
        if (txtShortName.getText().length() == 0)
        {
            new frmAlfaNumericKeyBoard(this, true, "1", "Enter Modifier Group Short Name").setVisible(true);
            txtShortName.setText(clsGlobalVarClass.gKeyboardValue);
        }
        else
        {
            new frmAlfaNumericKeyBoard(this, true, txtShortName.getText(), "1", "Enter Modifier Group Short Name").setVisible(true);
            txtShortName.setText(clsGlobalVarClass.gKeyboardValue);
        }
    }

    /**
     * This method is used to set data
     *
     * @param data
     */
    private void setData(Object[] data)
    {
        try
        {
            String sql = "select strModifierGroupName,strModifierGroupShortName,strApplyMaxItemLimit,intItemMaxLimit,strOperational,strApplyMinItemLimit,intItemMinLimit,intSequenceNo from tblmodifiergrouphd where strModifierGroupCode='" + data[0].toString().trim() + "'";
            ResultSet rsModifierGroupDtl = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            rsModifierGroupDtl.next();
            txtModifierGroupCode.setText(data[0].toString());
            txtModifierGroupName.setText(rsModifierGroupDtl.getString(1));
            txtShortName.setText(rsModifierGroupDtl.getString(2));
            String strApplyItemMaxLimit = rsModifierGroupDtl.getString(3);
            String strApplyItemMinLimit = rsModifierGroupDtl.getString(6);

            if ("Y".equalsIgnoreCase(strApplyItemMaxLimit))
            {
                cmbApplyMaxLimit.setSelectedIndex(1);
            }
            else if ("N".equalsIgnoreCase(strApplyItemMaxLimit))
            {
                cmbApplyMaxLimit.setSelectedIndex(2);
            }
            else
            {
                cmbApplyMaxLimit.setSelectedIndex(0);
            }

            if ("Y".equalsIgnoreCase(strApplyItemMinLimit))
            {
                cmbApplyMinLimit.setSelectedIndex(1);
            }
            else if ("N".equalsIgnoreCase(strApplyItemMinLimit))
            {
                cmbApplyMinLimit.setSelectedIndex(2);
            }
            else
            {
                cmbApplyMinLimit.setSelectedIndex(0);
            }
            cmbSequenceNO.setSelectedItem(rsModifierGroupDtl.getString(8));
            cmbOperational.setSelectedItem(rsModifierGroupDtl.getString(5));
            txtMaxItemLimit.setText(String.valueOf(rsModifierGroupDtl.getInt(4)));
            txtMinItemLimit.setText(String.valueOf(rsModifierGroupDtl.getInt(7)));
            rsModifierGroupDtl.close();
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to update clicked
     */
    private void funUpdateButtonClick()
    {
        try
        {

            if (txtModifierGroupName.getText().trim().length() == 0)
            {
                new frmOkPopUp(this, "Please Enter Modifier Group Name ", "Error", 0).setVisible(true);
                txtModifierGroupName.requestFocus();
                return;
            }

            if (clsGlobalVarClass.funCheckItemName("tblmodifiergrouphd", "strModifierGroupName", "strModifierGroupCode", txtModifierGroupName.getText().trim(), txtModifierGroupCode.getText().trim(), "update", ""))
            {
                new frmOkPopUp(this, "Duplicate Modifier Group Name", "Error", 0).setVisible(true);
                txtModifierGroupName.requestFocus();
                return;
            }

            if (txtShortName.getText().trim().length() == 0)
            {
                new frmOkPopUp(this, "Please Enter Modifier Group Short Name ", "Error", 0).setVisible(true);
                txtShortName.requestFocus();
                return;
            }

            if (clsGlobalVarClass.funCheckItemName("tblmodifiergrouphd", "strModifierGroupShortName", "strModifierGroupCode", txtShortName.getText().trim(), txtModifierGroupCode.getText().trim(), "update", ""))
            {
                new frmOkPopUp(this, "Duplicate Modifier Group Short Name ", "Error", 0).setVisible(true);
                txtShortName.requestFocus();
                return;
            }
            if (cmbApplyMaxLimit.getSelectedIndex() == 0)
            {
                new frmOkPopUp(this, "Please Select Apply Max Limit ", "Error", 0).setVisible(true);
                cmbApplyMaxLimit.requestFocus();
                return;
            }
            if (cmbApplyMaxLimit.getSelectedIndex() == 1 && txtMaxItemLimit.getText().trim().length() == 0)
            {
                txtMaxItemLimit.requestFocus();
                new frmOkPopUp(this, "Please Enter Max Item Limit ", "Error", 0).setVisible(true);
                return;
            }

            if (cmbApplyMinLimit.getSelectedIndex() == 0)
            {
                new frmOkPopUp(this, "Please Select Apply Min Limit ", "Error", 0).setVisible(true);
                cmbApplyMinLimit.requestFocus();
                return;
            }
            if (cmbApplyMinLimit.getSelectedIndex() == 1 && txtMinItemLimit.getText().trim().length() == 0)
            {
                txtMinItemLimit.requestFocus();
                new frmOkPopUp(this, "Please Enter Min Item Limit ", "Error", 0).setVisible(true);
                return;
            }

            String strApplyItemMaxLimit = "N";
            if ("YES".equalsIgnoreCase(cmbApplyMaxLimit.getSelectedItem().toString()))
            {
                strApplyItemMaxLimit = "Y";
            }

            String strApplyItemMinLimit = "N";
            if ("YES".equalsIgnoreCase(cmbApplyMinLimit.getSelectedItem().toString()))
            {
                strApplyItemMinLimit = "Y";
            }
            if (txtMaxItemLimit.getText().trim().length() == 0)
            {
                txtMaxItemLimit.setText("0");
            }

            if (txtMinItemLimit.getText().trim().length() == 0)
            {
                txtMinItemLimit.setText("0");
            }
            int sequenceNO = Integer.parseInt(cmbSequenceNO.getSelectedItem().toString());
            String sqlUpdate = "update tblmodifiergrouphd set strModifierGroupName='" + txtModifierGroupName.getText().trim() + "',strModifierGroupShortName='" + txtShortName.getText().trim() + "',"
                    + "strApplyMaxItemLimit='" + strApplyItemMaxLimit + "',intItemMaxLimit='" + txtMaxItemLimit.getText().trim() + "',strOperational='" + cmbOperational.getSelectedItem().toString() + "',"
                    + "strUserEdited='" + clsGlobalVarClass.gUserCode + "',dteDateEdited='" + clsGlobalVarClass.getCurrentDateTime() + "',strApplyMinItemLimit='" + strApplyItemMinLimit + "'"
                    + ",intItemMinLimit='" + txtMinItemLimit.getText().trim() + "' "
                    + " ,intSequenceNo=" + sequenceNO + " where strModifierGroupCode='" + txtModifierGroupCode.getText().trim() + "';";
            int exec = clsGlobalVarClass.dbMysql.execute(sqlUpdate);
            if (exec > 0)
            {
                String sql="update tblmasteroperationstatus set dteDateEdited='"+clsGlobalVarClass.getCurrentDateTime()+"' "
                    + " where strTableName='Modifier' ";
                clsGlobalVarClass.dbMysql.execute(sql);
                new frmOkPopUp(this, "Updated Successfully", "Successfull", 3).setVisible(true);
                funResetFields();
            }
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

}
