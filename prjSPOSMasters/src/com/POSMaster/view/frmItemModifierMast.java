/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.POSMaster.view;

import com.POSGlobal.controller.clsFixedSizeText;
import com.POSGlobal.controller.clsGlobalVarClass;
import com.POSGlobal.controller.clsTextFieldOnlyNumber;
import com.POSGlobal.view.frmAlfaNumericKeyBoard;
import com.POSGlobal.view.frmNumericKeyboard;
import com.POSGlobal.view.frmOkPopUp;
import com.POSGlobal.view.frmSearchFormDialog;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import com.POSGlobal.controller.clsUtility;

/**
 *
 * @author sss11
 */
public class frmItemModifierMast extends javax.swing.JFrame
{

    private ResultSet countSet, countSet1, rs, rs2;
    private String selectQuery, insertQuery, time, date, groupCode, dteCreated, dteEdited;
    private int d, m, y, h, min, sec;

    private String userCode, updateQuery, strCode, code, sql, sql2;
    private String gpCode;
    boolean flag;
    private String MenuHeadCode;
    private java.util.Vector vItemName, vItemCode, vIsSelectedItem,vIsDefaultModifier;
    private double rate;
    ButtonGroup bg1;
    HashMap<String, String> hmModifierGroup;

    private Map<String, Double> mapSelectedItems = new HashMap<>();
    private Map<String, Boolean> mapSelectedModifiers = new HashMap<>();
    private Set<String> setAllItems = new HashSet<>();
    clsUtility obj = new clsUtility();   
    private HashMap<String, String> mapDefaultModifier;
    
    
    /**
     * This method is used to initialize frmItemModifierMaster
     */
    public frmItemModifierMast()
    {
        initComponents();
        try
        {

            groupButton();

            userCode = clsGlobalVarClass.gUserCode;
            lblUserCode.setText(clsGlobalVarClass.gUserCode);
            lblPosName.setText(clsGlobalVarClass.gPOSName);
            lblModuleName.setText(clsGlobalVarClass.gSelectedModule);
            txtRate.setDocument(new clsTextFieldOnlyNumber(4, 3).new JNumberFieldFilter());
            txtModifierName.setDocument(new clsFixedSizeText(100));
            txtRate.setText("0.00");
            java.util.Date dt = new java.util.Date();
            int day = dt.getDate();
            int month = dt.getMonth() + 1;
            int year = dt.getYear() + 1900;
            String dte = day + "-" + month + "-" + year;
            lblDate.setText(clsGlobalVarClass.gPOSDateToDisplay);
            java.util.Date date = new SimpleDateFormat("dd-MM-yyyy").parse(dte);
            
            mapDefaultModifier=new HashMap<String, String>();
            funFillModifierGroupComboBox();
            funLoadMenuHeadTable();
            funSetShortCutKeys();

        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    private void funSetShortCutKeys()
    {
        btnCancel.setMnemonic('c');
        btnNew.setMnemonic('s');
        btnReset.setMnemonic('r');

    }

    /**
     * This method is used to load menu head table
     */
    private void funLoadMenuHeadTable()
    {

        try
        {
            DefaultTableModel dm1 = (DefaultTableModel) tblMenuHeads.getModel();
            dm1.setRowCount(0);
            sql = "select strMenuCode, strMenuName from tblmenuhd where strOperational='Y' ORDER by intSequence";
            rs = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            while (rs.next())
            {

                Object[] ob =
                {
                    rs.getString(1), rs.getString(2)
                };
                dm1.addRow(ob);

            }
            rs.close();
            tblMenuHeads.setModel(dm1);

        }
        catch (Exception e)
        {
             obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelHeader = new javax.swing.JPanel();
        lblProductName1 = new javax.swing.JLabel();
        lblModuleName = new javax.swing.JLabel();
        lblformName = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblPosName = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblUserCode = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblHOSign = new javax.swing.JLabel();
        panelLayout = new JPanel() {  
            public void paintComponent(Graphics g) {  
                Image img = Toolkit.getDefaultToolkit().getImage(  
                    getClass().getResource("/com/POSMaster/images/imgBGJPOS.png"));  
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);  
            }  
        };  ;
        panelbody = new javax.swing.JPanel();
        lblFormName = new javax.swing.JLabel();
        txtModifierCode = new javax.swing.JTextField();
        lblGroupCode2 = new javax.swing.JLabel();
        lblGroupName2 = new javax.swing.JLabel();
        txtModifierName = new javax.swing.JTextField();
        lblModifierGroup = new javax.swing.JLabel();
        cmbModifierGroup = new javax.swing.JComboBox();
        lblModiDesc = new javax.swing.JLabel();
        scrollPaneModiDescription = new javax.swing.JScrollPane();
        txtareaModiDesc = new javax.swing.JTextArea();
        lblRate = new javax.swing.JLabel();
        txtRate = new javax.swing.JTextField();
        btnApply = new javax.swing.JButton();
        chkApplicable = new javax.swing.JCheckBox();
        scrollPaneMenuHeads = new javax.swing.JScrollPane();
        tblMenuHeads = new javax.swing.JTable();
        scrollPaneItems = new javax.swing.JScrollPane();
        tblItem = new javax.swing.JTable();
        btnNew = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        radioBtnSelectAll = new javax.swing.JRadioButton();
        radioBtnUnselectAll = new javax.swing.JRadioButton();
        chkChargable = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setExtendedState(MAXIMIZED_BOTH);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelHeader.setBackground(new java.awt.Color(69, 164, 238));
        panelHeader.setLayout(new javax.swing.BoxLayout(panelHeader, javax.swing.BoxLayout.LINE_AXIS));

        lblProductName1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProductName1.setForeground(new java.awt.Color(255, 255, 255));
        lblProductName1.setText("SPOS - ");
        panelHeader.add(lblProductName1);

        lblModuleName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblModuleName.setForeground(new java.awt.Color(255, 255, 255));
        panelHeader.add(lblModuleName);

        lblformName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblformName.setForeground(new java.awt.Color(255, 255, 255));
        lblformName.setText("- Item Modifier Master");
        panelHeader.add(lblformName);
        panelHeader.add(filler4);
        panelHeader.add(filler5);

        lblPosName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPosName.setForeground(new java.awt.Color(255, 255, 255));
        lblPosName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPosName.setMaximumSize(new java.awt.Dimension(321, 30));
        lblPosName.setMinimumSize(new java.awt.Dimension(321, 30));
        lblPosName.setPreferredSize(new java.awt.Dimension(321, 30));
        panelHeader.add(lblPosName);
        panelHeader.add(filler6);

        lblUserCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUserCode.setForeground(new java.awt.Color(255, 255, 255));
        lblUserCode.setMaximumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setMinimumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setPreferredSize(new java.awt.Dimension(90, 30));
        panelHeader.add(lblUserCode);

        lblDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setMaximumSize(new java.awt.Dimension(192, 30));
        lblDate.setMinimumSize(new java.awt.Dimension(192, 30));
        lblDate.setPreferredSize(new java.awt.Dimension(192, 30));
        panelHeader.add(lblDate);

        lblHOSign.setMaximumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setMinimumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setPreferredSize(new java.awt.Dimension(34, 30));
        panelHeader.add(lblHOSign);

        getContentPane().add(panelHeader, java.awt.BorderLayout.PAGE_START);

        panelLayout.setBackground(new java.awt.Color(255, 255, 255));
        panelLayout.setLayout(new java.awt.GridBagLayout());

        panelbody.setBackground(new java.awt.Color(255, 255, 255));
        panelbody.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelbody.setOpaque(false);
        panelbody.setPreferredSize(new java.awt.Dimension(800, 570));
        panelbody.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblFormName.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblFormName.setForeground(new java.awt.Color(14, 7, 7));
        lblFormName.setText("Item Modifier Master");
        panelbody.add(lblFormName, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 30, 230, 30));

        txtModifierCode.setEditable(false);
        txtModifierCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtModifierCodeMouseClicked(evt);
            }
        });
        txtModifierCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtModifierCodeKeyPressed(evt);
            }
        });
        panelbody.add(txtModifierCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 190, 30));

        lblGroupCode2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblGroupCode2.setText("Modifier Code              :");
        panelbody.add(lblGroupCode2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 140, 20));

        lblGroupName2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblGroupName2.setText("Modifier Name        :");
        panelbody.add(lblGroupName2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, 130, 30));

        txtModifierName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtModifierNameMouseClicked(evt);
            }
        });
        txtModifierName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtModifierNameKeyPressed(evt);
            }
        });
        panelbody.add(txtModifierName, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 80, 230, 30));

        lblModifierGroup.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblModifierGroup.setText("Modifier Group             :");
        panelbody.add(lblModifierGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 150, 30));

        cmbModifierGroup.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbModifierGroupKeyPressed(evt);
            }
        });
        panelbody.add(cmbModifierGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, 190, 30));

        lblModiDesc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblModiDesc.setText("Modifier Description    :");
        panelbody.add(lblModiDesc, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 130, 140, 30));

        txtareaModiDesc.setColumns(20);
        txtareaModiDesc.setRows(5);
        txtareaModiDesc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtareaModiDescMouseClicked(evt);
            }
        });
        txtareaModiDesc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtareaModiDescKeyPressed(evt);
            }
        });
        scrollPaneModiDescription.setViewportView(txtareaModiDesc);

        panelbody.add(scrollPaneModiDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 130, 230, 50));

        lblRate.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblRate.setText("Rate                           :");
        panelbody.add(lblRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 140, 30));

        txtRate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtRate.setText("0.00");
        txtRate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtRateMouseClicked(evt);
            }
        });
        txtRate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRateKeyPressed(evt);
            }
        });
        panelbody.add(txtRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 180, 80, 30));

        btnApply.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnApply.setForeground(new java.awt.Color(255, 255, 255));
        btnApply.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnApply.setText("APPLY");
        btnApply.setToolTipText("Apply Rate");
        btnApply.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnApply.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnApply.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnApplyMouseClicked(evt);
            }
        });
        btnApply.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnApplyKeyPressed(evt);
            }
        });
        panelbody.add(btnApply, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 180, 90, 30));

        chkApplicable.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        chkApplicable.setText("Applicable");
        chkApplicable.setOpaque(false);
        chkApplicable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkApplicableKeyPressed(evt);
            }
        });
        panelbody.add(chkApplicable, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 180, 90, 30));

        tblMenuHeads.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Menu Code", "Menu Head Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMenuHeads.setRowHeight(25);
        tblMenuHeads.getTableHeader().setReorderingAllowed(false);
        tblMenuHeads.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMenuHeadsMouseClicked(evt);
            }
        });
        scrollPaneMenuHeads.setViewportView(tblMenuHeads);
        if (tblMenuHeads.getColumnModel().getColumnCount() > 0) {
            tblMenuHeads.getColumnModel().getColumn(0).setResizable(false);
            tblMenuHeads.getColumnModel().getColumn(0).setPreferredWidth(30);
        }

        panelbody.add(scrollPaneMenuHeads, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 230, 260));

        scrollPaneItems.setBackground(new java.awt.Color(255, 255, 255));

        tblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Item Code", "Select", "Rate", "Default Modifier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItem.setRowHeight(25);
        tblItem.setRowMargin(2);
        tblItem.getTableHeader().setReorderingAllowed(false);
        tblItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemMouseClicked(evt);
            }
        });
        scrollPaneItems.setViewportView(tblItem);
        if (tblItem.getColumnModel().getColumnCount() > 0) {
            tblItem.getColumnModel().getColumn(4).setResizable(false);
        }

        panelbody.add(scrollPaneItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 220, 510, 260));

        btnNew.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNew.setForeground(new java.awt.Color(255, 255, 255));
        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnNew.setText("SAVE");
        btnNew.setToolTipText("Save Modifier Master");
        btnNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNew.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnNew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNewMouseClicked(evt);
            }
        });
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        btnNew.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnNewKeyPressed(evt);
            }
        });
        panelbody.add(btnNew, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 520, 90, 40));

        btnReset.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnReset.setText("RESET");
        btnReset.setToolTipText("Reset All Fields");
        btnReset.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReset.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnResetMouseClicked(evt);
            }
        });
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        panelbody.add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 520, 90, 40));

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnCancel.setText("CLOSE");
        btnCancel.setToolTipText("Close Modifier Master");
        btnCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancel.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelMouseClicked(evt);
            }
        });
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        panelbody.add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 520, 90, 40));

        radioBtnSelectAll.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radioBtnSelectAll.setText("Select All");
        radioBtnSelectAll.setOpaque(false);
        radioBtnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnSelectAllActionPerformed(evt);
            }
        });
        panelbody.add(radioBtnSelectAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 480, 93, -1));

        radioBtnUnselectAll.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        radioBtnUnselectAll.setText("Deselect All");
        radioBtnUnselectAll.setOpaque(false);
        radioBtnUnselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnUnselectAllActionPerformed(evt);
            }
        });
        panelbody.add(radioBtnUnselectAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 480, 93, -1));

        chkChargable.setFont(new java.awt.Font("DejaVu Sans", 0, 13)); // NOI18N
        chkChargable.setText("Chargable");
        chkChargable.setOpaque(false);
        chkChargable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                chkChargableKeyPressed(evt);
            }
        });
        panelbody.add(chkChargable, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 180, 90, 30));

        panelLayout.add(panelbody, new java.awt.GridBagConstraints());

        getContentPane().add(panelLayout, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void funItemModeifier()
    {
        try
        {
            //new frmSearchForm(this,"frmModifier").setVisible(true);
            clsUtility obj = new clsUtility();
            obj.funCallForSearchForm("Modifier");
            new frmSearchFormDialog(this, true).setVisible(true);
            if (clsGlobalVarClass.gSearchItemClicked)
            {
                btnNew.setText("UPDATE");//UpdateD
                btnNew.setMnemonic('u');
                Object[] data = clsGlobalVarClass.gArrListSearchData.toArray();
                setData(data);
                clsGlobalVarClass.gSearchItemClicked = false;
            }
        }
        catch (Exception e)
        {
             obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }
    private void txtModifierCodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtModifierCodeMouseClicked
        // TODO add your handling code here:
        funItemModeifier();
    }//GEN-LAST:event_txtModifierCodeMouseClicked
    /**
     * This method is used to fill menu head table
     *
     * @param data
     */
    public void setData1(Object[] data)
    {
        try
        {
            MenuHeadCode = data[0].toString();

            fillTableItem(MenuHeadCode);
        }
        catch (Exception e)
        {
             obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }
    private void txtModifierNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtModifierNameMouseClicked
        // TODO add your handling code here:
        try
        {
            if (txtModifierName.getText().trim().length() == 0)
            {
                new frmAlfaNumericKeyBoard(this, true, "1", "Enter Modifier Name").setVisible(true);
                txtModifierName.setText(clsGlobalVarClass.gKeyboardValue.trim());
            }
            else
            {
                new frmAlfaNumericKeyBoard(this, true, txtModifierName.getText().trim(), "1", "Enter Modifier Name").setVisible(true);
                txtModifierName.setText(clsGlobalVarClass.gKeyboardValue.trim());
            }

        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtModifierNameMouseClicked

    private void txtModifierNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtModifierNameKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {

            if (txtModifierName.getText().trim().contains("'"))
            {
                JOptionPane.showMessageDialog(null, "Invalid Character '");
                return;
            }
            cmbModifierGroup.requestFocus();
        }
    }//GEN-LAST:event_txtModifierNameKeyPressed

    private void txtareaModiDescMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtareaModiDescMouseClicked
        // TODO add your handling code here:
        try
        {
            if (txtareaModiDesc.getText().length() == 0)
            {
                new frmAlfaNumericKeyBoard(this, true, "1", "Enter Description").setVisible(true);
                txtareaModiDesc.setText(clsGlobalVarClass.gKeyboardValue);
            }
            else
            {
                new frmAlfaNumericKeyBoard(this, true, txtareaModiDesc.getText(), "1", "Enter Description").setVisible(true);
                txtareaModiDesc.setText(clsGlobalVarClass.gKeyboardValue);
            }

        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtareaModiDescMouseClicked

    private void txtareaModiDescKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtareaModiDescKeyPressed
        // TODO add your handling code here:

        if (evt.getKeyCode() == 10)
        {
            txtRate.requestFocus();
        }
    }//GEN-LAST:event_txtareaModiDescKeyPressed

    private void txtRateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtRateMouseClicked
        // TODO add your handling code here:
        try
        {
            if (txtRate.getText().length() == 0)
            {
                new frmNumericKeyboard(this, true, "","Double", "Please Enter Rate").setVisible(true);
                txtRate.setText(clsGlobalVarClass.gNumerickeyboardValue);
            }
            else
            {
                new frmNumericKeyboard(this, true, txtRate.getText(), "Double", "Please Enter Rate").setVisible(true);
                txtRate.setText(clsGlobalVarClass.gNumerickeyboardValue);
            }
        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtRateMouseClicked

    public void funitemModifyApply()
    {
        int count = 0;
        count = tblItem.getRowCount();
        for (int i = 0; i < count; i++)
        {
            tblItem.setValueAt(Double.parseDouble(txtRate.getText()), i, 3);
        }
    }
    private void btnApplyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnApplyMouseClicked
        // TODO add your handling code here:
        funitemModifyApply();
    }//GEN-LAST:event_btnApplyMouseClicked

    private void chkApplicableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkApplicableKeyPressed
        // TODO add your handling code here:

        if (evt.getKeyCode() == 10)
        {
            // txtMenuHead.requestFocus();
        }
    }//GEN-LAST:event_chkApplicableKeyPressed

    private void tblMenuHeadsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMenuHeadsMouseClicked
        fillTableItem(tblMenuHeads.getValueAt(tblMenuHeads.getSelectedRow(), 0).toString());
    }//GEN-LAST:event_tblMenuHeadsMouseClicked

    private void tblItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemMouseClicked
        int rowNo = tblItem.getSelectedRow();
        int coloumn = tblItem.getSelectedColumn();
        String rowValue = tblItem.getValueAt(rowNo, 3).toString();
        try
        {
            if (coloumn == 3)
            {
                new frmNumericKeyboard(this,true,"","Double","Enter Amount").setVisible(true);
                tblItem.setValueAt(Double.parseDouble(clsGlobalVarClass.gNumerickeyboardValue), rowNo, 3);
            }
        }
        catch (Exception e)
        {
            tblItem.setValueAt(Double.parseDouble(rowValue), rowNo, 3);
        }
    }//GEN-LAST:event_tblItemMouseClicked

    private void btnNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNewMouseClicked

        try
        {
            funSaveTempData();
            if (btnNew.getText().equalsIgnoreCase("SAVE"))
            {
                funSaveModifierDtl();
            }
            else
            {
                funUpdateModifierDtl();
            }
        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
            if (e.getMessage().startsWith("Duplicate entry"))
            {
                new frmOkPopUp(this, "Modifier Code is already present", "Error", 1).setVisible(true);
                return;
            }
        }
    }//GEN-LAST:event_btnNewMouseClicked

    private void btnResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseClicked
        // TODO add your handling code here:
        funResetFields();
    }//GEN-LAST:event_btnResetMouseClicked

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelMouseClicked
        // TODO add your handling code here:
        dispose();
        clsGlobalVarClass.hmActiveForms.remove("Item Modifier");
    }//GEN-LAST:event_btnCancelMouseClicked

    private void radioBtnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnSelectAllActionPerformed
        // TODO add your handling code here:
        funSelectAllItems();
    }//GEN-LAST:event_radioBtnSelectAllActionPerformed

    private void radioBtnUnselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnUnselectAllActionPerformed
        // TODO add your handling code here:
        funDeselectAllItems();
    }//GEN-LAST:event_radioBtnUnselectAllActionPerformed

    private void txtModifierCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtModifierCodeKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyChar() == '?' || evt.getKeyChar() == '/')
        {
            funItemModeifier();
        }
        if (evt.getKeyCode() == 10)
        {
            txtModifierName.requestFocus();
        }
    }//GEN-LAST:event_txtModifierCodeKeyPressed

    private void cmbModifierGroupKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbModifierGroupKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            txtareaModiDesc.requestFocus();
        }
    }//GEN-LAST:event_cmbModifierGroupKeyPressed

    private void txtRateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRateKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            btnApply.requestFocus();
        }
    }//GEN-LAST:event_txtRateKeyPressed

    private void btnApplyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnApplyKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 10)
        {
            funitemModifyApply();
            btnNew.requestFocus();
        }
    }//GEN-LAST:event_btnApplyKeyPressed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        // TODO add your handling code here:
        try
        {

            if (txtModifierName.getText().trim().contains("'"))
            {
                JOptionPane.showMessageDialog(null, "Invalid Character '");
                return;
            }
            funSaveTempData();
            if (btnNew.getText().equalsIgnoreCase("SAVE"))
            {
                funSaveModifierDtl();
            }
            else
            {
                funUpdateModifierDtl();
            }
        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
            if (e.getMessage().startsWith("Duplicate entry"))
            {
                new frmOkPopUp(this, "Modifier Code is already present", "Error", 1).setVisible(true);
                return;
            }
        }
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        funResetFields();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        dispose();
         clsGlobalVarClass.hmActiveForms.remove("Item Modifier");
    }//GEN-LAST:event_btnCancelActionPerformed

    private void chkChargableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkChargableKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkChargableKeyPressed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        clsGlobalVarClass.hmActiveForms.remove("Item Modifier");
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        clsGlobalVarClass.hmActiveForms.remove("Item Modifier");
    }//GEN-LAST:event_formWindowClosing

    private void btnNewKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnNewKeyPressed
        // TODO add your handling code here:
         
        if (evt.getKeyCode() == 10)
        {
            try
            {
                funSaveTempData();
                if (btnNew.getText().equalsIgnoreCase("SAVE"))
                {
                    funSaveModifierDtl();
                }
                else
                {
                    funUpdateModifierDtl();
                }
            }
            catch (Exception e)
            {
                obj.funWriteErrorLog(e);
                e.printStackTrace();
                if (e.getMessage().startsWith("Duplicate entry"))
                {
                    new frmOkPopUp(this, "Modifier Code is already present", "Error", 1).setVisible(true);
                    return;
                }
            }
        }
        
        
    }//GEN-LAST:event_btnNewKeyPressed
    /**
     * This method is used to set rate
     *
     * @param text
     */
    void setRate(String text)
    {
        txtRate.setText(text);
    }

    /**
     * This method is used to set modifier description
     *
     * @param text
     */
    void setDesc(String text)
    {
        txtareaModiDesc.setText(text);
    }

    /**
     * This method is used to select menu head code
     */
    public void funSelectMenuHeadCode()
    {
        try
        {
            clsUtility obj = new clsUtility();
            obj.funCallForSearchForm("Menu");
            new frmSearchFormDialog(this, true).setVisible(true);
            if (clsGlobalVarClass.gSearchItemClicked)
            {
                Object[] data = clsGlobalVarClass.gArrListSearchData.toArray();
                setData1(data);
                clsGlobalVarClass.gSearchItemClicked = false;

            }
        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to set data
     *
     * @param data
     */
    public void setData(Object[] data)
    {
        try
        {

            txtRate.setText("0.00");
            DefaultTableModel dmSettlementTable1 = (DefaultTableModel) tblItem.getModel();
            dmSettlementTable1.setRowCount(0);
            String ItemCode = null;
            sql = "select * from tblmodifiermaster where strModifierCode='" + clsGlobalVarClass.gSearchedItem + "'";
            ResultSet rsModifier = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            rsModifier.next();
            txtModifierCode.setText(rsModifier.getString(1));
            txtModifierName.setText(rsModifier.getString(2));
            txtareaModiDesc.setText(rsModifier.getString(3));

            String sqlSelect = "select a.strModifierGroupName from tblmodifiergrouphd a ,tblmodifiermaster b where a.strModifierGroupCode=b.strModifierGroupCode and b.strModifierCode='" + rsModifier.getString(1) + "'";
            ResultSet rsmodifierGroup = clsGlobalVarClass.dbMysql.executeResultSet(sqlSelect);
            if (rsmodifierGroup.next())
            {
                cmbModifierGroup.setSelectedItem(rsmodifierGroup.getString(1));
            }
            rsmodifierGroup.close();
            rsModifier.close();

        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to fill tab;e item
     *
     * @param MenuHead
     */
    private void fillTableItem(String MenuHead)
    {
        try
        {
            bg1.clearSelection();
            boolean flagIsTemSelect = false;
            boolean isDefaultModifierSelected = false;
            int count;
            vItemName = new java.util.Vector();
            vItemCode = new java.util.Vector();
            vIsSelectedItem = new java.util.Vector();
            vIsDefaultModifier = new java.util.Vector();
            
            DefaultTableModel dm1 = (DefaultTableModel) tblItem.getModel();
            funSaveTempData();
            dm1.getDataVector().removeAllElements();
            sql = "select strItemName,strItemCode from tblmenuitempricingdtl where strMenuCode='" + MenuHead + "'";
            rs = clsGlobalVarClass.dbMysql.executeResultSet(sql);

            while (rs.next())
            {

                vItemName.add(rs.getString("strItemName"));
                vItemCode.add(rs.getString("strItemCode"));
                vIsSelectedItem.add(flagIsTemSelect);
                vIsDefaultModifier.add(isDefaultModifierSelected);

                Object[] ob =
                {
                    rs.getString(1), rs.getString(2), flagIsTemSelect, Double.parseDouble(txtRate.getText()),isDefaultModifierSelected
                };
                dm1.addRow(ob);
                setAllItems.add(rs.getString(2));
            }
            rs.close();

            tblItem.setModel(dm1);
            sql2 = "select strItemCode,dblRate,strDefaultModifier from tblitemmodofier where strModifierCode='" + txtModifierCode.getText() + "'";
            rs2 = clsGlobalVarClass.dbMysql.executeResultSet(sql2);
            while (rs2.next())
            {
                for (int k = 0; k < tblItem.getRowCount(); k++)
                {

                    if (rs2.getString(1).equals(tblItem.getValueAt(k, 1)))
                    {
                        tblItem.setValueAt(true, k, 2);
                        tblItem.setValueAt(rs2.getDouble(2), k, 3);
                        if(rs2.getString("strDefaultModifier").equalsIgnoreCase("Y"))
                        {
                            tblItem.setValueAt(true, k, 4);
                        }
                    }
                }

            }

            // tblItem.setModel(dm1);
            rs2.close();
            if (mapSelectedItems.size() > 0)
            {
                for (int k = 0; k < tblItem.getRowCount(); k++)
                {
                    if (mapSelectedItems.containsKey(tblItem.getValueAt(k, 1).toString()))
                    {
                        tblItem.setValueAt(true, k, 2);
                        tblItem.setValueAt(mapSelectedItems.get(tblItem.getValueAt(k, 1).toString()), k, 3);
                        tblItem.setValueAt(mapSelectedModifiers.get(tblItem.getValueAt(k, 1)), k, 4);
                    }
                }
            }
            
            

        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to add button to group
     */
    private void groupButton()
    {
        bg1 = new ButtonGroup();
        bg1.add(radioBtnSelectAll);
        bg1.add(radioBtnUnselectAll);
        bg1.clearSelection();
    }

    /**
     * This method is used to select all item
     */
    private void funSelectAllItems()
    {
        for (int k = 0; k < tblItem.getRowCount(); k++)
        {
            tblItem.setValueAt(true, k, 2);
        }
    }

    /**
     * This method is used to deselect all
     */
    private void funDeselectAllItems()
    {
        for (int k = 0; k < tblItem.getRowCount(); k++)
        {
            tblItem.setValueAt(false, k, 2);
        }

    }

    /**
     * This method is used to fill modifier
     */
    private void funFillModifierGroupComboBox()
    {
        try
        {
            hmModifierGroup = new HashMap<>();
            String sqlSelect = "select strModifierGroupCode,strModifierGroupName from tblmodifiergrouphd where strOperational='YES';";
            ResultSet rsgroupDtl = clsGlobalVarClass.dbMysql.executeResultSet(sqlSelect);
            while (rsgroupDtl.next())
            {
                hmModifierGroup.put(rsgroupDtl.getString(2), rsgroupDtl.getString(1));
            }
            rsgroupDtl.close();
            cmbModifierGroup.removeAllItems();
            cmbModifierGroup.addItem("--SELECT--");
            if (hmModifierGroup.size() > 0)
            {
                for (String groupName : hmModifierGroup.keySet())
                {
                    cmbModifierGroup.addItem(groupName);
                }
            }
        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to save modifier
     */
    private void funSaveModifierDtl()
    {
        try
        {
            String modifierGroupcode = "NA";
            if (cmbModifierGroup.getSelectedIndex() > 0)
            {
                modifierGroupcode = hmModifierGroup.get(cmbModifierGroup.getSelectedItem().toString());
            }

            char Applicable;

            if (chkApplicable.isSelected())
            {
                Applicable = 'y';
            }
            else
            {
                Applicable = 'n';
            }

            char chargable = 'n';
            if (chkChargable.isSelected())
            {
                chargable = 'y';
            }

            selectQuery = "select count(*) from tblmodifiermaster";
            countSet1 = clsGlobalVarClass.dbMysql.executeResultSet(selectQuery);
            countSet1.next();
            int cn = countSet1.getInt(1);
            countSet1.close();
            if (cn > 0)
            {
                selectQuery = "select max(strModifierCode) from tblmodifiermaster";
                countSet = clsGlobalVarClass.dbMysql.executeResultSet(selectQuery);
                countSet.next();
                code = countSet.getString(1);
                StringBuilder sb = new StringBuilder(code);
                String ss = sb.delete(0, 1).toString();
                for (int i = 0; i < ss.length(); i++)
                {
                    if (ss.charAt(i) != '0')
                    {
                        strCode = ss.substring(i, ss.length());
                        break;
                    }
                }
                int intCode = Integer.parseInt(strCode);
                intCode++;
                if (intCode < 10)
                {
                    gpCode = "M00" + intCode;
                }
                else if (intCode < 100)
                {
                    gpCode = "M0" + intCode;
                }
                else
                {
                    gpCode = "M" + intCode;
                }

            }
            else
            {
                code = "0";
                gpCode = "M001";
            }

            java.util.Date dt = new java.util.Date();
            java.util.Date curDt = new java.util.Date();
            d = dt.getDate();
            m = dt.getMonth() + 1;
            y = dt.getYear() + 1900;
            h = curDt.getHours();
            min = curDt.getMinutes();
            sec = curDt.getSeconds();
            time = h + ":" + min + ":" + sec;
            date = y + "-" + m + "-" + d;
            dteCreated = date + " " + time;

            dt = new java.util.Date();
            curDt = new java.util.Date();
            d = dt.getDate();
            m = dt.getMonth() + 1;
            y = dt.getYear() + 1900;
            h = curDt.getHours();
            min = curDt.getMinutes();
            sec = curDt.getSeconds();
            time = h + ":" + min + ":" + sec;
            date = y + "-" + m + "-" + d;
            dteEdited = date + " " + time;

            if (!clsGlobalVarClass.validateEmpty(txtModifierName.getText().trim()))
            {
                new frmOkPopUp(this, "Please Enter Modifier Name", "Error", 0).setVisible(true);
                txtModifierName.requestFocus();
            }
            else if (!obj.funCheckLength(txtModifierName.getText().trim(), 100))
            {
                new frmOkPopUp(this, "Modifier Name length must be less than 100", "Error", 0).setVisible(true);
                txtModifierName.requestFocus();
            }
            else if (!obj.funCheckLength(txtareaModiDesc.getText(), 30))
            {
                new frmOkPopUp(this, "Modifier Description length must be less than 30", "Error", 0).setVisible(true);
                txtareaModiDesc.requestFocus();
            }
            else if (!obj.funCheckLength(txtRate.getText(), 6))
            {
                new frmOkPopUp(this, "Rate length must be less than 7", "Error", 0).setVisible(true);
                txtRate.requestFocus();
            }
            else
            {
                txtModifierCode.setText(gpCode);
                insertQuery = "insert into tblmodifiermaster(strModifierCode,strModifierName,strModifierDesc,"
                    + "strUserCreated,strUserEdited,dteDateCreated,dteDateEdited,strClientCode,strModifierGroupCode) "
                    + "values('" + txtModifierCode.getText() + "','" + "-->" + txtModifierName.getText().trim() + "','"
                    + txtareaModiDesc.getText() + "','" + userCode + "','" + userCode + "','"
                    + clsGlobalVarClass.getCurrentDateTime() + "','" + clsGlobalVarClass.getCurrentDateTime() + "'"
                    + ",'"+clsGlobalVarClass.gClientCode+"','" + modifierGroupcode + "')";
                int exc = clsGlobalVarClass.dbMysql.execute(insertQuery);

                for (String itemCode : setAllItems)
                {
                    sql = "delete from tblitemmodofier where strItemCode='" + itemCode + "' and strModifierCode='" + txtModifierCode.getText() + "'";
                    clsGlobalVarClass.dbMysql.execute(sql);
                }
                rate = Double.valueOf(txtRate.getText());                
                for (String itemCode : mapSelectedItems.keySet())
                {
                    String isDefaultModifier="N";
                    if(mapSelectedModifiers.get(itemCode))
                    {
                        isDefaultModifier="Y";
                    }
                    sql = "insert into tblitemmodofier(strItemCode,strModifierCode,strChargable,"
                        + "dblRate,strApplicable,strDefaultModifier) values('" + itemCode + "','" + txtModifierCode.getText() + "','"
                        + chargable + "','" + mapSelectedItems.get(itemCode) + "','" + Applicable + "','"+isDefaultModifier+"')";
                    exc = clsGlobalVarClass.dbMysql.execute(sql);
                }
                if (exc > 0)
                {
                    String sql="update tblmasteroperationstatus set dteDateEdited='"+clsGlobalVarClass.getCurrentDateTime()+"' "
                        + " where strTableName='Modifier' ";
                    clsGlobalVarClass.dbMysql.execute(sql);
                    new frmOkPopUp(this, "Entry added Successfully", "Successfull", 3).setVisible(true);
                    funResetFields();
                }
            }
        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to update modifiers
     */
    private void funUpdateModifierDtl()
    {
        try
        {
            String modifierGroupcode = "NA";
            if (cmbModifierGroup.getSelectedIndex() > 0)
            {
                modifierGroupcode = hmModifierGroup.get(cmbModifierGroup.getSelectedItem().toString());
            }
            char Applicable;

            if (chkApplicable.isSelected())
            {
                Applicable = 'y';
            }
            else
            {
                Applicable = 'n';
            }

            char chargable = 'n';
            if (chkChargable.isSelected())
            {
                chargable = 'y';
            }

            java.util.Date dt = new java.util.Date();
            java.util.Date curDt = new java.util.Date();
            d = dt.getDate();
            m = dt.getMonth() + 1;
            y = dt.getYear() + 1900;
            h = curDt.getHours();
            min = curDt.getMinutes();
            sec = curDt.getSeconds();
            time = h + ":" + min + ":" + sec;
            date = y + "-" + m + "-" + d;
            dteEdited = date + " " + time;

            if (!clsGlobalVarClass.validateEmpty(txtModifierName.getText().trim()))
            {
                new frmOkPopUp(this, "Please Enter Modifier Name", "Error", 0).setVisible(true);
            }
            else if (!obj.funCheckLength(txtModifierName.getText().trim(), 100))
            {
                new frmOkPopUp(this, "Modifier Name length must be less than 100", "Error", 0).setVisible(true);
                txtModifierName.requestFocus();
            }
            else if (!obj.funCheckLength(txtareaModiDesc.getText(), 30))
            {
                new frmOkPopUp(this, "Modifier Description length must be less than 30", "Error", 0).setVisible(true);
                txtareaModiDesc.requestFocus();
            }
            else if (!obj.funCheckLength(txtRate.getText(), 6))
            {
                new frmOkPopUp(this, "Rate length must be less than 7", "Error", 0).setVisible(true);
                txtRate.requestFocus();
            }
            else
            {
                String ModifierName = txtModifierName.getText().trim();
                if (ModifierName.startsWith("-->"))
                {
                    ModifierName = txtModifierName.getText().trim();
                }
                else
                {
                    ModifierName = "-->" + txtModifierName.getText().trim();
                }
                updateQuery = "UPDATE tblmodifiermaster SET strModifierName = '" + ModifierName
                    + "',strModifierGroupCode='" + modifierGroupcode + "'"
                    + ",strModifierDesc='" + txtareaModiDesc.getText() + "'"
                    + ",strUserEdited='" + userCode
                    + "',dteDateEdited='" + clsGlobalVarClass.getCurrentDateTime()
                    + "' WHERE strModifierCode='" + txtModifierCode.getText() + "'";
                //System.out.println(updateQuery);
                int exc = clsGlobalVarClass.dbMysql.execute(updateQuery);

                for (String itemCode : setAllItems)
                {
                    sql = "delete from tblitemmodofier where strItemCode='" + itemCode + "' and strModifierCode='" + txtModifierCode.getText() + "'";
                    clsGlobalVarClass.dbMysql.execute(sql);
                }

                for (String itemCode : mapSelectedItems.keySet())
                {
                    String isDefaultModifier="N";
                    if(mapSelectedModifiers.get(itemCode))
                    {
                        isDefaultModifier="Y";
                    }
                    sql = "insert into tblitemmodofier(strItemCode,strModifierCode,strChargable,"
                        + "dblRate,strApplicable,strDefaultModifier) values('" + itemCode + "','" + txtModifierCode.getText() + "','"
                        + chargable + "','" + mapSelectedItems.get(itemCode) + "','" + Applicable + "','"+isDefaultModifier+"')";
                    exc = clsGlobalVarClass.dbMysql.execute(sql);
                }
                if (exc > 0)
                {
                    String sql="update tblmasteroperationstatus set dteDateEdited='"+clsGlobalVarClass.getCurrentDateTime()+"' "
                        + " where strTableName='Modifier' ";
                    clsGlobalVarClass.dbMysql.execute(sql);
                    new frmOkPopUp(this, "Updated Successfully", "Successfull", 3).setVisible(true);
                    funResetFields();
                }
            }
        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to save temp data
     */
    private void funSaveTempData()
    {
        mapDefaultModifier.clear();
        for (int k = 0; k < tblItem.getRowCount(); k++)
        {
            boolean select = Boolean.parseBoolean(tblItem.getValueAt(k, 2).toString());
            if (select == true)
            {
                mapSelectedItems.put(tblItem.getValueAt(k, 1).toString(), (Double) tblItem.getValueAt(k, 3));                
                boolean isDefaultModifier =Boolean.parseBoolean(tblItem.getValueAt(k, 4).toString());
                if(isDefaultModifier)
                {
                    mapDefaultModifier.put(tblItem.getValueAt(k, 1).toString(), "Y");
                    mapSelectedModifiers.put(tblItem.getValueAt(k, 1).toString(),true);
                }
                else
                {
                    mapDefaultModifier.put(tblItem.getValueAt(k, 1).toString(), "N");
                    mapSelectedModifiers.put(tblItem.getValueAt(k, 1).toString(), false);
                }
            }
            else
            {
                mapSelectedItems.remove(tblItem.getValueAt(k, 1).toString());
            }
        }
    }

    /**
     * This method is used to reset fields
     */
    private void funResetFields()
    {
        try
        {
            btnNew.setText("SAVE");
            btnNew.setMnemonic('u');
            txtModifierCode.requestFocus();
            flag = false;
            txtModifierCode.setText("");
            txtModifierName.setText("");
            chkApplicable.setSelected(false);

            txtRate.setText("0.00");
            txtareaModiDesc.setText("");

            bg1.clearSelection();
            MenuHeadCode = "";
            DefaultTableModel dmSettlementTable1 = (DefaultTableModel) tblItem.getModel();
            dmSettlementTable1.setRowCount(0);
            funLoadMenuHeadTable();
            setAllItems = new HashSet<>();
            funDeselectAllItems();
            mapSelectedItems = new HashMap<>();
        }
        catch (Exception e)
        {
            obj.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnReset;
    private javax.swing.JCheckBox chkApplicable;
    private javax.swing.JCheckBox chkChargable;
    private javax.swing.JComboBox cmbModifierGroup;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblFormName;
    private javax.swing.JLabel lblGroupCode2;
    private javax.swing.JLabel lblGroupName2;
    private javax.swing.JLabel lblHOSign;
    private javax.swing.JLabel lblModiDesc;
    private javax.swing.JLabel lblModifierGroup;
    private javax.swing.JLabel lblModuleName;
    private javax.swing.JLabel lblPosName;
    private javax.swing.JLabel lblProductName1;
    private javax.swing.JLabel lblRate;
    private javax.swing.JLabel lblUserCode;
    private javax.swing.JLabel lblformName;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelLayout;
    private javax.swing.JPanel panelbody;
    private javax.swing.JRadioButton radioBtnSelectAll;
    private javax.swing.JRadioButton radioBtnUnselectAll;
    private javax.swing.JScrollPane scrollPaneItems;
    private javax.swing.JScrollPane scrollPaneMenuHeads;
    private javax.swing.JScrollPane scrollPaneModiDescription;
    private javax.swing.JTable tblItem;
    private javax.swing.JTable tblMenuHeads;
    private javax.swing.JTextField txtModifierCode;
    private javax.swing.JTextField txtModifierName;
    private javax.swing.JTextField txtRate;
    private javax.swing.JTextArea txtareaModiDesc;
    // End of variables declaration//GEN-END:variables
}
