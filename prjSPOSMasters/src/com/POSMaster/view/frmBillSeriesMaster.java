package com.POSMaster.view;

import com.POSGlobal.controller.clsGlobalVarClass;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JPanel;
import javax.swing.Timer;
import com.POSGlobal.controller.clsUtility;
import com.POSGlobal.view.frmOkPopUp;
import com.POSGlobal.view.frmPropertySetup;
import java.awt.Component;
import java.awt.Dimension;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.AbstractCellEditor;
import javax.swing.DefaultCellEditor;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellEditor;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

/**
 * 
 * @author Admin
 * 
 * You can create bill series POS wise or common to all POS.
 * You can create bill series on only one type ie. 
 * One of from Group,SubGroup,MenuHead and Revenue Head.
 * To create bill series,select POS,select Bill series type. Once you select bill series type,first grid will fill for respected bill series type.
 * To create bill series,select items and add. It will add all selected items in 2nd grid. 
 * Then you can mention bill series code in 2nd grid. Bill series code will accept only max 2 characters.
 * 
 * To update bill series, you will have to select bill series from 2nd grid,after selecting it click on remove button.
 * It will remove from 2nd grid and will display all items in 1st grid again.
 * After modifying items of bill series,add it to 2nd grid again and set old bill series code in  2nd grid.
 */
public class frmBillSeriesMaster extends javax.swing.JFrame
{

    private clsUtility objUtility = new clsUtility();
    private Map<String, String> mapPOS;
    private Map<String, String> mapCodeWithName;
    private Map<String, String> mapNameWithCode;
    private Map<String, String> mapSelectedCodeWithName;
    private Map<Integer, List<String>> mapBillSeriesCodeList;
    private Map<Integer, List<String>> mapBillSeriesNameList;
    private String selectedPOSCode;

    /**
     * This method is used to initialize frmGroupMaster
     */
    public frmBillSeriesMaster()
    {
	initComponents();
	funSetShortCutKeys();
	try
	{
	    Timer timer = new Timer(500, new ActionListener()
	    {
		@Override
		public void actionPerformed(ActionEvent e)
		{
		    java.util.Date date1 = new java.util.Date();
		    String newstr = String.format("%tr", date1);
		    String dateAndTime = clsGlobalVarClass.gPOSDateToDisplay + " " + newstr;
		    lblDate.setText(dateAndTime);
		}
	    });
	    timer.setRepeats(true);
	    timer.setCoalesce(true);
	    timer.setInitialDelay(0);
	    timer.start();

	    lblUserCode.setText(clsGlobalVarClass.gUserCode);
	    lblPosName.setText(clsGlobalVarClass.gPOSName);
	    lblDate.setText(clsGlobalVarClass.gPOSDateToDisplay);
	    lblModuleName.setText(clsGlobalVarClass.gSelectedModule);

	    mapPOS = new HashMap<>();
	    mapCodeWithName = new HashMap<String, String>();
	    mapNameWithCode = new HashMap<String, String>();
	    mapSelectedCodeWithName = new HashMap<String, String>();
	    mapBillSeriesCodeList = new HashMap<>();
	    mapBillSeriesNameList = new HashMap<>();

	    funFillPOSCombo();
	    funPOSComboActionPerformed();

	}
	catch (Exception e)
	{
	    objUtility.funWriteErrorLog(e);
	    e.printStackTrace();
	}
    }

    private void funSetShortCutKeys()
    {
	btnCancel.setMnemonic('c');
	btnNew.setMnemonic('s');
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        panelHeader = new javax.swing.JPanel();
        lblProductName = new javax.swing.JLabel();
        lblModuleName = new javax.swing.JLabel();
        lblformName = new javax.swing.JLabel();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblPosName = new javax.swing.JLabel();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        lblUserCode = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblHOSign = new javax.swing.JLabel();
        panelLayout = new JPanel() {  
            public void paintComponent(Graphics g) {  
                Image img = Toolkit.getDefaultToolkit().getImage(  
                    getClass().getResource("/com/POSMaster/images/imgBGJPOS.png"));  
                g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);  
            }  
        };  ;
        panelBody = new javax.swing.JPanel();
        btnNew = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblPOS = new javax.swing.JLabel();
        cmbPOS = new javax.swing.JComboBox();
        lblSelectType = new javax.swing.JLabel();
        cmbBillSeriesType = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();
        scrollPaneSelectedTypeDtl = new javax.swing.JScrollPane();
        tblBillSeriesTypeDtl = new javax.swing.JTable();
        scrollPaneSelectedTypeDtl1 = new javax.swing.JScrollPane();
        tblBillSeriesDtl = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setExtendedState(MAXIMIZED_BOTH);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosed(java.awt.event.WindowEvent evt)
            {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        panelHeader.setBackground(new java.awt.Color(69, 164, 238));
        panelHeader.setLayout(new javax.swing.BoxLayout(panelHeader, javax.swing.BoxLayout.LINE_AXIS));

        lblProductName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblProductName.setForeground(new java.awt.Color(255, 255, 255));
        lblProductName.setText("SPOS -");
        panelHeader.add(lblProductName);

        lblModuleName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblModuleName.setForeground(new java.awt.Color(255, 255, 255));
        panelHeader.add(lblModuleName);

        lblformName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblformName.setForeground(new java.awt.Color(255, 255, 255));
        lblformName.setText("-Bill Series");
        panelHeader.add(lblformName);
        panelHeader.add(filler4);
        panelHeader.add(filler5);

        lblPosName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPosName.setForeground(new java.awt.Color(255, 255, 255));
        lblPosName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPosName.setMaximumSize(new java.awt.Dimension(321, 30));
        lblPosName.setMinimumSize(new java.awt.Dimension(321, 30));
        lblPosName.setPreferredSize(new java.awt.Dimension(321, 30));
        panelHeader.add(lblPosName);
        panelHeader.add(filler6);

        lblUserCode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUserCode.setForeground(new java.awt.Color(255, 255, 255));
        lblUserCode.setMaximumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setMinimumSize(new java.awt.Dimension(90, 30));
        lblUserCode.setPreferredSize(new java.awt.Dimension(90, 30));
        panelHeader.add(lblUserCode);

        lblDate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(255, 255, 255));
        lblDate.setMaximumSize(new java.awt.Dimension(192, 30));
        lblDate.setMinimumSize(new java.awt.Dimension(192, 30));
        lblDate.setPreferredSize(new java.awt.Dimension(192, 30));
        panelHeader.add(lblDate);

        lblHOSign.setMaximumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setMinimumSize(new java.awt.Dimension(34, 30));
        lblHOSign.setPreferredSize(new java.awt.Dimension(34, 30));
        panelHeader.add(lblHOSign);

        getContentPane().add(panelHeader, java.awt.BorderLayout.PAGE_START);

        panelLayout.setBackground(new java.awt.Color(255, 255, 255));
        panelLayout.setLayout(new java.awt.GridBagLayout());

        panelBody.setBackground(new java.awt.Color(255, 255, 255));
        panelBody.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelBody.setMinimumSize(new java.awt.Dimension(800, 570));
        panelBody.setOpaque(false);

        btnNew.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnNew.setForeground(new java.awt.Color(255, 255, 255));
        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnNew.setText("SAVE");
        btnNew.setToolTipText("Save Group Master");
        btnNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNew.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnNew.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnNewMouseClicked(evt);
            }
        });
        btnNew.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnNewActionPerformed(evt);
            }
        });
        btnNew.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                btnNewKeyPressed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnCancel.setText("CLOSE");
        btnCancel.setToolTipText("Close Group Master");
        btnCancel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancel.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnCancel.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnCancelMouseClicked(evt);
            }
        });
        btnCancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnCancelActionPerformed(evt);
            }
        });

        lblPOS.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblPOS.setText("POS :");

        cmbPOS.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbPOSActionPerformed(evt);
            }
        });

        lblSelectType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSelectType.setText("Bill SeriesType :");

        cmbBillSeriesType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Group", "Sub Group", "Menu Head", "Revenue Head" }));
        cmbBillSeriesType.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbBillSeriesTypeActionPerformed(evt);
            }
        });

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn1.png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn2.png"))); // NOI18N
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnAddMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt)
            {
                btnAddMouseEntered(evt);
            }
        });

        tblBillSeriesTypeDtl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "TYPE", "NAME", "CODE", "SELECT"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean []
            {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        scrollPaneSelectedTypeDtl.setViewportView(tblBillSeriesTypeDtl);

        tblBillSeriesDtl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "<html><font size='3' color='black'>Sr. No.</font></html>", "<html><font size='3' color='black'>Bill Series</font></html>", "<html><font size='3' color='black'>Contents</font></html>", "<html><font size='3' color='black'>Remove</font></html>", "<html><font size='3' color='black' style='text-align:top;margin:0px'>Print Grand Total Of Other Bills</font></html>", "<html><font size='3' color='black' style='text-align:top;margin:0px'>Print Inclusive Of All Taxes</font></html>", "Bill Note"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean []
            {
                false, true, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit [columnIndex];
            }
        });
        tblBillSeriesDtl.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblBillSeriesDtl.setRowHeight(20);
        tblBillSeriesDtl.getTableHeader().setReorderingAllowed(false);
        tblBillSeriesDtl.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tblBillSeriesDtlMouseClicked(evt);
            }
        });
        scrollPaneSelectedTypeDtl1.setViewportView(tblBillSeriesDtl);
        if (tblBillSeriesDtl.getColumnModel().getColumnCount() > 0)
        {
            tblBillSeriesDtl.getColumnModel().getColumn(0).setMinWidth(50);
            tblBillSeriesDtl.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblBillSeriesDtl.getColumnModel().getColumn(0).setMaxWidth(50);
            tblBillSeriesDtl.getColumnModel().getColumn(1).setMinWidth(70);
            tblBillSeriesDtl.getColumnModel().getColumn(1).setPreferredWidth(70);
            tblBillSeriesDtl.getColumnModel().getColumn(1).setMaxWidth(70);
            tblBillSeriesDtl.getColumnModel().getColumn(2).setMinWidth(300);
            tblBillSeriesDtl.getColumnModel().getColumn(2).setPreferredWidth(300);
            tblBillSeriesDtl.getColumnModel().getColumn(2).setMaxWidth(300);
            tblBillSeriesDtl.getColumnModel().getColumn(3).setMinWidth(50);
            tblBillSeriesDtl.getColumnModel().getColumn(3).setPreferredWidth(50);
            tblBillSeriesDtl.getColumnModel().getColumn(3).setMaxWidth(50);
            tblBillSeriesDtl.getColumnModel().getColumn(4).setMinWidth(200);
            tblBillSeriesDtl.getColumnModel().getColumn(4).setPreferredWidth(200);
            tblBillSeriesDtl.getColumnModel().getColumn(4).setMaxWidth(200);
            tblBillSeriesDtl.getColumnModel().getColumn(5).setMinWidth(200);
            tblBillSeriesDtl.getColumnModel().getColumn(5).setPreferredWidth(200);
            tblBillSeriesDtl.getColumnModel().getColumn(5).setMaxWidth(200);
            tblBillSeriesDtl.getColumnModel().getColumn(6).setMinWidth(200);
            tblBillSeriesDtl.getColumnModel().getColumn(6).setPreferredWidth(200);
            tblBillSeriesDtl.getColumnModel().getColumn(6).setMaxWidth(200);
        }

        btnRemove.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(255, 255, 255));
        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn1.png"))); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRemove.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSGlobal/images/imgCmnBtn2.png"))); // NOI18N
        btnRemove.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                btnRemoveMouseClicked(evt);
            }
        });
        btnRemove.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBodyLayout = new javax.swing.GroupLayout(panelBody);
        panelBody.setLayout(panelBodyLayout);
        panelBodyLayout.setHorizontalGroup(
            panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBodyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBodyLayout.createSequentialGroup()
                        .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelBodyLayout.createSequentialGroup()
                                .addComponent(lblPOS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbPOS, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelBodyLayout.createSequentialGroup()
                                .addComponent(lblSelectType)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbBillSeriesType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 396, Short.MAX_VALUE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPaneSelectedTypeDtl1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollPaneSelectedTypeDtl)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBodyLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBodyLayout.createSequentialGroup()
                                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnRemove, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        panelBodyLayout.setVerticalGroup(
            panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBodyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPOS, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbPOS, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblSelectType, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbBillSeriesType, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneSelectedTypeDtl, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollPaneSelectedTypeDtl1, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        panelLayout.add(panelBody, new java.awt.GridBagConstraints());

        getContentPane().add(panelLayout, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
	// TODO add your handling code here:
	clsGlobalVarClass.hmActiveForms.remove("Bill Series Master");
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
	// TODO add your handling code here:
	clsGlobalVarClass.hmActiveForms.remove("Bill Series Master");
    }//GEN-LAST:event_formWindowClosing

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCancelActionPerformed
    {//GEN-HEADEREND:event_btnCancelActionPerformed
	// TODO add your handling code here:
	dispose();
	clsGlobalVarClass.hmActiveForms.remove("Bill Series Master");
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnCancelMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnCancelMouseClicked
    {//GEN-HEADEREND:event_btnCancelMouseClicked

    }//GEN-LAST:event_btnCancelMouseClicked

    private void btnNewKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_btnNewKeyPressed
    {//GEN-HEADEREND:event_btnNewKeyPressed
	// TODO add your handling code here:
	if (evt.getKeyCode() == 10)
	{

	}
    }//GEN-LAST:event_btnNewKeyPressed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnNewActionPerformed
    {//GEN-HEADEREND:event_btnNewActionPerformed

    }//GEN-LAST:event_btnNewActionPerformed

    private void btnNewMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnNewMouseClicked
    {//GEN-HEADEREND:event_btnNewMouseClicked
	funSaveButtonClicked();
    }//GEN-LAST:event_btnNewMouseClicked

    private void cmbPOSActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbPOSActionPerformed
    {//GEN-HEADEREND:event_cmbPOSActionPerformed
	funPOSComboActionPerformed();
    }//GEN-LAST:event_cmbPOSActionPerformed

    private void cmbBillSeriesTypeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbBillSeriesTypeActionPerformed
    {//GEN-HEADEREND:event_cmbBillSeriesTypeActionPerformed
	funCmbBillSeriestTypeClicked();
    }//GEN-LAST:event_cmbBillSeriesTypeActionPerformed

    private void btnAddMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnAddMouseClicked
    {//GEN-HEADEREND:event_btnAddMouseClicked
	funAddButtonClicked();
	if (tblBillSeriesDtl.getRowCount() > 0)
	{
	    cmbBillSeriesType.setEnabled(false);
	}
	else
	{
	    cmbBillSeriesType.setEnabled(true);
	}
    }//GEN-LAST:event_btnAddMouseClicked

    private void btnAddMouseEntered(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnAddMouseEntered
    {//GEN-HEADEREND:event_btnAddMouseEntered
	// TODO add your handling code here:
    }//GEN-LAST:event_btnAddMouseEntered

    private void tblBillSeriesDtlMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblBillSeriesDtlMouseClicked
    {//GEN-HEADEREND:event_tblBillSeriesDtlMouseClicked
	int row = tblBillSeriesDtl.getSelectedRow();
	if (tblBillSeriesDtl.getValueAt(row, 1) != null || tblBillSeriesDtl.getValueAt(row, 1).toString().length() > 0)
	{
	    funBillSeriesCellClicked(row);
	}
    }//GEN-LAST:event_tblBillSeriesDtlMouseClicked

    private void btnRemoveMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_btnRemoveMouseClicked
    {//GEN-HEADEREND:event_btnRemoveMouseClicked
	funRemoveButtonClicked();
	if (tblBillSeriesDtl.getRowCount() > 0)
	{
	    cmbBillSeriesType.setEnabled(false);
	}
	else
	{
	    cmbBillSeriesType.setEnabled(true);
	}
    }//GEN-LAST:event_btnRemoveMouseClicked

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRemoveActionPerformed
    {//GEN-HEADEREND:event_btnRemoveActionPerformed
	// TODO add your handling code here:
    }//GEN-LAST:event_btnRemoveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnRemove;
    private javax.swing.JComboBox cmbBillSeriesType;
    private javax.swing.JComboBox cmbPOS;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblHOSign;
    private javax.swing.JLabel lblModuleName;
    private javax.swing.JLabel lblPOS;
    private javax.swing.JLabel lblPosName;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblSelectType;
    private javax.swing.JLabel lblUserCode;
    private javax.swing.JLabel lblformName;
    private javax.swing.JPanel panelBody;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelLayout;
    private javax.swing.JScrollPane scrollPaneSelectedTypeDtl;
    private javax.swing.JScrollPane scrollPaneSelectedTypeDtl1;
    private javax.swing.JTable tblBillSeriesDtl;
    private javax.swing.JTable tblBillSeriesTypeDtl;
    // End of variables declaration//GEN-END:variables

    private void funFillPOSCombo()
    {
	try
	{
	    String sql = "select strPOSCode,strPOSName from tblposmaster where strOperationalYN='Y' ";
	    ResultSet rsPOS = clsGlobalVarClass.dbMysql.executeResultSet(sql);
	    cmbPOS.removeAllItems();
	    cmbPOS.addItem("All");
	    mapPOS.put("All", "All");
	    while (rsPOS.next())
	    {
		mapPOS.put(rsPOS.getString(2), rsPOS.getString(1));
		cmbPOS.addItem(rsPOS.getString(2));
	    }
	    rsPOS.close();
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }

    private void funCmbBillSeriestTypeClicked()
    {
	String selectedType = cmbBillSeriesType.getSelectedItem().toString();
	funFillSelectedBillSeriesTypeDtlTable(selectedType);
    }

    private void funFillSelectedBillSeriesTypeDtlTable(String selectedType)
    {
	try
	{
	    funFillNameWithCode(selectedType);
	    DefaultTableModel dmTypeDtl = (DefaultTableModel) tblBillSeriesTypeDtl.getModel();
	    dmTypeDtl.setRowCount(0);
	    tblBillSeriesTypeDtl.setRowHeight(25);
	    tblBillSeriesDtl.setRowHeight(25);

	    Iterator<Map.Entry<String, String>> it = mapNameWithCode.entrySet().iterator();
	    while (it.hasNext())
	    {
		Map.Entry<String, String> enrty = it.next();
		Object[] row =
		{
		    selectedType, enrty.getKey(), enrty.getValue(), false
		};
		dmTypeDtl.addRow(row);
	    }
	    tblBillSeriesTypeDtl.setModel(dmTypeDtl);
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }

    private void funAddButtonClicked()
    {
	try
	{

	    //check duplicates
	    boolean isDuplicate = funCheckForDuplicates();
	    if (isDuplicate)
	    {
		new frmOkPopUp(this, "Already Created Bill Series.", "Error", 0).setVisible(true);
		return;
	    }
	    else
	    {
		StringBuilder billSeriesBuilder = new StringBuilder();
		billSeriesBuilder.setLength(0);
		List<String> listOfCodes = new ArrayList<>();
		List<String> listOfNames = new ArrayList<>();

		for (int i = 0; i < tblBillSeriesTypeDtl.getRowCount(); i++)
		{
		    boolean isSelected = Boolean.parseBoolean(tblBillSeriesTypeDtl.getValueAt(i, 3).toString());
		    if (isSelected)
		    {
			if (billSeriesBuilder.length() == 0)
			{
			    billSeriesBuilder.append(tblBillSeriesTypeDtl.getValueAt(i, 1).toString());
			}
			else
			{
			    billSeriesBuilder.append(",");
			    billSeriesBuilder.append(tblBillSeriesTypeDtl.getValueAt(i, 1).toString());
			}
			listOfCodes.add(tblBillSeriesTypeDtl.getValueAt(i, 2).toString());
			listOfNames.add(tblBillSeriesTypeDtl.getValueAt(i, 1).toString());
			mapSelectedCodeWithName.put(tblBillSeriesTypeDtl.getValueAt(i, 2).toString(), tblBillSeriesTypeDtl.getValueAt(i, 1).toString());
		    }
		    else
		    {
			continue;
		    }
		}

		int serialNo = funGetSerialNo();
		mapBillSeriesCodeList.put(serialNo, listOfCodes);
		mapBillSeriesNameList.put(serialNo, listOfNames);

		//remove selected rows
		funRemoveAddedRows();

		if (billSeriesBuilder.length() > 0)
		{
		    DefaultTableModel dm = (DefaultTableModel) tblBillSeriesDtl.getModel();
		    Object[] rowData =
		    {
			serialNo, "", billSeriesBuilder, false
		    };
		    dm.addRow(rowData);
		}
		else
		{
		    new frmOkPopUp(this, "Please Select The Item.", "Error", 0).setVisible(true);
		    return;
		}
	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }

    private void funRemoveButtonClicked()
    {
	try
	{
	    boolean isItemSelected = false;
	    List<String> listDeleteRows = new ArrayList<>();
	    for (int i = 0; i < tblBillSeriesDtl.getRowCount(); i++)
	    {
		boolean isSelected = Boolean.parseBoolean(tblBillSeriesDtl.getValueAt(i, 3).toString());
		if (isSelected)
		{
		    isItemSelected = true;
		    break;
		}
		else
		{
		    continue;
		}
	    }
	    if (isItemSelected)
	    {
		funAddToTblSelectedTypeDtl();
		funRemoveFromBillSeriesTable();
	    }
	    else
	    {
		new frmOkPopUp(this, "Please Select The Item.", "Error", 0).setVisible(true);
		return;
	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }

    private boolean funCheckForDuplicates()
    {
	boolean isDuplicate = false;
	StringBuilder billSeriesBuilder = new StringBuilder();

	for (int i = 0; i < tblBillSeriesTypeDtl.getRowCount(); i++)
	{
	    boolean isSelected = Boolean.parseBoolean(tblBillSeriesTypeDtl.getValueAt(i, 3).toString());
	    if (isSelected)
	    {
		if (billSeriesBuilder.length() == 0)
		{
		    billSeriesBuilder.append(tblBillSeriesTypeDtl.getValueAt(i, 1).toString());
		}
		else
		{
		    billSeriesBuilder.append(",");
		    billSeriesBuilder.append(tblBillSeriesTypeDtl.getValueAt(i, 1).toString());
		}
		if (mapSelectedCodeWithName.containsKey(tblBillSeriesTypeDtl.getValueAt(i, 2).toString()))
		{
		    isDuplicate = true;
		    break;
		}
	    }
	}

	return isDuplicate;
    }

    private void funFillNameWithCode(String type)
    {
	try
	{
	    StringBuilder sqlQuery = new StringBuilder();
	    mapNameWithCode.clear();
	    mapCodeWithName.clear();
	    ResultSet rsNameWithCode = null;
	    boolean addFilter = false;

	    Iterator<Map.Entry<String, String>> it = mapSelectedCodeWithName.entrySet().iterator();
	    String filter = "(''";
	    if (mapSelectedCodeWithName.size() > 0)
	    {
		addFilter = true;
	    }
	    while (it.hasNext())
	    {
		filter += ",'" + it.next().getKey() + "' ";
	    }
	    filter += ") ";

	    if (type.equalsIgnoreCase("Group"))
	    {
		sqlQuery.setLength(0);
		sqlQuery.append(" select a.strGroupName,a.strGroupCode from tblgrouphd a ");
		if (addFilter)
		{
		    sqlQuery.append(" where a.strGroupCode NOT IN ");
		    sqlQuery.append(filter);
		}

		rsNameWithCode = clsGlobalVarClass.dbMysql.executeResultSet(sqlQuery.toString());
		while (rsNameWithCode.next())
		{
		    mapNameWithCode.put(rsNameWithCode.getString(1), rsNameWithCode.getString(2));
		    mapCodeWithName.put(rsNameWithCode.getString(2), rsNameWithCode.getString(1));
		}
		rsNameWithCode.close();
	    }
	    else if (type.equalsIgnoreCase("Sub Group"))
	    {
		sqlQuery.setLength(0);
		sqlQuery.append("select a.strSubGroupName,a.strSubGroupCode from tblsubgrouphd a ");
		if (addFilter)
		{
		    sqlQuery.append(" where a.strSubGroupCode NOT IN ");
		    sqlQuery.append(filter);
		}

		rsNameWithCode = clsGlobalVarClass.dbMysql.executeResultSet(sqlQuery.toString());
		while (rsNameWithCode.next())
		{
		    mapNameWithCode.put(rsNameWithCode.getString(1), rsNameWithCode.getString(2));
		    mapCodeWithName.put(rsNameWithCode.getString(2), rsNameWithCode.getString(1));
		}
		rsNameWithCode.close();
	    }
	    else if (type.equalsIgnoreCase("Menu Head"))
	    {
		sqlQuery.setLength(0);
		sqlQuery.append("select a.strMenuName,a.strMenuCode from tblmenuhd a ");
		if (addFilter)
		{
		    sqlQuery.append(" where a.strMenuCode NOT IN ");
		    sqlQuery.append(filter);
		}
		rsNameWithCode = clsGlobalVarClass.dbMysql.executeResultSet(sqlQuery.toString());
		while (rsNameWithCode.next())
		{
		    mapNameWithCode.put(rsNameWithCode.getString(1), rsNameWithCode.getString(2));
		    mapCodeWithName.put(rsNameWithCode.getString(2), rsNameWithCode.getString(1));
		}
		rsNameWithCode.close();
	    }
	    else if (type.equalsIgnoreCase("Revenue Head"))
	    {
		sqlQuery.setLength(0);
		sqlQuery.append("select a.strRevenueHead,a.strRevenueHead  from tblitemmaster a ");
		if (addFilter)
		{
		    sqlQuery.append(" where a.strRevenueHead NOT IN ");
		    sqlQuery.append(filter);
		}
		sqlQuery.append(" group by a.strRevenueHead;");

		rsNameWithCode = clsGlobalVarClass.dbMysql.executeResultSet(sqlQuery.toString());
		while (rsNameWithCode.next())
		{
		    mapNameWithCode.put(rsNameWithCode.getString(1), rsNameWithCode.getString(2));
		    mapCodeWithName.put(rsNameWithCode.getString(2), rsNameWithCode.getString(1));
		}
		rsNameWithCode.close();
	    }
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}

    }

   private void funSaveBillSeries()
    {
	try
	{
	    //clsGlobalVarClass.dbMysql.funStartTransaction();
	    StringBuilder sqlBuilder = new StringBuilder();

	    for (int i = 0; i < tblBillSeriesDtl.getRowCount(); i++)
	    {

		Integer key = Integer.parseInt(tblBillSeriesDtl.getValueAt(i, 0).toString());
		List<String> listOfCodes = mapBillSeriesCodeList.get(key);
		List<String> listOfNames = mapBillSeriesNameList.get(key);

		if (funIsExistsBillSeries(i, listOfCodes, listOfNames))
		{
		    continue;
		}
		else
		{
		    String printGTOfOtherBill = "N";
		    if (tblBillSeriesDtl.getValueAt(i, 4) != null && Boolean.parseBoolean(tblBillSeriesDtl.getValueAt(i, 4).toString()))
		    {
			printGTOfOtherBill = "Y";
		    }
		    else
		    {
			printGTOfOtherBill = "N";
		    }

		    String printInclusiveOfAllTaxesOnBill = "N";
		    if (tblBillSeriesDtl.getValueAt(i, 5) != null && Boolean.parseBoolean(tblBillSeriesDtl.getValueAt(i, 5).toString()))
		    {
			printInclusiveOfAllTaxesOnBill = "Y";
		    }
		    else
		    {
			printInclusiveOfAllTaxesOnBill = "N";
		    }
		    String billNote = "";
		    if (tblBillSeriesDtl.getValueAt(i, 6) != null)
		    {
			billNote = tblBillSeriesDtl.getValueAt(i, 6).toString().trim();
		    }

		    sqlBuilder.append(",('" + selectedPOSCode + "','" + cmbBillSeriesType.getSelectedItem().toString() + "'"
			    + ",'" + tblBillSeriesDtl.getValueAt(i, 1).toString() + "','0','" + funGetCodeList(listOfCodes) + "'"
			    + ",'" + funGetNameList(listOfNames) + "' ,'" + clsGlobalVarClass.gUserCode + "'"
			    + ",'" + clsGlobalVarClass.gUserCode + "','" + clsGlobalVarClass.getCurrentDateTime() + "'"
			    + ",'" + clsGlobalVarClass.getCurrentDateTime() + "','N','" + clsGlobalVarClass.gClientCode + "'"
			    + ",'" + clsGlobalVarClass.gPropertyCode + "','" + printGTOfOtherBill + "','" + printInclusiveOfAllTaxesOnBill + "'"
			    + ",'" + billNote + "')");
		}
	    }

	    //clsGlobalVarClass.dbMysql.execute("delete from tblbillseries");
	    if (sqlBuilder.length() > 0)
	    {
		String sql = sqlBuilder.substring(1);
		sqlBuilder.setLength(0);
		sqlBuilder.append(sql);
		clsGlobalVarClass.dbMysql.execute("insert into tblbillseries values ".concat(sqlBuilder.toString()));
	    }

//            if (tblBillSeriesDtl.getRowCount() > 0)
//            {
//                sqlBuilder.setLength(0);
//                for (int i = 0; i < tblBillSeriesDtl.getRowCount(); i++)
//                {
//                    if (i == 0)
//                    {
//                        sqlBuilder.append("('" + tblBillSeriesDtl.getValueAt(i, 1).toString() + "'");
//                    }
//                    else
//                    {
//                        sqlBuilder.append(",'" + tblBillSeriesDtl.getValueAt(i, 1).toString() + "'");
//                    }
//                }
//                sqlBuilder.append(")");
//                String sql = "delete from tblbillseries where strPOSCOde='" + selectedPOSCode + "'"
//                        + "and strBillSeries NOT IN " + sqlBuilder + " ";
//                clsGlobalVarClass.dbMysql.execute(sql);
//                if (selectedPOSCode.equalsIgnoreCase("All"))
//                {
//                    sql = "delete from tblbillseries where strPOSCOde<>'All' ";
//                    clsGlobalVarClass.dbMysql.execute(sql);
//                }
//                else
//                {
//                    sql = "delete from tblbillseries where strPOSCOde='All' ";
//                    clsGlobalVarClass.dbMysql.execute(sql);
//                }
//            }
	    //clsGlobalVarClass.dbMysql.funCommitTransaction();
	     String sql = "update tblmasteroperationstatus set dteDateEdited='" + clsGlobalVarClass.getCurrentDateTime() + "' "
                            + " where strTableName='BillSeries' ";
                    clsGlobalVarClass.dbMysql.execute(sql);
	    new frmOkPopUp(this, "Entry added Successfully", "Successfull", 3).setVisible(true);
	    return;
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	    // clsGlobalVarClass.dbMysql.funRollbackTransaction();
	}
    }

    private void funLoadOldBillSeries()
    {
	try
	{
	    DefaultTableModel dmBillSeries = (DefaultTableModel) tblBillSeriesDtl.getModel();
	    dmBillSeries.setRowCount(0);

	    String sqlLoadBillSeries = "select a.strType,a.strBillSeries,a.strCodes,a.strNames,a.strPrintGTOfOtherBills,strPrintInclusiveOfTaxOnBill "
		    + ",strBillNote "
		    + " from tblbillseries a "
		    + " where strPOSCode='" + selectedPOSCode + "' ";
	    ResultSet rsBillSeries = clsGlobalVarClass.dbMysql.executeResultSet(sqlLoadBillSeries);
	    int serialNo = 1;
	    mapSelectedCodeWithName.clear();
	    mapBillSeriesCodeList.clear();
	    mapBillSeriesNameList.clear();
	    while (rsBillSeries.next())
	    {
		List<String> listOfCodes = new ArrayList<>();
		List<String> listOfNames = new ArrayList<>();

		String[] codes = rsBillSeries.getString(3).split(",");
		String[] names = rsBillSeries.getString(4).split(",");

		StringBuilder billSeriesBuilder = new StringBuilder();
		for (int i = 0; i < codes.length; i++)
		{
		    listOfCodes.add(codes[i]);
		    listOfNames.add(names[i]);
		    mapSelectedCodeWithName.put(codes[i], names[i]);
		    if (i == 0)
		    {
			billSeriesBuilder.append(names[i]);
		    }
		    else
		    {
			billSeriesBuilder.append(",");
			billSeriesBuilder.append(names[i]);
		    }
		}
		if (billSeriesBuilder.length() > 0)
		{
		    DefaultTableModel dm = (DefaultTableModel) tblBillSeriesDtl.getModel();

		    boolean printGTOfOtherBills = false, printIncOfAllTaxes = false;
		    if (rsBillSeries.getString(5).equalsIgnoreCase("Y"))
		    {
			printGTOfOtherBills = true;
		    }
		    else
		    {
			printGTOfOtherBills = false;
		    }

		    if (rsBillSeries.getString(6).equalsIgnoreCase("Y"))
		    {
			printIncOfAllTaxes = true;
		    }
		    else
		    {
			printIncOfAllTaxes = false;
		    }

		    String billNote = rsBillSeries.getString(7);

		    Object[] rowData =
		    {
			serialNo, rsBillSeries.getString(2), billSeriesBuilder, false, printGTOfOtherBills, printIncOfAllTaxes, billNote
		    };
		    dm.addRow(rowData);
		}
		mapBillSeriesCodeList.put((serialNo), listOfCodes);
		mapBillSeriesNameList.put((serialNo), listOfNames);
		serialNo = serialNo + 1;
	    }
	    rsBillSeries.close();
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }

    private void funSetSelectedBillSeries()
    {
	try
	{
	    String sqlBillSeries = "";
	    sqlBillSeries = "select a.strType from tblbillseries a where a.strPOSCode='" + selectedPOSCode + "' group by a.strType  ";
	    ResultSet rsBillSeries = clsGlobalVarClass.dbMysql.executeResultSet(sqlBillSeries);
	    if (rsBillSeries.next())
	    {
		cmbBillSeriesType.setSelectedItem(rsBillSeries.getString(1));
		cmbBillSeriesType.setEnabled(false);

		funLoadOldBillSeries();
		//funFillNameWithCode(rsBillSeries.getString(1));
		funFillSelectedBillSeriesTypeDtlTable(rsBillSeries.getString(1));

	    }
	    else
	    {
		cmbBillSeriesType.setEnabled(true);
		//funFillNameWithCode("Group");
		((DefaultTableModel) tblBillSeriesDtl.getModel()).setRowCount(0);
		((DefaultTableModel) tblBillSeriesTypeDtl.getModel()).setRowCount(0);
		cmbBillSeriesType.setSelectedItem("Group");
		funFillSelectedBillSeriesTypeDtlTable("Group");
	    }

	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }

    private void funRemoveAddedRows()
    {
	try
	{

	    Iterator<Map.Entry<String, String>> it = mapSelectedCodeWithName.entrySet().iterator();
	    while (it.hasNext())
	    {
		String keyCode = it.next().getKey();
		for (int i = 0; i < tblBillSeriesTypeDtl.getRowCount(); i++)
		{
		    String code = tblBillSeriesTypeDtl.getValueAt(i, 2).toString();
		    if (keyCode.equals(code))
		    {
			((DefaultTableModel) tblBillSeriesTypeDtl.getModel()).removeRow(i);
		    }
		}
	    }

	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }

    private void funAddToTblSelectedTypeDtl()
    {
	for (int i = 0; i < tblBillSeriesDtl.getRowCount(); i++)
	{
	    if (Boolean.parseBoolean(tblBillSeriesDtl.getValueAt(i, 3).toString()))
	    {
		List<String> listOfCodes = mapBillSeriesCodeList.get(tblBillSeriesDtl.getValueAt(i, 0));
		List<String> listOfNames = mapBillSeriesNameList.get(tblBillSeriesDtl.getValueAt(i, 0));

		for (int j = 0; j < listOfCodes.size(); j++)
		{
		    DefaultTableModel dmTypeDtl = (DefaultTableModel) tblBillSeriesTypeDtl.getModel();
		    Object[] row =
		    {
			cmbBillSeriesType.getSelectedItem().toString(), listOfNames.get(j), listOfCodes.get(j), false
		    };
		    dmTypeDtl.addRow(row);
		    mapSelectedCodeWithName.remove(listOfCodes.get(j));
		}
		mapBillSeriesCodeList.remove(tblBillSeriesDtl.getValueAt(i, 0));
		mapBillSeriesNameList.remove(tblBillSeriesDtl.getValueAt(i, 0));
	    }
	}
    }

    private void funRemoveFromBillSeriesTable()
    {
	List<String> rowsToBeDeleted = new ArrayList<>();
	for (int i = 0; i < tblBillSeriesDtl.getRowCount(); i++)
	{
	    if (Boolean.parseBoolean(tblBillSeriesDtl.getValueAt(i, 3).toString()))
	    {
		rowsToBeDeleted.add(tblBillSeriesDtl.getValueAt(i, 0).toString());
	    }
	}

	for (int i = 0; i < rowsToBeDeleted.size(); i++)
	{
	    for (int j = 0; j < tblBillSeriesDtl.getRowCount(); j++)
	    {
		if (rowsToBeDeleted.get(i).equals(tblBillSeriesDtl.getValueAt(j, 0).toString()) && Boolean.parseBoolean(tblBillSeriesDtl.getValueAt(j, 3).toString()))
		{
		    ((DefaultTableModel) tblBillSeriesDtl.getModel()).removeRow(j);
		}
	    }
	}

    }

    private Integer funGetSerialNo()
    {
	int serialNo = 1;
	for (int i = 1; i <= 100; i++)
	{
	    if (mapBillSeriesCodeList.containsKey(i))
	    {
		continue;
	    }
	    else
	    {
		serialNo = i;
		break;
	    }
	}

	return serialNo;
    }

    private String funGetCodeList(List<String> listOfCodes)
    {
	StringBuilder sqlCodeBuilder = new StringBuilder();
	for (int i = 0; i < listOfCodes.size(); i++)
	{
	    if (i == 0)
	    {
		sqlCodeBuilder.append(listOfCodes.get(i));
	    }
	    else
	    {
		sqlCodeBuilder.append("," + listOfCodes.get(i));
	    }
	}

	return sqlCodeBuilder.toString();
    }

    private String funGetNameList(List<String> listOfNames)
    {
	StringBuilder sqlNameBuilder = new StringBuilder();
	for (int i = 0; i < listOfNames.size(); i++)
	{
	    if (i == 0)
	    {
		sqlNameBuilder.append(listOfNames.get(i));
	    }
	    else
	    {
		sqlNameBuilder.append("," + listOfNames.get(i));
	    }
	}

	return sqlNameBuilder.toString();
    }

    private boolean funIsExistsBillSeries(int row, List<String> listOfCodes, List<String> listOfNames)
    {
	boolean isExists = false;
	try
	{
	    String sql = "select * from tblbillseries a "
		    + "where (a.strPOSCode='" + selectedPOSCode + "' or a.strPOSCode='All')  and a.strBillSeries='" + tblBillSeriesDtl.getValueAt(row, 1).toString() + "' ;";
	    ResultSet rsBillSeries = clsGlobalVarClass.dbMysql.executeResultSet(sql);
	    if (rsBillSeries.next())
	    {
		isExists = true;
	    }
	    if (isExists)
	    {
		String printGTOfOtherBill = "N";
		if (tblBillSeriesDtl.getValueAt(row, 4) != null && Boolean.parseBoolean(tblBillSeriesDtl.getValueAt(row, 4).toString()))
		{
		    printGTOfOtherBill = "Y";
		}
		else
		{
		    printGTOfOtherBill = "N";
		}
		String printInclusiveOfAllTaxesOnBill = "N";
		if (tblBillSeriesDtl.getValueAt(row, 5) != null && Boolean.parseBoolean(tblBillSeriesDtl.getValueAt(row, 5).toString()))
		{
		    printInclusiveOfAllTaxesOnBill = "Y";
		}
		else
		{
		    printInclusiveOfAllTaxesOnBill = "N";
		}
		String billNote = "";
		if (tblBillSeriesDtl.getValueAt(row, 6) != null)
		{
		    billNote = tblBillSeriesDtl.getValueAt(row, 6).toString().trim();
		}

		clsGlobalVarClass.dbMysql.execute("update tblbillseries a "
			+ "set a.strCodes='" + funGetCodeList(listOfCodes) + "' "
			+ ", a.strNames='" + funGetNameList(listOfNames) + "' "
			+ ", a.strUserEdited='" + clsGlobalVarClass.gUserCode + "'"
			+ ", a.strType='" + cmbBillSeriesType.getSelectedItem().toString() + "' "
			+ ", a.dteEditedDate='" + clsGlobalVarClass.getCurrentDateTime() + "' "
			+ ", a.strPrintGTOfOtherBills='" + printGTOfOtherBill + "' "
			+ ", a.strPrintInclusiveOfTaxOnBill='" + printInclusiveOfAllTaxesOnBill + "' "
			+ ",strBillNote='" + billNote + "' "
			+ ",a.strPOSCode='" + selectedPOSCode + "' "
			+ " where a.strBillSeries='" + tblBillSeriesDtl.getValueAt(row, 1).toString() + "' "
			+ " and (a.strPOSCode='" + selectedPOSCode + "' or a.strPOSCode='All')  ");
	    }
//            else
//            {
//                clsGlobalVarClass.dbMysql.execute("delete from tblbillseries  where strBillSeries='" + tblBillSeriesDtl.getValueAt(row, 1).toString() + "' and strPOSCode='"+newPropertyPOSCode+"' and strType='"+cmbBillSeriesType.getSelectedItem().toString()+"' ");
//            }
	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
	finally
	{
	    return isExists;
	}
    }

    private void funBillSeriesCellClicked(int row)
    {
	//JTextField cell = new JTextField();
	//cell.setEditable(false);
	//final TableCellEditor cellEditor = new DefaultCellEditor(cell);
	//tblBillSeriesDtl.getColumnModel().getColumn(1).setCellEditor(cellEditor);

	tblBillSeriesDtl.getColumnModel().getColumn(1).setCellEditor(new frmBillSeriesMaster.CustomTableCellEditor());
    }

    private void funPOSComboActionPerformed()
    {
	String selectedPOSName = cmbPOS.getSelectedItem().toString();
	selectedPOSCode = mapPOS.get(selectedPOSName);

	funFillPOSWiseBillSeries();
    }

    private void funSaveButtonClicked()
    {
	try
	{
	    if (tblBillSeriesDtl.getRowCount() > 0)
	    {
		if (tblBillSeriesTypeDtl.getRowCount() > 0)
		{
		    new frmOkPopUp(this, "Please Select All Types", "Error", 1).setVisible(true);
		    return;
		}

		for (int i = 0; i < tblBillSeriesDtl.getRowCount(); i++)
		{
		    if (tblBillSeriesDtl.getValueAt(i, 1) == null || tblBillSeriesDtl.getValueAt(i, 1).toString().length() == 0)
		    {
			new frmOkPopUp(this, "Bill Series Can Not Be Empty.", "Error", 1).setVisible(true);
			return;
		    }
		    if (tblBillSeriesDtl.getValueAt(i, 1) != null && tblBillSeriesDtl.getValueAt(i, 1).toString().length() >= 3)
		    {
			new frmOkPopUp(this, tblBillSeriesDtl.getValueAt(i, 1).toString() + " Exceeds Bill Series Length.", "Error", 1).setVisible(true);
			return;
		    }

		    String billSeries = tblBillSeriesDtl.getValueAt(i, 1).toString();
		    for (int j = i + 1; j < tblBillSeriesDtl.getRowCount(); j++)
		    {
			if (billSeries.equalsIgnoreCase(tblBillSeriesDtl.getValueAt(j, 1).toString()))
			{
			    new frmOkPopUp(this, "Bill Series Can Not Be Duplicate.", "Error", 1).setVisible(true);
			    return;
			}
		    }
		}
	    }

	    funSaveBillSeries();

	}
	catch (Exception e)
	{
	    e.printStackTrace();
	}
    }

    private void funFillPOSWiseBillSeries()
    {
	mapSelectedCodeWithName.clear();
	mapSelectedCodeWithName.clear();
	mapBillSeriesCodeList.clear();
	mapBillSeriesNameList.clear();

	funCmbBillSeriestTypeClicked();
	funCustomiseBillSeriesTableColumnHeader();

	funSetSelectedBillSeries();
	if (tblBillSeriesDtl.getRowCount() > 0)
	{
	    btnNew.setText("UPDATE");
	}
	else
	{
	    btnNew.setText("SAVE");
	}
    }

    class CustomTableCellEditor extends AbstractCellEditor implements TableCellEditor
    {

	private TableCellEditor editor;

	@Override
	public Object getCellEditorValue()
	{
	    if (editor != null)
	    {
		return editor.getCellEditorValue();
	    }

	    return null;
	}

	@Override
	public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)
	{
	    JTextField cell = new JTextField();
	    try
	    {
//                System.out.println("\nrow=" + row + "\tcolumn=" + column + "\tvalue=" + value);
		ResultSet rsIsExits = clsGlobalVarClass.dbMysql.executeResultSet("select * from tblbillseries where strBillSeries='" + value + "' ");
		if (rsIsExits.next())
		{
		    cell.setEditable(false);
		}
		else
		{
		    cell.setEditable(true);
		}
		editor = new DefaultCellEditor(cell);
	    }
	    catch (Exception e)
	    {
		e.printStackTrace();
	    }

	    AbstractDocument document = (AbstractDocument) cell.getDocument();
	    final int maxCharacters = 2;
	    document.setDocumentFilter(new DocumentFilter()
	    {
		public void replace(DocumentFilter.FilterBypass fb, int offs, int length, String str, AttributeSet a) throws BadLocationException
		{

		    String text = fb.getDocument().getText(0, fb.getDocument().getLength());
		    text += str;
		    if ((fb.getDocument().getLength() + str.length() - length) <= maxCharacters && text.matches("[A-Za-z]*"))
		    {
			super.replace(fb, offs, length, str, a);
		    }
		    else
		    {
			Toolkit.getDefaultToolkit().beep();
		    }
		}

		public void insertString(DocumentFilter.FilterBypass fb, int offs, String str, AttributeSet a) throws BadLocationException
		{

		    String text = fb.getDocument().getText(0, fb.getDocument().getLength());
		    text += str;
		    if ((fb.getDocument().getLength() + str.length()) <= maxCharacters && text.matches("[A-Za-z]*"))
		    {
			super.insertString(fb, offs, str, a);
		    }
		    else
		    {
			Toolkit.getDefaultToolkit().beep();
		    }
		}
	    });

	    return editor.getTableCellEditorComponent(table, value, isSelected, row, column);
	}
    }

    private void funCustomiseBillSeriesTableColumnHeader()
    {
	JTableHeader header = tblBillSeriesDtl.getTableHeader();
	header.setPreferredSize(new Dimension(header.getWidth(), 50));

	DefaultTableCellRenderer renderer = (DefaultTableCellRenderer) tblBillSeriesDtl.getTableHeader().getDefaultRenderer();
	renderer.setHorizontalAlignment(JLabel.LEFT);
	renderer.setVerticalTextPosition(JLabel.TOP);
	renderer.setVerticalAlignment(JLabel.TOP);
    }
}
