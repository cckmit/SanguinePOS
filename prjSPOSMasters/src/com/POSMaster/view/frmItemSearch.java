/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.POSMaster.view;

//import  PosDesign.frmTDH.tblItem;
import com.POSGlobal.controller.clsGlobalVarClass;
import com.POSGlobal.controller.clsUtility;
import com.POSGlobal.view.frmAlfaNumericKeyBoard;
import com.POSGlobal.view.frmOkPopUp;
import java.sql.ResultSet;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author Administrator
 */
public class frmItemSearch extends javax.swing.JDialog
{

    private String sql;
    ResultSet rs;
    frmTDH tdhOb;
    private int SelectedRowNo;
    private boolean isItemSeleted;
    private int duplicateRowNo;
    private String costCenterCode;
    private String menuHeadCode;
    clsUtility objUtility = new clsUtility();
    
    /**
     * Creates new form frmItemSearch
     */
    public frmItemSearch(Object obj, java.awt.Frame parent, boolean modal, String costCenter)
    {
        
        
        super(parent, modal);
        initComponents();
        tdhOb = (frmTDH) obj;
        this.costCenterCode = costCenter;
        System.out.println("CostCenterCode from item search form" + costCenterCode);
        filltable(costCenterCode);
        isItemSeleted = false;
        funSetShortCutKeys();

    }
    
    public frmItemSearch(Object obj, java.awt.Frame parent, boolean modal, String costCenter,String menuHeadCode)
    {
        super(parent, modal);
        initComponents();
        tdhOb = (frmTDH) obj;
        this.costCenterCode = costCenter;
        this.menuHeadCode=menuHeadCode;
        System.out.println("CostCenterCode from item search form" + costCenterCode);
        filltable(costCenterCode,menuHeadCode);
        isItemSeleted = false;
        funSetShortCutKeys();

    }
    
    

    private void funSetShortCutKeys()
    {
        jButton2.setMnemonic('c');
        btnAdd.setMnemonic('s');

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        tblItemSearch = new javax.swing.JTable();
        lblItemName = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        lblBody = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBounds(new java.awt.Rectangle(200, 75, 500, 300));
        setMinimumSize(new java.awt.Dimension(500, 300));
        setUndecorated(true);
        getContentPane().setLayout(null);

        tblItemSearch.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        tblItemSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItemSearch.setRowHeight(25);
        tblItemSearch.getTableHeader().setReorderingAllowed(false);
        tblItemSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemSearchMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(tblItemSearch);
        if (tblItemSearch.getColumnModel().getColumnCount() > 0) {
            tblItemSearch.getColumnModel().getColumn(0).setResizable(false);
            tblItemSearch.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblItemSearch.getColumnModel().getColumn(1).setResizable(false);
            tblItemSearch.getColumnModel().getColumn(1).setPreferredWidth(100);
        }

        getContentPane().add(scrollPane);
        scrollPane.setBounds(40, 60, 400, 230);

        lblItemName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblItemName.setText("Item Name");
        getContentPane().add(lblItemName);
        lblItemName.setBounds(10, 20, 81, 30);

        txtSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSearchMouseClicked(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });
        getContentPane().add(txtSearch);
        txtSearch.setBounds(80, 20, 110, 30);

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.setToolTipText("Search Item");
        btnSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSearch.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch);
        btnSearch.setBounds(200, 20, 75, 30);

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        jButton2.setText("CLOSE");
        jButton2.setToolTipText("Close Item Search");
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(400, 20, 80, 30);

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn1.png"))); // NOI18N
        btnAdd.setText("ADD");
        btnAdd.setToolTipText("Add Item");
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgCmnBtn2.png"))); // NOI18N
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddMouseClicked(evt);
            }
        });
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd);
        btnAdd.setBounds(290, 20, 90, 30);

        lblBody.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/POSMaster/images/imgBGJPOS.png"))); // NOI18N
        getContentPane().add(lblBody);
        lblBody.setBounds(0, 0, 500, 300);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblItemSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemSearchMouseClicked
        try
        {
            isItemSeleted = true;
            SelectedRowNo = 0;
            SelectedRowNo = tblItemSearch.getSelectedRow();
            System.out.println("SelectedRowNo=" + SelectedRowNo);

        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_tblItemSearchMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        filltable(costCenterCode,menuHeadCode);
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSearchMouseClicked
        // TODO add your handling code here:
        try
        {
            new frmAlfaNumericKeyBoard(null, true, "1", "Search").setVisible(true);
            txtSearch.setText(clsGlobalVarClass.gKeyboardValue);
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }//GEN-LAST:event_txtSearchMouseClicked
    public void funItemSearch()
    {
        try
        {
            if (isItemSeleted)
            {
                String tempItemCode, ItemName;
                // tdhOb.addRow();
                //tdhOb.tblItem
                tempItemCode = tblItemSearch.getValueAt(SelectedRowNo, 0).toString();
                ItemName = tblItemSearch.getValueAt(SelectedRowNo, 1).toString();
                if (funCheckDuplicateItem(tempItemCode))
                {
                    double tempQty = Double.parseDouble(tdhOb.tblItem.getValueAt(duplicateRowNo, 3).toString());
                    if(tempQty>=tdhOb.funGetMaximumItemLimitQuantity())
                    {
                        new frmOkPopUp(tdhOb, "Max Item Quantity Exceeds.", "", 1).setVisible(true);
                        return;
                    }
//                    tempQty += 1.0;
//                    tdhOb.tblItem.setValueAt(tempQty, duplicateRowNo, 3);
                }
                else
                {
                    DefaultTableModel dm = (DefaultTableModel) tdhOb.tblItem.getModel();
                    Object[] ob =
                    {
                        tempItemCode, ItemName, false,tdhOb.funGetMaximumItemLimitQuantity(),tdhOb.funGetSelectedMenuHeadCode()
                    };
                    dm.addRow(ob);
                    tdhOb.tblItem.setModel(dm);
                }
                isItemSeleted = false;
            }
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }
    private void btnAddMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseClicked
        // TODO add your handling code here:
        funItemSearch();

    }//GEN-LAST:event_btnAddMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        funItemSearch();
    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(frmItemSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(frmItemSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(frmItemSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(frmItemSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                //new frmItemSearch(null,null,tr).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel lblBody;
    private javax.swing.JLabel lblItemName;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tblItemSearch;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    /**
     * This method is used to fill table
     *
     * @param CostCenterCode
     */
    private void filltable(String costCenterCode,String menuHeadCode)
    {
        try
        {
            DefaultTableModel dm = (DefaultTableModel) tblItemSearch.getModel();
            dm.setRowCount(0);
            //sql = "select strItemCode,strItemName from  tblitemmaster where strItemName Like '%" + txtSearch.getText() + "%'";
            //sql = "select strItemCode,strItemName from  tblitemmaster where strItemName Like '%" + txtSearch.getText() + "%'";
            sql = "select a.strItemCode,a.strItemName from tblitemmaster a,  tblmenuitempricingdtl b "
                    + "where a.strItemCode=b.strItemCode and b.strCostCenterCode='" + costCenterCode + "' and b.strMenuCode='"+menuHeadCode+"' and a.strItemName Like '%" + txtSearch.getText() + "%'";
            System.out.println("sql=" + sql);
            rs = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            while (rs.next())
            {
                Object[] ob =
                {
                    rs.getString(1), rs.getString(2)
                };
                dm.addRow(ob);
            }
            rs.close();
            tblItemSearch.setModel(dm);
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }
    
     /**
     * This method is used to fill table
     *
     * @param CostCenterCode
     */
    private void filltable(String costCenterCode)
    {
        try
        {
            DefaultTableModel dm = (DefaultTableModel) tblItemSearch.getModel();
            dm.setRowCount(0);
            //sql = "select strItemCode,strItemName from  tblitemmaster where strItemName Like '%" + txtSearch.getText() + "%'";
            //sql = "select strItemCode,strItemName from  tblitemmaster where strItemName Like '%" + txtSearch.getText() + "%'";
            sql = "select a.strItemCode,a.strItemName from tblitemmaster a,  tblmenuitempricingdtl b "
                    + "where a.strItemCode=b.strItemCode and b.strCostCenterCode='" + costCenterCode + "' and a.strItemName Like '%" + txtSearch.getText() + "%'";
            System.out.println("sql=" + sql);
            rs = clsGlobalVarClass.dbMysql.executeResultSet(sql);
            while (rs.next())
            {
                Object[] ob =
                {
                    rs.getString(1), rs.getString(2)
                };
                dm.addRow(ob);
            }
            rs.close();
            tblItemSearch.setModel(dm);
        }
        catch (Exception e)
        {
            objUtility.funWriteErrorLog(e);
            e.printStackTrace();
        }
    }

    /**
     * This method is used to check duplicate items
     *
     * @param tempItemCode
     * @return boolean
     */
    private boolean funCheckDuplicateItem(String tempItemCode)
    {
        boolean flagItemFound = false;
        try
        {
            if (tdhOb.tblItem.getRowCount() <= 0)
            {
                //donothing   
            }
            else
            {
                for (int i = 0; i < tdhOb.tblItem.getRowCount(); i++)
                {
                    System.out.println("tempItemCode=" + tempItemCode);
                    System.out.println("tdhOb.tblItem.getValueAt(i, 1).toString())=" + tdhOb.tblItem.getValueAt(i, 0).toString());
                    if (tempItemCode.equalsIgnoreCase(tdhOb.tblItem.getValueAt(i, 0).toString()))
                    {
                        flagItemFound = true;
                        duplicateRowNo = i;
                        break;
                    }
                }
            }

        }
        catch (Exception e)
        {
        }
        finally
        {
            return flagItemFound;
        }

    }
}
